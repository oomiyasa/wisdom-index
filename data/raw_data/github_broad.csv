description,rationale,use_case,impact_area,transferability_score,actionability_rating,evidence_strength,type_(form),tag_(application),unique?,role,function,company,industry,country,date,source_(interview_#/_name),link,notes
"Allow to scope settings by platform Hi I develop on 3 different platform. When synchronizing settings, snippets and so on, i often must change path, adjust font-size, etc... So, it could be great if we had a per platform settings set (Windows, Mac, Unix)",,,,,,Anecdotal,issue,,,,,,,,2016-04-21,github/arnaud-lecat,https://github.com/microsoft/vscode/issues/5595,repo: microsoft/vscode | keyword: workaround | state: open
"Did this happen? I'd like to consolidate my VSCode settings.json. Great job on the editor, by the way. It's really been a help to me, and the mix of intuitiveness and power makes it easy to recommend to new programmers.",,,,,,Anecdotal,comment,,,,,,,,2018-12-12,github/bbkane,https://github.com/microsoft/vscode/issues/5595#issuecomment-446780359,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"@bbkane it got pushed out unfortunately, the issue will be closed with a milestone set (the version it'll land in) when it's done.",,,,,,Anecdotal,comment,,,,,,,,2018-12-13,github/Tyriar,https://github.com/microsoft/vscode/issues/5595#issuecomment-447026265,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"I know you are working hard on all kind of nice features, still, is there any updates on when this might get a new milestone/target release?",,,,,,Anecdotal,comment,,,,,,,,2019-01-22,github/thernstig,https://github.com/microsoft/vscode/issues/5595#issuecomment-456383472,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"Its still under discussion, one approach we are thinking is to support Machine specific settings rather than Platform specific. Because most of these settings are path related and they are scoped to a machine rather to platform.",,,,,,Anecdotal,comment,,,,,,,,2019-01-30,github/sandy081,https://github.com/microsoft/vscode/issues/5595#issuecomment-458908810,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
Plattform specific > machine specific I want to place settings on a cloud drive and access it from various machines. In that scenario I would barely benefit from machine specific.,,,,,,Anecdotal,comment,,,,,,,,2019-01-30,github/chris400,https://github.com/microsoft/vscode/issues/5595#issuecomment-458913413,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"@sandy081 For example, I would like to be able to use a different font on Windows vs Mac OS. Or on Linux I want to use the native title-bar. I am using the [Setting Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync) extension so it would be useful if I could share one configuration across all my machines.",,,,,,Anecdotal,comment,,,,,,,,2019-01-30,github/eberkund,https://github.com/microsoft/vscode/issues/5595#issuecomment-458999658,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"@sandy081 https://github.com/Microsoft/vscode/issues/17619 describes it perfectly: the pathes differ on Windows, Linux and macOS.",,,,,,Anecdotal,comment,,,,,,,,2019-01-30,github/chris400,https://github.com/microsoft/vscode/issues/5595#issuecomment-459027931,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"@sandy081 There are other settings besides paths, fonts etc. that one might want different per OS. For example [""keyboard.dispatch""](https://github.com/Microsoft/vscode/wiki/Keybinding-Issues) I also think settings per OS also fits better since keyboard settings and launch configs have support per OS. So making the normal settings also be per OS would fit better in that sense.",,,,,,Anecdotal,comment,,,,,,,,2019-01-30,github/thernstig,https://github.com/microsoft/vscode/issues/5595#issuecomment-459127665,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"There is [language specific settings](https://vscode.readthedocs.io/en/latest/getstarted/settings/#language-specific-editor-settings), which allows the following: ```json { ""[typescript]"": { ""editor.formatOnSave"": true, ""editor.formatOnPaste"": true }, ""[markdown]"": { ""editor.formatOnSave"": true, ""editor.wordwrap"": ""on"", ""editor.renderWhitespace"": ""all"", ""editor.acceptSuggestionOnEnter"": false } } ``` I suggest to follow up this and allow something like: ```json { ""[[osx]]"": { ""editor.fontSize"":…",,,,,,Anecdotal,comment,,,,,,,,2019-02-20,github/FelikZ,https://github.com/microsoft/vscode/issues/5595#issuecomment-465650375,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"@FelikZ Is there a reason you formatted osx, windows, & linux keys differently? Or just illustrating possibilities? I think single brackets are most consistent: `[windows]` @sandy081 Platform & machine specific would be great. I'm assuming some pattern like this? ```json ""[windows]: { ""editor.fontSize"": 13, }, ""[Jonny-PC]"": { ""local-history.path"": ""c:\dev\.vscode"", } ``` One additional consideration is that `terminal.integrated.shell` (maybe others?) follows a divergent pattern: ```json ""termin…",,,,,,Anecdotal,comment,,,,,,,,2019-03-03,github/jonnyasmar,https://github.com/microsoft/vscode/issues/5595#issuecomment-469045013,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"I like the idea of using `[]` to represent conditions in JSON. Because `[language]` is already being used as a specialization option, we should consider guarding other names (I'm using sub-maps and the ""platform"" namespace below""). I also think it would be nice to make the override order explicit. A theoretical example extending the namespacing with a new key `platform` and use maps inside to specialize: ```json { // settings later in the list override settings earlier in the list ""settingsOver…",,,,,,Anecdotal,comment,,,,,,,,2019-03-05,github/bbkane,https://github.com/microsoft/vscode/issues/5595#issuecomment-469496488,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"I work at Oculus/Facebook and this might be the only feature missing for us to start using VSCode heavily The proposal ""[platform.os.osx]"": ... ""[platform.hostname.mac01]"" ... or some regex around it might be fantastic",,,,,,Anecdotal,comment,,,,,,,,2019-03-15,github/walter-erquinigo,https://github.com/microsoft/vscode/issues/5595#issuecomment-473143295,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"> @chris400 Can you please give me the example of those settings? I am extending my explanation https://github.com/Microsoft/vscode/issues/5595#issuecomment-459027931: my code sits on a local server, the pathes to the code differs on every plattform.",,,,,,Anecdotal,comment,,,,,,,,2019-04-07,github/chris400,https://github.com/microsoft/vscode/issues/5595#issuecomment-480593953,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"+1 to desirable feature A portable/embedded version of Python was compiled to each of those archs In a project I'm working on. The portable environment is used to both run/test the bundled portable software and provide the portable dev env as well. But this missing feature may affect any project intended to be coded in more than one OS. ``` // settings.json { ""terminal.integrated.env.linux"": { ""PATH"": "".tools/linux/bin:${env:PATH}"" }, ""terminal.integrated.env.osx"": { ""PATH"": "".tools/macos/bin:$…",,,,,,Anecdotal,comment,,,,,,,,2019-04-23,github/mazza,https://github.com/microsoft/vscode/issues/5595#issuecomment-485877346,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"I don't know if this has been said, but platform specific settings are useful for more things than just paths and keybinds. I move between several boxes daily, on all 3 main platforms (Windows, Mac, Linux), and each one needs separate `window.zoomLevel` settings in order for things to look right.",,,,,,Anecdotal,comment,,,,,,,,2019-05-26,github/rossipedia,https://github.com/microsoft/vscode/issues/5595#issuecomment-496031591,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"I have this for example in my settings: ""cmake.cmakePath"": ""/Applications/CMake.app/Contents/bin/cmake"", ""cortex-debug.openocdPath"": ""/Applications/ModusToolbox_1.1/tools/openocd-1.0/bin/openocd"", I understand there are issues with some proposed solutions and instead of developers rejecting possible solutions, are there any developers who can propose a solution for this issue? We're in 2019 and still have to edit settings to switch platforms?",,,,,,Anecdotal,comment,,,,,,,,2019-06-07,github/RolfNoot,https://github.com/microsoft/vscode/issues/5595#issuecomment-500010068,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"Following here from my previous use case regarding python paths on different OSes (https://github.com/Microsoft/vscode/issues/17619#issuecomment-365521276), I also just discovered Shan Khan's excellent [Settings Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync) and wish that I could keep one sync'd non-workspace `settings.json` file with separate UI configs for the different machines I work on. An appropriate `""editor.fontSize""` is very different on a 13"" MacBoo…",,,,,,Anecdotal,comment,,,,,,,,2019-08-09,github/repentsinner,https://github.com/microsoft/vscode/issues/5595#issuecomment-520071583,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"@repentsinner I just looked into this again, and it seems as though Settings Sync [allows for selectively ignoring certain settings](https://github.com/shanalikhan/code-settings-sync/wiki/Sync-Pragmas#ignoring-certain-settings): ``` javascript // settings.json { // @sync-ignore ""window.zoomLevel"": ""1"", /* won't upload to gist */ } ``` I'm not sure that suits your purposes, but I think it'll get me most of the way to where I need to go",,,,,,Anecdotal,comment,,,,,,,,2019-08-10,github/rossipedia,https://github.com/microsoft/vscode/issues/5595#issuecomment-520098764,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"@rossipedia @jarod51, @repentsinner I used your link and noticed you can do per-host, os, env with Settings Sync: ``` // settings.json on linux { // @sync os=linux ""window.zoomLevel"": ""1"" } ``` ``` // settings.json on a computer with the environmental variable ""CODE_ZOOM_1"" set { // @sync env=CODE_ZOOM_1 ""window.zoomLevel"": ""1"" } ``` ``` // settings.json on ""home"" computer { // @sync host=home ""window.zoomLevel"": ""1"" } ```",,,,,,Anecdotal,comment,,,,,,,,2019-08-30,github/michaeltarleton,https://github.com/microsoft/vscode/issues/5595#issuecomment-526713855,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
I'm honestly kind of surprised that this is still an issue. The setting sync isn't reliable enough an answer for me. I've had setting syncs revert my settings to months older versions multiple times and I don't consider it reliable enough to solve this problem. This really should be built in. I mean it's even possible for me to sync my zshrc settings pretty easily as both zsh and bash have really easy OS specific conditional statements possible.,,,,,,Anecdotal,comment,,,,,,,,2019-09-16,github/jcklpe,https://github.com/microsoft/vscode/issues/5595#issuecomment-531644408,repo: microsoft/vscode | issue: Allow to scope settings by platform | keyword: workaround
"Zen Mode Settings I request a special property for zen mode zenMode.fontSize and ""zenMode.fontWeight"": ""bold"" So would be different from editor property settings",,,,,,Anecdotal,issue,,,,,,,,2018-03-12,github/Jonatthu,https://github.com/microsoft/vscode/issues/45617,repo: microsoft/vscode | keyword: workaround | state: open
"(Experimental duplicate detection) Thanks for submitting this issue. Please also check if it is already covered by an existing one, like: - [Zen mode restore setting restores only full-screen (#44652)](https://www.github.com/Microsoft/vscode/issues/44652) <!-- score: 0.602 --> - [Zen mode remove top bar (#30567)](https://www.github.com/Microsoft/vscode/issues/30567) <!-- score: 0.575 --> - [Allow to view Taskbar and clock in zen mode (#45528)](https://www.github.com/Microsoft/vscode/issues/4552…",,,,,,Anecdotal,comment,,,,,,,,2018-03-12,github/vscodebot[bot],https://github.com/microsoft/vscode/issues/45617#issuecomment-372454427,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"This seems like a special settings for zen mode which would take effect when in zen mode. Something like a language identifier settings which take priority when you are in javascript file for example. ```json ""[zen]"": { ""editor.fontSize"": 12 } ``` Renaming this feature request to be more global.",,,,,,Anecdotal,comment,,,,,,,,2018-03-13,github/isidorn,https://github.com/microsoft/vscode/issues/45617#issuecomment-372598246,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
I think also things should be configurable in zen mode for a better concentrating on a code: * Hide minimap * Hide scrollbar * Hide strange line on the left side (resizing hook) ![screen shot 2018-04-27 at 12 52 36](https://user-images.githubusercontent.com/46930/39356975-197216d8-4a1a-11e8-9806-2c4f6115ebbb.png),,,,,,Anecdotal,comment,,,,,,,,2018-04-27,github/Ky6uk,https://github.com/microsoft/vscode/issues/45617#issuecomment-384953748,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
It would be nice if this was applied more generally by allowing settings to be changed after a certain action has been executed.,,,,,,Anecdotal,comment,,,,,,,,2018-06-18,github/ghost,https://github.com/microsoft/vscode/issues/45617#issuecomment-397919288,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"@sandy081 is this feature request realistic, could we add a new configuration scope for zen mode. Here's a highly requested feature which would benefit from this https://github.com/Microsoft/vscode/issues/31609 We could also deprecat a lot of zenMode specific settings if we added this",,,,,,Anecdotal,comment,,,,,,,,2018-12-27,github/isidorn,https://github.com/microsoft/vscode/issues/45617#issuecomment-450121746,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"@isidorn Do you think all editor settings makes sense to be overridable in zen mode? This also brings up new overriding dimension, for eg zen mode takes precedence over language settings?",,,,,,Anecdotal,comment,,,,,,,,2019-01-03,github/sandy081,https://github.com/microsoft/vscode/issues/45617#issuecomment-451160517,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"@sandy081 yes I think all editor setting make sense to be overriden in zen mode. However in general I would need more than editor setting. Do for language overried you only allow editor ones to be overriden? Yes, zen mode should take precedence over language settings imho. In practice here are the most needed ones: `editor.lineNumber` `workbench.editor.showTabs` `workbench.activityBar.visible` `workbench.statusBar.visible` `editor.fontSize`",,,,,,Anecdotal,comment,,,,,,,,2019-01-03,github/isidorn,https://github.com/microsoft/vscode/issues/45617#issuecomment-451179127,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
> Do for language overried you only allow editor ones to be overriden Yes. So you need support for more identifiers that can override settings (not just editor).,,,,,,Anecdotal,comment,,,,,,,,2019-01-04,github/sandy081,https://github.com/microsoft/vscode/issues/45617#issuecomment-451391061,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"Yes, it will for the user. It is hard to explain why some settings are supported for some override identifiers and not for others especially there is no UI. Also this will introduce two types of settings for zen mode, one those with `zen.*` and others with `[zen]`. Is not it simple if all settings follow only one type?",,,,,,Anecdotal,comment,,,,,,,,2019-01-04,github/sandy081,https://github.com/microsoft/vscode/issues/45617#issuecomment-451421691,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"Ok, I can provide following internally - Contribute override identifiers with settings to override.",,,,,,Anecdotal,comment,,,,,,,,2019-01-04,github/sandy081,https://github.com/microsoft/vscode/issues/45617#issuecomment-451447341,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"I'd love to hide git changes and disable the minimap when I'm in Zen mode, but I need it in my normal workflow. Has there been any updates to this, or workarounds with zenMode specific settings?",,,,,,Anecdotal,comment,,,,,,,,2022-05-10,github/Mattsteele1197,https://github.com/microsoft/vscode/issues/45617#issuecomment-1122181974,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"> I'd love to hide git changes and disable the minimap when I'm in Zen mode, but I need it in my normal workflow. > > Has there been any updates to this, or workarounds with zenMode specific settings? +1",,,,,,Anecdotal,comment,,,,,,,,2023-09-19,github/miguno,https://github.com/microsoft/vscode/issues/45617#issuecomment-1726324120,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"Centred mode has vertical rulers. 1) Vertical rules (width) settings is being saved somewhere, but can only be configured by mouse. A numeric setting would be nice to have. 2) Would be nice to have zen.EditorMinWidth. Currently editor width is controlled by vertical rulers, which tied to % of width available, hence width changes on different displays and windowed/full-screen modes. New settings or two would give a better, more predictable control over focused editor size.",,,,,,Anecdotal,comment,,,,,,,,2023-10-15,github/anatoly-yakubov-betpawa,https://github.com/microsoft/vscode/issues/45617#issuecomment-1763380879,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"I would love to disable the lightbulb when in Zen mode. The settings for it is `""editor.lightbulb.enabled"": false`, but there's currently no way to set it conditionally only for Zen mode.",,,,,,Anecdotal,comment,,,,,,,,2024-05-24,github/cshaa,https://github.com/microsoft/vscode/issues/45617#issuecomment-2130057027,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"I would like to disable the double-click for MarkDown preview when in Zen mode: I often project MDs using ZenMode (and do not want double-click to trigger the window with the md original file), but modify them outside Zen (and then the double-click is useful).",,,,,,Anecdotal,comment,,,,,,,,2024-09-03,github/faenuccio,https://github.com/microsoft/vscode/issues/45617#issuecomment-2325654566,repo: microsoft/vscode | issue: Zen Mode Settings | keyword: workaround
"NVDA announces “unknown” and then goes silent after opening a folder in VS Code; speech resumes only after reload/restart Type: <b>Bug</b> Steps to Reproduce 1. Start NVDA. 2. Launch VS Code. 3. Open a folder: Ctrl+K Ctrl+O or File > Open Folder, pick any folder with a few files. 4. Observe what NVDA says right after the folder loads and when navigating the Explorer. Expected Behavior NVDA should announce the folder name and then read Explorer tree items and the rest of the UI normally. Actual …",,,,,,Anecdotal,issue,,,,,,,,2025-08-19,github/guido-warken,https://github.com/microsoft/vscode/issues/262347,repo: microsoft/vscode | keyword: workaround | state: open
Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has alrea…,,,,,,Anecdotal,issue,,,,,,,,2025-08-07,github/SilentZhang,https://github.com/microsoft/vscode/issues/260230,repo: microsoft/vscode | keyword: workaround | state: open
"<img width=""1906"" height=""926"" alt=""Image"" src=""https://github.com/user-attachments/assets/64f8eea1-6271-478b-a7da-79d12484d2c4"" /> https://youtu.be/EkVU2rKIdpc",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/SilentZhang,https://github.com/microsoft/vscode/issues/260230#issuecomment-3162303503,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: workaround
Hi! Does it work if you disable the python environments extension by doing `python.useEnvironmentsExtension: false` in your user settings? If so this is likely an issue with conda and that extension which I have made comprehensive updates to within the past few days so if you could get the newest pre-release of the python environments extension and try it there that would be great! see https://github.com/microsoft/vscode-python-environments/issues/678 and https://github.com/microsoft/vscode-pyt…,,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/eleanorjboyd,https://github.com/microsoft/vscode/issues/260230#issuecomment-3184908174,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: workaround
我也遇到了相同的问题，正确的方法是使用 `conda init powershell`达到在powershell启动时自动加载Conda环境的效果。不推荐通过修改PATH变量引入Conda环境，可能影响其他程序。,,,,,,Anecdotal,comment,,,,,,,,2025-08-17,github/tecog,https://github.com/microsoft/vscode/issues/260230#issuecomment-3194174043,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: workaround
Hi @tecog could you explain exactly what you are seeing? Are you saying you want to activate it without using `conda init powershell` because this should support that and if not then you are facing a bug,,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/eleanorjboyd,https://github.com/microsoft/vscode/issues/260230#issuecomment-3197544004,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: workaround
"Hi @eleanorjboyd, thanks for following up! Apologies for the confusion — I wasn’t reporting a bug myself. I was just responding to @SilentZhang to share the correct way to configure Conda in PowerShell. What I suggested was using `conda init powershell`, which modifies the PowerShell startup configuration (specifically `$PROFILE.CurrentUserAllHosts`) so that Conda is automatically initialized when a PowerShell session starts. This is the recommended approach instead of manually adding Conda to …",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/tecog,https://github.com/microsoft/vscode/issues/260230#issuecomment-3198958400,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: workaround
"Copilot Chat Edit & Agent Mode cannot apply suggestions on a file opened in Remote - SSH Steps to Reproduce: I am using a Windows machine to Remote-SSH into a Linux remote server. I have a file open in VS Code `~/some_file.py`, and I open Copilot Chat in Edit mode (or agent mode) and ask it to apply some suggestions. However, Copilot is unable to find the file and complains.. - Copilot Chat Extension Version: 0.29.1 - VS Code Version: 1.102.3 - OS Version: Windows 11 - Feature (e.g. agent/edit/…",,,,,,Anecdotal,issue,,,,,,,,2025-08-05,github/manestay,https://github.com/microsoft/vscode/issues/259811,repo: microsoft/vscode | keyword: workaround | state: open
"Thanks for creating this issue! It looks like you may be using an old version of VS Code, the latest stable release is 1.102.3. Please try upgrading to the latest version and checking whether this issue remains. Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2025-08-05,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/259811#issuecomment-3155181669,repo: microsoft/vscode | issue: Copilot Chat Edit & Agent Mode cannot apply suggestions on a file opened in Remote - SSH | keyword: workaround
"Also, I have these lines in my VS Code `settings.json`, as the remote server does not support running the Copilot extensions there due to limited RAM available: ``` ""remote.extensionKind"": { ""GitHub.copilot"": [ ""ui"" ], ""GitHub.copilot-chat"": [ ""ui"" ] }, ```",,,,,,Anecdotal,comment,,,,,,,,2025-08-05,github/manestay,https://github.com/microsoft/vscode/issues/259811#issuecomment-3155192336,repo: microsoft/vscode | issue: Copilot Chat Edit & Agent Mode cannot apply suggestions on a file opened in Remote - SSH | keyword: workaround
"Related to https://github.com/microsoft/vscode-copilot-release/issues/6113 , but while that one is for a local workspace, my request concerns a Remote-SSH connection into a Linux workspace, from a Windows 11 local.",,,,,,Anecdotal,comment,,,,,,,,2025-08-06,github/manestay,https://github.com/microsoft/vscode/issues/259811#issuecomment-3157089556,repo: microsoft/vscode | issue: Copilot Chat Edit & Agent Mode cannot apply suggestions on a file opened in Remote - SSH | keyword: workaround
Let me know if any additional information is needed from me. I can reproduce this 100% of the time. The only subpar workaround on my Windows 11 machine is to use Ask mode and manually paste in the changes in the appropriate places.,,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/manestay,https://github.com/microsoft/vscode/issues/259811#issuecomment-3176668718,repo: microsoft/vscode | issue: Copilot Chat Edit & Agent Mode cannot apply suggestions on a file opened in Remote - SSH | keyword: workaround
"The Copilot extensions only work as workspace, not UI, extensions. Please remove them from the `""remote.extensionKind""` setting.",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/chrmarti,https://github.com/microsoft/vscode/issues/259811#issuecomment-3201145018,repo: microsoft/vscode | issue: Copilot Chat Edit & Agent Mode cannot apply suggestions on a file opened in Remote - SSH | keyword: workaround
"Feature Request: ability to automatically include a standard set of directives with each query <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> Currently, when I provide a specific set of directives around how I want Copilot to handle my queries, those directives remain in the cont…",,,,,,Anecdotal,issue,,,,,,,,2025-08-08,github/carlleeswanson,https://github.com/microsoft/vscode/issues/260680,repo: microsoft/vscode | keyword: workaround | state: open
Have a look at https://code.visualstudio.com/docs/copilot/copilot-customization#_custom-instructions.,,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/aeschli,https://github.com/microsoft/vscode/issues/260680#issuecomment-3174039258,repo: microsoft/vscode | issue: Feature Request: ability to automatically include a standard set of directives with each query | keyword: workaround
"Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> There is a new trust prompt when someone wants to install an extension, but there is no way of disabling it. As @isidorn pointed out on [reddit](…",,,,,,Anecdotal,issue,,,,,,,,2025-02-10,github/danieltodor,https://github.com/microsoft/vscode/issues/240283,repo: microsoft/vscode | keyword: workaround | state: open
Thank you for your feedback and for opening this issue. It is a fair feature request. Keeping it open to gather more user feedback and thoughts.,,,,,,Anecdotal,comment,,,,,,,,2025-02-11,github/isidorn,https://github.com/microsoft/vscode/issues/240283#issuecomment-2650056894,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"This feature is not yet supported. If we start supporting it, it will be available in VS Code and Codespaces.",,,,,,Anecdotal,comment,,,,,,,,2025-02-14,github/isidorn,https://github.com/microsoft/vscode/issues/240283#issuecomment-2658415486,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
Understood. I had Claude.ai suggest multiple options. So I misguidedly thought it may be possible. May bad. Please let me state that it would be helpful for the reasons stated above. If it's routine to click away stuff it's not helping.,,,,,,Anecdotal,comment,,,,,,,,2025-02-14,github/mseibert,https://github.com/microsoft/vscode/issues/240283#issuecomment-2658490052,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"While users may not install hundreds of regular extensions every day, *themes* are a different topic. Some don’t have previews, a lot of them look horrendous. The only viable approach is to pick one → install → see with your own eyes → uninstall → move on. This process has gotten exponentially more irritating with this prompt. And the other commenters are absolutely right, what else would I do but click Trust? My blind trust in extension developers has looked the exact same, without or with thi…",,,,,,Anecdotal,comment,,,,,,,,2025-02-16,github/augustsaintfreytag,https://github.com/microsoft/vscode/issues/240283#issuecomment-2661421158,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"> While users may not install hundreds of regular extensions every day, themes are a different topic. Some don’t have previews, a lot of them look horrendous. The only viable approach is to pick one → install → see with your own eyes → uninstall → move on. This process has gotten exponentially more irritating with this prompt. Have you tried the F1 > color theme > + Browse Additional Color Themes That way you will be able to quickly preview themes. > And the other commenters are absolutely righ…",,,,,,Anecdotal,comment,,,,,,,,2025-02-16,github/isidorn,https://github.com/microsoft/vscode/issues/240283#issuecomment-2661510868,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
I'm against this feature having no way to **opt-out**; User should always have full control of their tool not vise-versa.,,,,,,Anecdotal,comment,,,,,,,,2025-02-20,github/scarf005,https://github.com/microsoft/vscode/issues/240283#issuecomment-2671882091,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"Totally understand what this dialog is intending to do but users need a way to opt out of this. Clicking `Install` is already an intentional decision and the responsibility should fall on the user. I'm already constantly clicking ""Trust"" without verifying and is losing its meaning. Someone will eventually create a list of all extension authors to add to the trust list. Please provide a way to opt out or provide an alternate way, we already have deal with [Workspace Trust](https://code.visualstu…",,,,,,Anecdotal,comment,,,,,,,,2025-02-26,github/miguelsolorio,https://github.com/microsoft/vscode/issues/240283#issuecomment-2683650130,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"I wanted to highlight again, that in case of a pre-configured docker image or a Github Codespace someone else made this decision already. It is not the role of the user in this case to validate the trust in a plugin.",,,,,,Anecdotal,comment,,,,,,,,2025-02-26,github/mseibert,https://github.com/microsoft/vscode/issues/240283#issuecomment-2684385771,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"I tried to use the [Sync Settings](https://marketplace.visualstudio.com/items?itemName=zokugun.sync-settings) extension to lift my config and extensions from stable VSCode into insiders (`1.98.0-insider`) and was faced with a wall of 100 modal dialogs. (because I have 100 extensions) I don't know if the native settings sync functionality also has this constraint, I am intentionally not using it because I have a heterogenenous, conflicting mixture of settings, machines, and accounts. Flattening …",,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/vivlimmsft,https://github.com/microsoft/vscode/issues/240283#issuecomment-2689486418,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"> I tried to use the [Sync Settings](https://marketplace.visualstudio.com/items?itemName=zokugun.sync-settings) extension to lift my config and extensions from stable VSCode into insiders (1.98.0-insider) and was faced with a wall of 100 modal dialogs. (because I have 100 extensions) This is a bug that we will fix. Please follow https://github.com/microsoft/vscode/issues/241769 for updates. Thank you for sharing feedback. > I'm already constantly clicking ""Trust"" without verifying and is losing…",,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/isidorn,https://github.com/microsoft/vscode/issues/240283#issuecomment-2690093226,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"> > And the other commenters are absolutely right, what else would I do but click Trust? > > Go to extensions view, search for rust. Click on the Rust extension pack (2nd result). > Sorry @isidorn, I’ve already tried to like Rust but I think it’s just a coincidentally community-accepted hypercomplex version of all the features Swift already does way more comprehensively. Your first hint on using the preview feature is a good one, though. But now I’m wondering why I’m allowed to preview extensio…",,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/augustsaintfreytag,https://github.com/microsoft/vscode/issues/240283#issuecomment-2690499664,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"> Hey there @miguelsolorio How many extensions do you actually install every month? Just curious. And don't you use cider-v at google? 👋 I install a few extensions a month, sometimes if I'm looking for a specific one you have to install a few before finding the right one. This is where clicking trust multiple times gets annoying and will force users to ignore the message. The [Nielsen Norman Group](https://www.nngroup.com/articles/confirmation-dialog/) says this about confirm dialogs: > When us…",,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/miguelsolorio,https://github.com/microsoft/vscode/issues/240283#issuecomment-2690856535,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
Agreed. But my point is that extension installation should not be a routine action. And is not for all users.,,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/isidorn,https://github.com/microsoft/vscode/issues/240283#issuecomment-2690980808,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"> Agreed. But my point is that extension installation should not be a routine action. And is not for all users. VS Code without additional extensions is almost as useful for a software developer as microsoft word, or the plain old windows notepad. The built-in extensions only cover generic things, but if you want to work with any programming language, you need to install an extension that gives you intellisense for that language. Trying out new extensions is a routine thing, and because of this…",,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/danieltodor,https://github.com/microsoft/vscode/issues/240283#issuecomment-2691031326,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
> Agreed. But my point is that extension installation should not be a routine action. And is not for all users. I don't think you're really listening to your users complaining here. It's happening often enough that it is impeding workflows.,,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/miguelsolorio,https://github.com/microsoft/vscode/issues/240283#issuecomment-2691049692,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"There is a option in settings.json for auto-trust workspaces. Just do the same for extensions. UPD: I switched to neovim a long time ago and my life has become easier, faster and more compact. Don't be afraid to escape from captivity. My neovim is the most powerful ide right now. VSC developers, wake up!",,,,,,Anecdotal,comment,,,,,,,,2025-03-21,github/nickshiro,https://github.com/microsoft/vscode/issues/240283#issuecomment-2743354206,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"The workaround I came up with is to create a `.vscode/extensions.json` in an empty folder with the list of extensions I want to install: ``` { ""recommendations"": [ ""some.extension"", ""another.extension"" ] } ``` then open that folder as a workspace, which let me bulk trust & install them as workspace recommendations. It's a pretty clunky workaround, but better than clicking through literally 100 modal dialogs.",,,,,,Anecdotal,comment,,,,,,,,2025-03-22,github/vivlimmsft,https://github.com/microsoft/vscode/issues/240283#issuecomment-2744878979,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"For my use-case, we have an installation script that installs VSCode, assorted extensions, and additional supporting software to onboard new developers. These are not ""developers"" in a traditional sense. These are people that aren't familiar with VSCode. We are attempting to provide a ready-to-use environment, and not being able to trust publishers via CLI is preventing things from installing as expected.",,,,,,Anecdotal,comment,,,,,,,,2025-04-03,github/CLau72,https://github.com/microsoft/vscode/issues/240283#issuecomment-2776764657,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
Yeah my team was really confused by these scary new prompts for no reason. Please get rid of them if the users have already clicked 'install' or already have had them installed before. Or provide a way to easily disable. :/,,,,,,Anecdotal,comment,,,,,,,,2025-04-04,github/Hnasar,https://github.com/microsoft/vscode/issues/240283#issuecomment-2778990050,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"> [#241769](https://github.com/microsoft/vscode/issues/241769) https://github.com/microsoft/vscode/issues/241769 was closed as not planned. Was that the final decision? I installed a fresh vscode today, and after using `zokugun.sync-settings` to synchronize my settings, I had to deal with about 60+ modal popups to install all my plugins.",,,,,,Anecdotal,comment,,,,,,,,2025-04-19,github/BlurryLight,https://github.com/microsoft/vscode/issues/240283#issuecomment-2816544228,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"If I don't trust it, I wouldn't even click install It's a bad idea that there's no setting to turn off this prompt💩💩💩💩💩💩💩💩💩💩💩💩",,,,,,Anecdotal,comment,,,,,,,,2025-05-04,github/d1y,https://github.com/microsoft/vscode/issues/240283#issuecomment-2849062783,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"I started experiencing this after updating VS Code, which I rarely do because of changes like this. As others have stated, there is no benefit or reason for this ""feature"", which it is, as a ""setting"" is configurable, and this is not that. A simple option to disable this would go a long way. How can this be reconciled with other settings such as `powershell.developer.setExecutionPolicy` which is set to `Bypass` by default **specifically to prevent manually trusting scripts before launch**? <img…",,,,,,Anecdotal,comment,,,,,,,,2025-07-10,github/Decimation,https://github.com/microsoft/vscode/issues/240283#issuecomment-3058619105,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"I was reading the Workspace Trust article and when using the tag `@workspaceunsupported` there is a list disabled in _restricted mode_ and _restricted mode_. All these extensions which are disabled in restricted mode, not one knows what exactly they could do to one system or change in their installation of vscode ? How can authors get these extensions to become trusted so we know the extensions we are using are valid. As there is alot of suspicious activity occurring on the internet. There is a…",,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/SheepDomination,https://github.com/microsoft/vscode/issues/240283#issuecomment-3172915273,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"It's just like the good 'ol Windows UAC prompt. When I used to work for a big enterprise's IT department where employee PCs were company-controlled via an Active Directory domain, I can't tell you how many *weekly* requests we would get for ""Please get rid of the UAC prompt"", citing all the same reasons as this issue thread. The person in charge of saying 'yea' or 'nay' to such requests eventually got so fed up with the endless stream of emails from me and my colleagues, that they just gave up …",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/kenny1983,https://github.com/microsoft/vscode/issues/240283#issuecomment-3200515788,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
"> It's just like the good 'ol Windows UAC prompt. When I used to work for a big enterprise's IT department where employee PCs were company-controlled via an Active Directory domain, I can't tell you how many _weekly_ requests we would get for ""Please get rid of the UAC prompt"", citing all the same reasons as this issue thread. > > The person in charge of saying 'yea' or 'nay' to such requests eventually got so fed up with the endless stream of emails from me and my colleagues, that they just ga…",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/SheepDomination,https://github.com/microsoft/vscode/issues/240283#issuecomment-3200655766,"repo: microsoft/vscode | issue: Provide a way to disable the extension trust prompt (Do you trust the publisher ""XYZ""?) | keyword: workaround"
White flash when opening a new window maximized or fullscreen <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://co…,,,,,,Anecdotal,issue,,,,,,,,2021-09-04,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339,repo: microsoft/vscode | keyword: workaround | state: open
![78008708-56a84600-7383-11ea-8c60-90d608a89e56](https://user-images.githubusercontent.com/22121365/132599092-ccb0992d-c9f4-4e76-bd32-9fbeeeedf10e.gif),,,,,,Anecdotal,comment,,,,,,,,2021-09-08,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-915642516,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"I don't normally use WSL to launch. That is just a gif I found on a previous issue that was similar, but that issue had a different cause and fix. The white flash looks the exact same to me. It occurs when I launch from the Windows GUI, from CMD, or from WSL. I only have a dedicated graphics card and no integrated graphics on my Ryzen CPU, so I wouldn't expect anything different to happen. I have tried `code --disable-gpu` in CMD and WSL and I still have the white flash.",,,,,,Anecdotal,comment,,,,,,,,2021-09-09,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-915732373,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
Can you provide a screen capture from your device showing the exact steps of launch ? Also attach the output of `code --verbose`,,,,,,Anecdotal,comment,,,,,,,,2021-09-09,github/deepak1556,https://github.com/microsoft/vscode/issues/132339#issuecomment-915733742,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Like I said, it happens when launching from the terminal or from the GUI. It looks exactly like the GIF, and the flash of white is the exact same. I could record 7 different gifs, one from the launching in taskbar, one from the start menu, one from a desktop icon, a new window from VSCode, from CMD, Powershell, and WSL. It all results in the same thing. The important step is that it first opens maximized or fullscreen on the Windows operating system. [main 2021-09-09T03:32:20.601Z] Sending some…",,,,,,Anecdotal,comment,,,,,,,,2021-09-09,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-915734856,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"> I could record 7 different gifs, one from the launching in taskbar, one from the start menu, one from a desktop icon, a new window from VSCode, from CMD, Powershell, and WSL. Yes it is fine, please attach a recording of what you are observing. As for the `code --verbose` output, looks like you are already having a running instance. Please close all running instances and run that command.",,,,,,Anecdotal,comment,,,,,,,,2021-09-09,github/deepak1556,https://github.com/microsoft/vscode/issues/132339#issuecomment-915737204,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Here's the log file for opening the first instance, although it's a bit cluttered because of extensions and workspaces. I have already reproduced the error without extensions on a new install of VSCode Insiders, so extensions, themes, and workspaces are irrelevant. [output.txt](https://github.com/microsoft/vscode/files/7133272/output.txt)",,,,,,Anecdotal,comment,,,,,,,,2021-09-09,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-915741508,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Were you able to reproduce the issue? I couldn't get the screencast website you shared to work. Anyway, this makes no difference.",,,,,,Anecdotal,comment,,,,,,,,2021-09-13,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-918661256,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
I can reproduce this ``` Version: 1.63.0-insider (user setup) Commit: d18d093403b12a65350c58a7b0d5771cc1f42aba Date: 2021-11-26T08:21:30.810Z Electron: 13.5.2 Chromium: 91.0.4472.164 Node.js: 14.16.0 V8: 9.1.269.39-electron.0 OS: Windows_NT x64 10.0.19043 ``` [log.txt](https://github.com/microsoft/vscode/files/7616749/log.txt) https://user-images.githubusercontent.com/1330321/143835118-5232eecc-d285-446c-a2e1-3563f63e71fc.mp4,,,,,,Anecdotal,comment,,,,,,,,2021-11-29,github/yume-chan,https://github.com/microsoft/vscode/issues/132339#issuecomment-981404672,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
I've started getting this recently. Like 3-4 builds ago along with another more annoying issue - when VS code touches the bottom of the screen (even not maximized) it prevents the taskbar from showing up when I move the mouse to the bottom.,,,,,,Anecdotal,comment,,,,,,,,2022-02-18,github/lllopo,https://github.com/microsoft/vscode/issues/132339#issuecomment-1044130174,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Upstream issue: https://github.com/electron/electron/issues/35362 Chromium gets the message handler to show a window before the content window. The window that the message handler shows has a white background. I notice that if I edit Chromium's OnPaint handler, I can get it to paint a black background by moving [a line that calls `FillRect`](https://source.chromium.org/chromium/chromium/src/+/main:ui/views/win/hwnd_message_handler.cc;l=2538) out of the if statement so that it always runs. This …",,,,,,Anecdotal,comment,,,,,,,,2022-09-13,github/rzhao271,https://github.com/microsoft/vscode/issues/132339#issuecomment-1246051350,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
The video submitted by RobbyCBennett replicates exactly what I'm seeing on a fresh install of Ubuntu 22.04 with a clean install of code. CPUs | Intel(R) Core(TM) i5-1035G4 CPU @ 1.10GHz (8 x 1500) -- | -- GPU Status | 2d_canvas: enabled canvas_oop_rasterization: disabled_off direct_rendering_display_compositor: disabled_off_ok gpu_compositing: enabled multiple_raster_threads: enabled_on opengl: enabled_on rasterization: enabled raw_draw: disabled_off_ok skia_renderer: enabled_on video_decode: d…,,,,,,Anecdotal,comment,,,,,,,,2022-10-16,github/ghost,https://github.com/microsoft/vscode/issues/132339#issuecomment-1280057688,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"I have noticed that the issue is not currently present on Windows 11, but it is still present on Windows 10. I have made sure that VS Code is updated on both machines.",,,,,,Anecdotal,comment,,,,,,,,2023-03-01,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-1450340731,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Yes, definitely still present on Win 10 / latest insiders. Ms Edge and Chrome suffer from the same issue, btw.",,,,,,Anecdotal,comment,,,,,,,,2023-03-01,github/lllopo,https://github.com/microsoft/vscode/issues/132339#issuecomment-1450368640,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"On Windows 11, I'm seeing the issue again for the latest release. Version: 1.77.0 (system setup) Commit: 7f329fe6c66b0f86ae1574c2911b681ad5a45d63 Date: 2023-03-29T10:02:16.981Z Electron: 19.1.11 Chromium: 102.0.5005.196 Node.js: 16.14.2 V8: 10.2.154.26-electron.0 OS: Windows_NT x64 10.0.22621 Sandboxed: No",,,,,,Anecdotal,comment,,,,,,,,2023-04-04,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-1496344500,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"I also see this issue using Ubuntu 22.04.3 LTS, and VS Code 1.83.0 It happens when I run `code --disable-gpu --disable-extensions` As further information, it displays this white flash whenever I switch to the desktop workspace on which VS Code is running. Happy to provide further information, if someone tells me what is needed and how to provide it. If anyone knows a temporary work around for this, of any sort, that would be much appreciated, because having it flash every time one switches to t…",,,,,,Anecdotal,comment,,,,,,,,2023-10-06,github/simon-20,https://github.com/microsoft/vscode/issues/132339#issuecomment-1750148584,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"I've just tried this on a Windows 10 system that has an integrated GPU and a dedicated GPU and this time I noticed a difference between the two. Here are my results. * Dedicated GPU (`code --disable-extensions`): the white flash is longer. * Integrated GPU (`code --disable-gpu --disable-extensions`): the white flash is shorter. The 2nd time out of 3 times I ran this command, I didn't even notice a white flash. https://github.com/microsoft/vscode/assets/22121365/2b0c2ac4-e00c-4aa5-a8a1-b471b4e2f…",,,,,,Anecdotal,comment,,,,,,,,2023-10-06,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-1750610336,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Based on https://github.com/microsoft/vscode/issues/132339#issuecomment-1246051350 and given we don't have a clear path to upstream the changes to chromium, closing as not actionable.",,,,,,Anecdotal,comment,,,,,,,,2023-12-12,github/deepak1556,https://github.com/microsoft/vscode/issues/132339#issuecomment-1851373018,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"I am also experiencing this on Windows 11. Pretty minimal install I had the thought to force it to not open maximized and see if it fixed it, because when the window was not maximized there was no flash at all. `workbench.panel.opensMaximized: always -> never` However Windows 11 seems to completely disregard this and open maximized anyway, so, bright white flash",,,,,,Anecdotal,comment,,,,,,,,2025-03-10,github/insipidlight,https://github.com/microsoft/vscode/issues/132339#issuecomment-2710127321,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"I found a fix or say workaround for this white flash issue when opening maximized VS Code, had to experiment with various values. I found that VS Code makes a delay on purpose when vscode is maximized or in fullscreen mode. This is to wait until vscode window is fully loaded and then show it. While waiting, it makes default white flash which is an electron default mechanism. White Flash Fix: 1. Open C:\Users\<UserName>\AppData\Local\Programs\Microsoft VS Code\resources\app\out\main.js 2. Search…",,,,,,Anecdotal,comment,,,,,,,,2025-03-31,github/adityaonx,https://github.com/microsoft/vscode/issues/132339#issuecomment-2766534068,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
Thanks. That workaround works for me. Here's the location in source. https://github.com/microsoft/vscode/blob/966a672107ce33bcc65a413f984254bab492a70e/src/vs/platform/windows/electron-main/windows.ts#L140,,,,,,Anecdotal,comment,,,,,,,,2025-04-01,github/RobbyCBennett,https://github.com/microsoft/vscode/issues/132339#issuecomment-2767720354,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
@deepak1556 any idea why `show: false` gives us white background flicker while `show: true` does not?,,,,,,Anecdotal,comment,,,,,,,,2025-04-01,github/bpasero,https://github.com/microsoft/vscode/issues/132339#issuecomment-2769624246,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"We know from previous investigation that the white background is from the window drawn by the message handler https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/win/window_impl.cc;l=218-220 , this window is not hidden in both show: false and show: true cases. It could only be that when drawing content window together with this message handling window it gets put behind the content window and we don't see the flash. We can attempt to hide the message handling window initially and se…",,,,,,Anecdotal,comment,,,,,,,,2025-04-02,github/deepak1556,https://github.com/microsoft/vscode/issues/132339#issuecomment-2771449211,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"@deepak1556 so this is a different window than the one VS Code gets to be rendered in and with `show: false` it becomes initially briefly visible, while with `show: true` our window wins?",,,,,,Anecdotal,comment,,,,,,,,2025-04-02,github/bpasero,https://github.com/microsoft/vscode/issues/132339#issuecomment-2771453035,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"<!-- AUTHOR_VERIFICATION_REQUEST --> This bug has been fixed in the latest release of [VS Code Insiders](https://code.visualstudio.com/insiders/)! @RobbyCBennett, you can help us out by commenting `/verified` if things are now working as expected. If things still don't seem right, please ensure you're on version 496ebc4723371f29c9ffa0319dcccb2d7bee7ee0 of Insiders (today's or later - you can use `Help: About` in the command palette to check), and leave a comment letting us know what isn't worki…",,,,,,Anecdotal,comment,,,,,,,,2025-05-21,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/132339#issuecomment-2896825088,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
I still get the white flash on https://github.com/microsoft/vscode/commit/496ebc4723371f29c9ffa0319dcccb2d7bee7ee0 using Windows 10 22H2 19045.5854 (Have not checked any other OS).,,,,,,Anecdotal,comment,,,,,,,,2025-05-21,github/Frulfump,https://github.com/microsoft/vscode/issues/132339#issuecomment-2897517843,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Can you try to run `code-insiders --disable-extensions --user-data-dir <directory>` where `<directory>` is an empty folder? This will ensure Code is starting with a fresh data directory, e.g. no specific settings and without any extensions running.",,,,,,Anecdotal,comment,,,,,,,,2025-05-21,github/bpasero,https://github.com/microsoft/vscode/issues/132339#issuecomment-2897906464,repo: microsoft/vscode | issue: White flash when opening a new window maximized or fullscreen | keyword: workaround
"Extension host keeps terminating when using copilot with codebase search in large repo - Copilot Chat Extension Version: 0.30.1 - VS Code Version: 1.103.0 - OS Version: Windows 11 24H2 Steps to Reproduce: 1. For large repos (>100 GB), opening up VSCode from root diretcory, search a question with `#codebase` tag in copilot chat, the extension host keeps restarting and clear out my questions. I've also seen the notification about Extension host unexpectedly terminated: <img width=""1416"" height=""6…",,,,,,Anecdotal,issue,,,,,,,,2025-08-13,github/YingyHuang,https://github.com/microsoft/vscode/issues/261532,repo: microsoft/vscode | keyword: workaround | state: open
"Thanks for creating this issue! It looks like you may be using an old version of VS Code, the latest stable release is 1.103.1. Please try upgrading to the latest version and checking whether this issue remains. Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/261532#issuecomment-3185854113,repo: microsoft/vscode | issue: Extension host keeps terminating when using copilot with codebase search in large repo | keyword: workaround
"What's the remote status of the index in this case? You can check in the copilot status bar item: <img width=""445"" height=""348"" alt=""Image"" src=""https://github.com/user-attachments/assets/3098e510-d3ce-4710-9b8d-b907560a20f3"" />",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/mjbvz,https://github.com/microsoft/vscode/issues/261532#issuecomment-3186067893,repo: microsoft/vscode | issue: Extension host keeps terminating when using copilot with codebase search in large repo | keyword: workaround
"It is remotely indexed: <img width=""413"" height=""381"" alt=""Image"" src=""https://github.com/user-attachments/assets/e30518f4-ed81-44d7-bc3e-4795f71f5b39"" />",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/YingyHuang,https://github.com/microsoft/vscode/issues/261532#issuecomment-3186076052,repo: microsoft/vscode | issue: Extension host keeps terminating when using copilot with codebase search in large repo | keyword: workaround
"The last few GC indicates old space has reached the 4GB heap limit and gc is unable to reclaim memory, can you share a heap allocation timeline following the steps in https://github.com/microsoft/vscode/issues/255239#issuecomment-3187112325",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/deepak1556,https://github.com/microsoft/vscode/issues/261532#issuecomment-3187808243,repo: microsoft/vscode | issue: Extension host keeps terminating when using copilot with codebase search in large repo | keyword: workaround
Based on the cpu profile during the memory peak most of the time seems to be spent in local workspace indexing. This block in [tryGetDiffedIndexedFiles](https://github.com/microsoft/vscode-copilot-chat/blob/dc2b611edc1f71e1e434cf2c86bea406b8ac2e1c/src/platform/workspaceChunkSearch/node/codeSearchWorkspaceDiff.ts#L165-L170) keeps repeating along with git repo fetching from [isIgnored](https://github.com/microsoft/vscode-copilot-chat/blob/dc2b611edc1f71e1e434cf2c86bea406b8ac2e1c/src/platform/igno…,,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/deepak1556,https://github.com/microsoft/vscode/issues/261532#issuecomment-3192227809,repo: microsoft/vscode | issue: Extension host keeps terminating when using copilot with codebase search in large repo | keyword: workaround
"Thanks for sharing the insights @deepak1556! Do we happen to know what are the files that gvfs created? My team is also working on the gvfs client, happy to set up a thread with you and my team to see how we can help there if you see any issue with gvfs client. Thanks!",,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/YingyHuang,https://github.com/microsoft/vscode/issues/261532#issuecomment-3197803986,repo: microsoft/vscode | issue: Extension host keeps terminating when using copilot with codebase search in large repo | keyword: workaround
"Meta: Sorry, your request failed. Please try again. This meta issue tracks scenarios where chat requests fail, with a variety of potential causes from the user's machine to a service disruption (especially for _preview_ models). Error message: > Sorry, your request failed. Please try again. … Here are some potential workarounds you can try: - Retry the request (🔄). - Retry the request with a different model. - Start a new chat (➕). - Check your Copilot Chat output logs for details (`CTRL + SHIF…",,,,,,Anecdotal,issue,,,,,,,,2025-01-24,github/digitarald,https://github.com/microsoft/vscode/issues/253136,repo: microsoft/vscode | keyword: workaround | state: open
"I get the following error every time I try to use Copilot Chat: ![Image](https://github.com/user-attachments/assets/1e7a8e97-d1f7-43c4-96bf-7facf15e00da) I'm using GitHub Copilot Business. Some of my coworkers are experiencing the same issue while others have not problems using GitHub Copilot Chat. The autocomplete functionality is working as expected, and I saw no errors in the GitHub Copilot output. The output logs for the GitHub Copilot Chat extension are: ``` 2025-02-06 11:29:46.578 [info] …",,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/apelegrinacertinia,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240568,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
2025-03-04 16:46:25.058 [info] Using the Electron fetcher. 2025-03-04 16:46:25.058 [info] Initializing Git extension service. 2025-03-04 16:46:25.058 [info] Successfully activated the vscode.git extension. 2025-03-04 16:46:25.058 [info] Enablement state of the vscode.git extension: true. 2025-03-04 16:46:25.058 [info] Successfully registered Git commit message provider. 2025-03-04 16:46:25.064 [info] Logged in as gokhanmerden 2025-03-04 16:46:25.682 [info] Got Copilot token for gokhanmerden 202…,,,,,,Anecdotal,comment,,,,,,,,2025-03-04,github/gokhanmerden,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240573,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"AI: Claude 3.7 Sonnet (Preview) Error: Sorry, your request failed. Please try again. Request id: 9c08ad95-8376-472f-bdc2-1a4b457e74e9 Reason: It appears you're not connected to the internet, please check your network connection and try again. Logs: 2025-03-06 14:38:38.072 [info] Fetched model metadata in 495ms 80411f51-d443-4bf0-b219-da0504525c6c 2025-03-06 14:53:38.950 [info] Fetched model metadata in 487ms f7f8bae4-a4de-4d17-81e4-af31e91588a5 2025-03-06 14:54:42.628 [error] Error: net::ERR_NE…",,,,,,Anecdotal,comment,,,,,,,,2025-03-06,github/gokhanmerden,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240575,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"I am using claude 3.7 sonnet Sorry, your request failed. Please try again. Request id: 804f4833-6ede-4f0a-b091-890630b20ac7 Reason: It appears you're not connected to the internet, please check your network connection and try again. [024759d4-78a9-46aa-b341-43d99cb4566b] model deployment ID: [] 2025-03-18 13:50:20.811 [error] Error: net::ERR_NETWORK_CHANGED at SimpleURLLoaderWrapper.<anonymous> (node:electron/js2c/utility_init:2:10511) at SimpleURLLoaderWrapper.emit (node:events:518:28) at Simp…",,,,,,Anecdotal,comment,,,,,,,,2025-03-18,github/gokhanmerden,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240580,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
**Critical: GPT-4o Agent Mode Broken (400 Errors) - Blocks Default Model Rollout** @CopilotTeam We're seeing consistent `400 Bad Request` errors **exclusively with GPT-4o in agent mode** (Request ID: `42e5e132-c58a-4386-bce2-f00ee170f62b`). This is particularly concerning because: 1. **Claude works perfectly** with identical agent workflows 3. **Retries don't resolve** the issue (permanent failure) 4. **Non-agent GPT-4o requests succeed** - suggests agent-mode specific serialization bug This ne…,,,,,,Anecdotal,comment,,,,,,,,2025-04-12,github/sumant4ssm,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240592,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"Still seeing this: Sorry, your request failed. Please try again. Request id: 91669c8e-c4a8-402e-b5c9-3187062e4555 Reason: Error on conversation request. Check the log for more details. this is happening occasionally with GPT-4.1",,,,,,Anecdotal,comment,,,,,,,,2025-04-17,github/danielcor,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240607,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"Having this problem all day today, yesterday, I've restarted visual code a dozen or more times, restarted new chat, retried every model. A very small fraction of requests were successful yesterday, none are successful today. Here is the log from the lastmost session. The extension was also triggered for an auto-update during this session which caused the extension to restart/relogin, and it continues to fail for new chats and different models thereafter, edit: This is still a problem two weeks …",,,,,,Anecdotal,comment,,,,,,,,2025-04-17,github/jquast,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240613,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
Model: Gemini 2.5 Pro (preview) Mode: Agent VSCode: 1.99.3 Copilot: no extensions or MCP servers ``` 2025-04-27 23:10:19.764 [info] Request ID for failed request: e1fe8a54-b198-4d23-8009-11bc497013d9 2025-04-27 23:10:19.765 [error] Server error: 500 Internal Server Error 2025-04-27 23:11:09.188 [info] Request ID for failed request: 0b782417-16bc-4226-8834-4be806c50d79 2025-04-27 23:11:09.188 [error] Server error: 500 Internal Server Error 2025-04-27 23:11:38.190 [info] Request ID for failed req…,,,,,,Anecdotal,comment,,,,,,,,2025-04-28,github/shaunco,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240619,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"Same issue. doesn't seem to recover. I can not use copilot at all. 025-05-06 22:17:12.861 [info] Got Copilot token for KevinFaurholt 2025-05-06 22:17:13.023 [info] copilot token chat_enabled: true, sku: copilot_for_business_seat 2025-05-06 22:17:13.023 [info] GitHub.vscode-pull-request-github extension is not yet activated. 2025-05-06 22:17:13.033 [info] Registering default platform agent... 2025-05-06 22:17:13.308 [info] Fetched content exclusion rules in 275ms 2025-05-06 22:17:13.531 [info] F…",,,,,,Anecdotal,comment,,,,,,,,2025-05-06,github/KevinFaurholt,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240628,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
2025-05-08 20:28:34.872 [info] Using the Electron fetcher. 2025-05-08 20:28:34.872 [info] Initializing Git extension service. 2025-05-08 20:28:34.890 [info] Logged in as trilloc 2025-05-08 20:28:34.970 [info] Successfully activated the vscode.git extension. 2025-05-08 20:28:34.970 [info] Enablement state of the vscode.git extension: true. 2025-05-08 20:28:34.970 [info] Successfully registered Git commit message provider. 2025-05-08 20:28:36.105 [info] Got Copilot token for trilloc 2025-05-08 20…,,,,,,Anecdotal,comment,,,,,,,,2025-05-08,github/trilloc,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240632,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"I am getting that with **Gemini 2.5 pro preview**, which suddenly disappeared from my access today, and **Claude 3.7 sonnet**. The error from the logs is bad gateway: 2025-05-16 00:13:43.345 [error] Server error: 502 Bad Gateway ![Image](https://github.com/user-attachments/assets/8ea6dd09-a806-445c-99ff-993ae59552b8)",,,,,,Anecdotal,comment,,,,,,,,2025-05-15,github/0x0OZ,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240635,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
Getting 502 errors since the last 2 hours ``` 2025-05-15 18:34:12.913 [info] request done: requestId: [39a2e8d7-88ad-4804-9144-9ee7c374c713] model deployment ID: [] 2025-05-15 18:34:12.950 [warning] Tool vscode_editFile_internal failed validation: schema description may not be empty 2025-05-15 18:34:21.445 [info] message 0 returned. finish reason: [tool_calls] 2025-05-15 18:34:21.445 [info] request done: requestId: [d0063eb3-df4a-4848-822f-d3fa999259ea] model deployment ID: [] 2025-05-15 18:34:…,,,,,,Anecdotal,comment,,,,,,,,2025-05-15,github/fbridger,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240639,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"Same to me... Enterpise account, no limits reached by far. Cant use any model. Random errors last days, today its unusable.",,,,,,Anecdotal,comment,,,,,,,,2025-05-21,github/N3BB3Z4R,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240647,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"Getting this error consistently as well. The workaround to start a new chat (`^L`) temporarily resolves the issue in the meantime. <img width=""165"" alt=""Image"" src=""https://github.com/user-attachments/assets/61e04dc1-b121-4933-8678-6d907018ee70"" />",,,,,,Anecdotal,comment,,,,,,,,2025-05-22,github/derekblank,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240653,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"This issue has severely affected the usability of Copilot Chat, making it almost unusable. Please fix this problem as soon as possible.",,,,,,Anecdotal,comment,,,,,,,,2025-05-23,github/heycode-cpu,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240657,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"I'm currently experiencing this same problem, no idea what's the cause. Sorry, your request failed. Please try again. Request id: 634b055b-d926-4448-8aff-55b12aac4793 Reason: Please check your firewall rules and network connection then try again. Error Code: net::ERR_HTTP2_PROTOCOL_ERROR.",,,,,,Anecdotal,comment,,,,,,,,2025-05-23,github/rhaguirrem,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240661,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"This needs to be resolved ASAP. Copilot Chat is unusable now. It also says, that I am rate limited, but I am not and I have the Pro.",,,,,,Anecdotal,comment,,,,,,,,2025-05-23,github/advitxsingh,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240666,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
@digitarald This is also coming. ![Image](https://github.com/user-attachments/assets/84e8a68f-d87c-4717-9595-dabab8473217),,,,,,Anecdotal,comment,,,,,,,,2025-05-25,github/advitxsingh,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240678,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
> [@digitarald](https://github.com/digitarald) This is also coming. > > ![Image](https://github.com/user-attachments/assets/84e8a68f-d87c-4717-9595-dabab8473217) +1,,,,,,Anecdotal,comment,,,,,,,,2025-05-25,github/muratsnkl,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240691,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"<!-- Please search existing issues to avoid creating duplicates --> <!-- Please attach logs to help us diagnose your issue --> - Copilot Chat Extension Version: 0.27.2 - VS Code Version: 1.100.2 - OS Version: macOS 15.5 (24F74) - Feature (e.g. agent/edit/ask mode): agent - Selected model (e.g. GPT 4.1, Claude 3.7 Sonnet): Gemini 2.5 Pro (Preview) - Logs: ``` 2025-05-24 06:53:53.815 [warning] Tool vscode_editFile_internal failed validation: schema description may not be empty 2025-05-24 06:53:54…",,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/privetin,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240698,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"**_not sure why always getting these error in my mac m1 + vscode + github copilot. using very latest versions._** Sorry, your request failed. Please try again. Request id: 3749d213-eea0-411d-9d85-51bb4d3c8121 Reason: Please check your firewall rules and network connection then try again. Error Code: net::ERR_HTTP2_PROTOCOL_ERROR. -------------------- single line prompt also getting this error -------------------- Sorry, your request failed. Please try again. Request id: 47ed91f6-afef-493d-a282-…",,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/vijayaragavana,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240702,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"Sorry, your request failed. Please try again. Request id: 78951a55-f20e-4549-b19e-bad00e4c2bbd Reason: Please check your firewall rules and network connection then try again. Error Code: net::ERR_HTTP2_PROTOCOL_ERROR.",,,,,,Anecdotal,comment,,,,,,,,2025-06-02,github/MoududHassanBat,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240707,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"At first, it seems like the request starts and even gets some kind of response, but then this error pops up: Sorry, your request failed. Please try again. Request id: 'id' Reason: Please check your firewall rules and network connection then try again. Error Code: net::ERR_HTTP2_PROTOCOL_ERROR. This happens with any request from all models. I have the paid version, regardless of whether it is a preview AI model or not. Or I can sometimes get this message: Sorry, you have exhausted this model's r…",,,,,,Anecdotal,comment,,,,,,,,2025-06-02,github/chealbee,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240713,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
request done: requestId: [a93212c6-6429-4779-91f4-849854e5aba1] model deployment ID: [] 2025-06-02 10:20:19.089 [error] Error: net::ERR_HTTP2_PROTOCOL_ERROR at SimpleURLLoaderWrapper.<anonymous> (node:electron/js2c/utility_init:2:10511) at SimpleURLLoaderWrapper.emit (node:events:524:28) at SimpleURLLoaderWrapper.callbackTrampoline (node:internal/async_hooks:130:17): Error on conversation request 2025-06-02 10:20:23.175 [warning] Tool vscode_editFile_internal failed validation: schema descripti…,,,,,,Anecdotal,comment,,,,,,,,2025-06-02,github/dfrossouw,https://github.com/microsoft/vscode/issues/253136#issuecomment-3021240724,"repo: microsoft/vscode | issue: Meta: Sorry, your request failed. Please try again. | keyword: workaround"
"sometimes Type some alphabets,No chinese character appear Type: <b>Bug</b> after vscode updated last time,when i type in alphabets{a,i,o,e,u,v},most of time there is no IME matched,only a black underline appear.i ask my friends,many of them face the same bug. i can type in PinYin in other IDE smoothly,so i doubt its the problem of vscode and Microsoft PinYin and i try to open the Compatibility mode of Microsoft PinYin IME，but in vain. i type 'a' to test for 100times 92times as the picture below…",,,,,,Anecdotal,issue,,,,,,,,2025-08-10,github/gggccc666,https://github.com/microsoft/vscode/issues/260826,repo: microsoft/vscode | keyword: workaround | state: open
Toggling the `editor.editContext` setting might be a workaround. See: - https://code.visualstudio.com/updates/v1_101#_edit-context,,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/tamuratak,https://github.com/microsoft/vscode/issues/260826#issuecomment-3172935610,"repo: microsoft/vscode | issue: sometimes Type some alphabets,No chinese character appear | keyword: workaround"
Hi are you using the previous version of the Microsoft Chinese Pinyin IME? The previous version of the IME does not work together with the EditContext API. You either need to: - turn of the setting `editor.editContext` - upgrade to the new version of the Microsoft Chinese Pinyin IME,,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/aiday-mar,https://github.com/microsoft/vscode/issues/260826#issuecomment-3199928504,"repo: microsoft/vscode | issue: sometimes Type some alphabets,No chinese character appear | keyword: workaround"
"Allow to change the font size and font of the workbench At the moment, we can only change the font size / font of the editor. If we want to change the font size, we need to use a roundabout method of ""zooming in / out"". It would be nice if this could be adjusted through the preferences.",,,,,,Anecdotal,issue,,,,,,,,2015-11-24,github/hsdk123,https://github.com/microsoft/vscode/issues/519,repo: microsoft/vscode | keyword: workaround | state: open
"Further to this, it seems weird that if I want larger fonts _outside_ of the editor I have to zoom in each time I restart.",,,,,,Anecdotal,comment,,,,,,,,2015-12-03,github/skube,https://github.com/microsoft/vscode/issues/519#issuecomment-161640846,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"+1 v1.4.0 seemed to make the file explorer fonts larger/bolder, making it harder to traverse a large directory",,,,,,Anecdotal,comment,,,,,,,,2016-08-05,github/conceptualspace,https://github.com/microsoft/vscode/issues/519#issuecomment-237898346,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"In addition, I would like to increase the line spacing in the explorer. File names are way too close to each other and is fatiguing to look at.",,,,,,Anecdotal,comment,,,,,,,,2017-05-17,github/kentor,https://github.com/microsoft/vscode/issues/519#issuecomment-302142877,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"Ha, I was gonna suggest exposing line height so I could decrease it and pack more files into each screen.",,,,,,Anecdotal,comment,,,,,,,,2017-05-18,github/xster,https://github.com/microsoft/vscode/issues/519#issuecomment-302562147,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
just to add another reason: - changing the Explorer to a monospaced font is easier to read when scanning for files,,,,,,Anecdotal,comment,,,,,,,,2017-06-12,github/timc13,https://github.com/microsoft/vscode/issues/519#issuecomment-307932442,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"Sort of hacky solution for those who interested: increase main font size and set window zoom level to a negative value (`cmd + -` or `window.zoomLevel` setting). It's also possible to use fractional values like `""window.zoomLevel"": -0.75`.",,,,,,Anecdotal,comment,,,,,,,,2017-07-27,github/kompot,https://github.com/microsoft/vscode/issues/519#issuecomment-318359755,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"@kompot - your approach works perfectly! Here's my user settings file: { ""workbench.colorTheme"": ""One Dark Pro"", ""editor.fontSize"": 12, ""window.title"": ""${activeEditorMedium} www.BKD.io"", ""newFile.defaultBaseFileName"": ""newFile"", ""newFile.relativeTo"": ""file"", ""newFile.defaultFileExtension"": "".ts"", ""newFile.rootDirectory"": ""~"", ""newFile.showPathRelativeTo"": ""root"", ""newFile.expandBraces"": false, ""editor.tabSize"": 2, ""editor.formatOnSave"": true, ""prettier.semi"": false, ""window.zoomLevel"": 1, ""git…",,,,,,Anecdotal,comment,,,,,,,,2017-08-02,github/BeKnowDo,https://github.com/microsoft/vscode/issues/519#issuecomment-319733765,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"In particular, I feel there is too much space between 2 items on the list, so not enough items fit on the screen. I just compared to the file tree of Eclipse, and it get 48 items in the space where visual studio get 36.",,,,,,Anecdotal,comment,,,,,,,,2017-08-10,github/ArntWork,https://github.com/microsoft/vscode/issues/519#issuecomment-321502814,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"I feel that the sidebar in particular needs to be able to customised wrt: lineHeight, fileFontColor, dirFontColor, and activeLineColor. Comparing Sublime 3: ![image](https://user-images.githubusercontent.com/45290/30325950-14461af2-97c7-11e7-861f-dc4987f9c066.png) to VS Code: ![image](https://user-images.githubusercontent.com/45290/30325963-2217db84-97c7-11e7-9074-eee72dbde8e3.png) I get fatigued looking at the VS Code tree, and am often unable to find files easily without having to either look…",,,,,,Anecdotal,comment,,,,,,,,2017-09-12,github/mchampanis,https://github.com/microsoft/vscode/issues/519#issuecomment-328839013,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"When changing the font in the `editor.fontFamily`, this is not reflected in the rest of the UI, creating a discrepancy between the editor and the UI. Also, there are no `workbench.fontFamily` or `workbench.fontSize` settings to compensate for this problem.",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/guidobouman,https://github.com/microsoft/vscode/issues/519#issuecomment-329419709,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"For me, setting a small zoom <kbd>CMD/CTRL</kbd>+<kbd>-</kbd> a couple of times, and increasing the `edit.fontSize` and `terminal.intergrated.fontSize`, I'm good to go. It's not as hacky as I thought it would be. Everything is still relative, so using the <kbd>CMD/CTRL</kbd>+<kbd>+</kbd> changes the whole workspace, which is what I want.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/vviikk,https://github.com/microsoft/vscode/issues/519#issuecomment-338920083,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"...adding to the various reasons: If I set `""workbench.fontAliasing"": ""none"",` - given that I am using a non antialiased font in the editor, the explorer (left side of the pic) looks really bad :/ ![screen shot 2017-11-21 at 10 48 31](https://user-images.githubusercontent.com/368717/33062951-913954ac-cea9-11e7-8e75-3da4aa993ed2.png)",,,,,,Anecdotal,comment,,,,,,,,2017-11-21,github/edoardoc,https://github.com/microsoft/vscode/issues/519#issuecomment-345956995,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
I really like this feature in other code editors (Pycharm). Please include the same in your near roadmap.,,,,,,Anecdotal,comment,,,,,,,,2018-01-10,github/automationhacks,https://github.com/microsoft/vscode/issues/519#issuecomment-356566018,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
What I would really like to know is why all those downvotes for this feature? What's the downside of being able to change the workbench font?,,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/picosam,https://github.com/microsoft/vscode/issues/519#issuecomment-359190891,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"@picosam The downvotes are not for the idea itself, but for comments stating nothing but ""+1"" or only containing other ways of expressing agreement/support. These comments are sent as email notifications to everyone, while contributing nothing of significant enough value to warrant such a notification. Showing support for the idea is better expressed by upvoting the original comment or any comments further clarifying the issue.",,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/jbozanowski,https://github.com/microsoft/vscode/issues/519#issuecomment-359192287,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
Just wondering if there is an ETA on this feature? It would be very handy if we could configure this in the settings json. The current font size makes it very difficult to navigate files in a project. Thanks,,,,,,Anecdotal,comment,,,,,,,,2018-01-31,github/SunnyJohal,https://github.com/microsoft/vscode/issues/519#issuecomment-362109478,repo: microsoft/vscode | issue: Allow to change the font size and font of the workbench | keyword: workaround
"Open file descriptors are leaked in the integrated terminal We have seen several reports of CRIU failing to checkpoint processes that run in the vscode integrated terminal (https://github.com/checkpoint-restore/criu/issues/641, https://github.com/checkpoint-restore/criu/issues/2698). This happens because vscode leaks open file descriptors to processes running in the terminal, and when CRIU attempts to checkpoint these file descriptors it exists with an error. However, this not only a bug but al…",,,,,,Anecdotal,issue,,,,,,,,2025-07-28,github/rst0git,https://github.com/microsoft/vscode/issues/258187,repo: microsoft/vscode | keyword: workaround | state: open
"I’m seeing the same FD leak issue in VSCode Remote Server processes, not just in the integrated terminal. Here are my observations: ## Environment * VSCode Server version: `360a4e4fd251bfce169a4ddf857c7d25d1ad40da` * Node version: built-in Node bundled with VSCode Server * OS: Linux container / Ubuntu 22.04 * Remote Extension: `vscode-remote-release` ## Observed FD Leak * Node processes in the remote server keep consuming more file descriptors over time. * Most of the leaked FDs are **pipes (`p…",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/sanchuanhehe,https://github.com/microsoft/vscode/issues/258187#issuecomment-3199489107,repo: microsoft/vscode | issue: Open file descriptors are leaked in the integrated terminal | keyword: workaround
"Trying to download Oracle SQL Issue Type: <b>Feature Request</b> Trying to download Oracle SQL developer extension but I keep getting this error that says"" Can't install 'oracle.sql-developer' extension because it is not compatible with the current version of Visual Studio Code (version 1.68.1)."" and anytime I check for updates it says ""Cannot update while running on a read-only volume. The application is on a read-only volume. Please move the application and try again. If you're on macOS Sierr…",,,,,,Anecdotal,issue,,,,,,,,2025-08-19,github/skhan1874,https://github.com/microsoft/vscode/issues/262247,repo: microsoft/vscode | keyword: workaround | state: open
"Thanks for creating this issue! It looks like you may be using an old version of VS Code, the latest stable release is 1.103.1. Please try upgrading to the latest version and checking whether this issue remains. Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/262247#issuecomment-3199025268,repo: microsoft/vscode | issue: Trying to download Oracle SQL | keyword: workaround
"Your version is 3+ years old and might not have APIs available at that moment that are required for extension. Have you tried to reinstall the latest version instead of trying to update VS Code? Also, answers here may be of help for proper installation or workarounds for read-only state https://stackoverflow.com/questions/65422670/why-doesnt-vs-code-auto-update-on-macos",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/IllusionMH,https://github.com/microsoft/vscode/issues/262247#issuecomment-3199030537,repo: microsoft/vscode | issue: Trying to download Oracle SQL | keyword: workaround
All dark color themes are broken after 1.78 update <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualst…,,,,,,Anecdotal,issue,,,,,,,,2023-05-24,github/arturzybin,https://github.com/microsoft/vscode/issues/183353,repo: microsoft/vscode | keyword: workaround | state: open
"Can you test if the issue is present with our exploration builds based on a newer version of the runtime, https://az764295.vo.msecnd.net/exploration/2a026dbfa74a48e629f23f1d54fd7cd788a44ffb/VSCode-darwin-universal.zip",,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/deepak1556,https://github.com/microsoft/vscode/issues/183353#issuecomment-1562659269,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
@deepak1556 it does ![image](https://github.com/microsoft/vscode/assets/57211433/f8c7d144-0870-4dce-a8d8-94f70d6b56d2),,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/arturzybin,https://github.com/microsoft/vscode/issues/183353#issuecomment-1562672487,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
@deepak1556 that fixes the problem ![image](https://github.com/microsoft/vscode/assets/57211433/52c7a58d-1303-4d2a-b42f-49eb4ccb2478),,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/arturzybin,https://github.com/microsoft/vscode/issues/183353#issuecomment-1562704941,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
"Thanks for confirming, please use the following setting https://code.visualstudio.com/updates/v1_40#_disable-gpu-acceleration to disable hardwarre accleration until the issue is resolved. Can you provide the output of `system_profiler SPDisplaysDataType`",,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/deepak1556,https://github.com/microsoft/vscode/issues/183353#issuecomment-1562732676,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
@deepak1556 Graphics/Displays: Apple M1: Chipset Model: Apple M1 Type: GPU Bus: Built-In Total Number of Cores: 8 Vendor: Apple (0x106b) Metal Support: Metal 3 Displays: Mi Monitor: Resolution: 3440 x 1440 (UWQHD - Ultra-Wide Quad HD) UI Looks like: 3440 x 1440 @ 100.00Hz Main Display: Yes Mirror: Off Online: Yes Rotation: Supported,,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/arturzybin,https://github.com/microsoft/vscode/issues/183353#issuecomment-1562787864,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
"I wonder if the issue is related to display, I am unable to repro with the following display config ``` Apple M1: Chipset Model: Apple M1 Type: GPU Bus: Built-In Total Number of Cores: 8 Vendor: Apple (0x106b) Metal Support: Metal 3 Displays: Color LCD: Display Type: Built-In Retina LCD Resolution: 2560 x 1600 Retina Main Display: Yes Mirror: Off Online: Yes Automatically Adjust Brightness: Yes Connection Type: Internal ``` Are you able to repro with built-in display ? Also does your Mi Monitor…",,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/deepak1556,https://github.com/microsoft/vscode/issues/183353#issuecomment-1562801690,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
"Omg you are right, it works fine for built-in display! And even after I close macbook and switch to the external display, it works without any problems. Only after reloading the problem appears again. I use a custom color profile for the external monitor, but for any other color profiles the problem seems to persist",,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/arturzybin,https://github.com/microsoft/vscode/issues/183353#issuecomment-1562810480,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
Glad to see this is still opening. Here are some related issues. https://github.com/microsoft/vscode/issues/161028 https://github.com/microsoft/vscode/issues/152816#issuecomment-1183033252,,,,,,Anecdotal,comment,,,,,,,,2025-05-14,github/Caffeine19,https://github.com/microsoft/vscode/issues/183353#issuecomment-2878384081,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
"I got the same problem, too. It only happens when my monitors use the ICC file from DataColor Spyder X2 Elite. <img width=""481"" alt=""Image"" src=""https://github.com/user-attachments/assets/688333e5-9751-417e-875e-3e32f91b80e6"" /> <img width=""621"" alt=""Image"" src=""https://github.com/user-attachments/assets/c70e22a2-9286-4f20-8710-317468116a60"" />",,,,,,Anecdotal,comment,,,,,,,,2025-05-14,github/Caffeine19,https://github.com/microsoft/vscode/issues/183353#issuecomment-2878386894,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
"@arturzybin @deepak1556 I find out is this element rendering the wrong background color. <img width=""614"" height=""204"" alt=""Image"" src=""https://github.com/user-attachments/assets/f30d907d-c20d-4dfd-9b66-6c380e75da62"" /> <img width=""2405"" height=""2846"" alt=""Image"" src=""https://github.com/user-attachments/assets/075bb70d-6e62-4e62-b661-155d8a8f74df"" /> <img width=""443"" height=""106"" alt=""Image"" src=""https://github.com/user-attachments/assets/449c7324-26ea-4fd2-9dfa-a58650fa40ed"" /> So my workaroun…",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/Caffeine19,https://github.com/microsoft/vscode/issues/183353#issuecomment-3199028516,repo: microsoft/vscode | issue: All dark color themes are broken after 1.78 update | keyword: workaround
"Fix: clear duplicate-casing errors after case-only file renames on Windows (closes #261995) On case-insensitive file systems (Windows for example) renaming a file by only changing its letter-case ~ for example `page1.js` => `Page1.js` ~ confuses `tsserver`. It continues to hold both casings in the program and surfaces errors such as: <img width=""932"" height=""191"" alt=""image"" src=""https://github.com/user-attachments/assets/bb79ecbc-3934-44f0-a540-a2d4c425c308"" /> The error persists until the use…",,,,,,Anecdotal,issue,,,,,,,,2025-08-17,github/kzekiue,https://github.com/microsoft/vscode/pull/262032,repo: microsoft/vscode | keyword: workaround | state: open
"screen reader is announcing tree name Type: <b>Bug</b> when depth of tree is more than 8 screen reader nvda is reading the tree name instead of file name in file explorer same is happening in gitlense commit , stash and compare view. As i am a team lead facing lot of issue with it as our project has lot of depth. so please fix the tree accessibility issue in reading the nodes expected to read node name instead of tree name in vscode with screen reader at least in accessibility mode is turned on…",,,,,,Anecdotal,issue,,,,,,,,2025-08-12,github/balajip8811,https://github.com/microsoft/vscode/issues/261295,repo: microsoft/vscode | keyword: workaround | state: open
"@meganrogge Yes, it should announce file name but it is announcing tree name. also same for git lense tree like commit ,compare trees also.",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/balajip8811,https://github.com/microsoft/vscode/issues/261295#issuecomment-3182633405,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
I can not share the repo as it is private but recorded speech history output providers is in level 6 folder and it is expanded i just pressed down arrow repeted so that it go through the files in level 7 pasted the speech output below. it is telling tree name (file explorer tree view) for every second file instead of file name providers not selected expanded 5 of 6 level 6 Files Explorer tree view level 7 address.service.spec.ts not selected 2 of 7 Files Explorer tree view giftcard.service.spec…,,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/balajip8811,https://github.com/microsoft/vscode/issues/261295#issuecomment-3182973022,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
@meganrogge sorry i mistakenly closed and reopened the issue required info also pasted in the above comment. if u need any other info please mention.,,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/balajip8811,https://github.com/microsoft/vscode/issues/261295#issuecomment-3182999715,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
"If this is a confirmed regression, it would help to know which change caused it. We maintain a node.js based CLI tool [`vscode-bisect`](https://github.com/microsoft/vscode-bisect) that automatically downloads and runs previous VS Code insiders and asks for each build if the issue reproduces. It takes up to 8 steps to find exactly the build that caused the regression. **Steps:** * install [node.js](https://nodejs.org/en/download) (if not yet done) * `npx --yes @vscode/vscode-bisect@latest` * fol…",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/meganrogge,https://github.com/microsoft/vscode/issues/261295#issuecomment-3186362784,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
"It's been a long time, I think even years. My workaround so far has been to have another window open with Windows Explorer, and then open the file with the command palette. I thought it was just me, but we know that's not the case",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/brunoprietog,https://github.com/microsoft/vscode/issues/261295#issuecomment-3186539338,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
@meganrogge I am totally confused here it is totaly working in insider build Version: 1.102.0-insider Commit: bdc1dd9a7c36b7dab7a9eeec2f05a19f7abd0409 Date: 2025-06-20T09:31:30.580Z Electron: 35.5.1 ElectronBuildId: 11727614 Chromium: 134.0.6998.205 Node.js: 22.15.1 V8: 13.4.114.21-electron.0 OS: Windows_NT x64 10.0.22631 But not working in the below version . i disabled all extentions and restarted vscode also i can see all extentions in disabled in extentions section also Version: 1.103.0 (us…,,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/balajip8811,https://github.com/microsoft/vscode/issues/261295#issuecomment-3188422597,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
@meganrogge Could the reason be because of layout of panels editors and primary and secondary bars??,,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/balajip8811,https://github.com/microsoft/vscode/issues/261295#issuecomment-3188457665,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
@balajip8811 That insiders you posted is an old one. See the date > Date: 2025-06-20T09:31:30.580Z Can ou try the newest insiders. As this could indicate this broke sometime between Date: 2025-06-20T09:31:30.580Z and Date: 2025-08-06T21:40:10.271Z,,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/lramos15,https://github.com/microsoft/vscode/issues/261295#issuecomment-3188570595,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
it seems all builds are good i checked but failing even after disabling all extentions in noramal vscode [build] All builds are good! Try running with --releasedOnly to support older builds.,,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/balajip8811,https://github.com/microsoft/vscode/issues/261295#issuecomment-3188698977,repo: microsoft/vscode | issue: screen reader is announcing  tree name | keyword: workaround
"A Secure and Ergonomic API to Obtain Original File Paths from Webview Drag & Drop Events <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> ### Resumen Currently, it is not possible for a webview to obtain the original file system path of a file that is dropped onto it. This is a del…",,,,,,Anecdotal,issue,,,,,,,,2025-07-13,github/JairTorres1003,https://github.com/microsoft/vscode/issues/255608,repo: microsoft/vscode | keyword: workaround | state: open
Related: `webUtils.getPathForFile` API https://www.electronjs.org/docs/latest/api/web-utils#webutilsgetpathforfilefile I'd prefer handling it all inside of the webview if possible,,,,,,Anecdotal,comment,,,,,,,,2025-07-14,github/mjbvz,https://github.com/microsoft/vscode/issues/255608#issuecomment-3070186340,repo: microsoft/vscode | issue: A Secure and Ergonomic API to Obtain Original File Paths from Webview Drag & Drop Events | keyword: workaround
"Hi @mjbvz, Thanks for the clarification. I completely agree that handling this within the webview context is the ideal and much cleaner architectural approach. Following your suggestion, I investigated and confirmed that `webUtils.getPathForFile` is not currently exposed on the API object returned by `acquireVsCodeApi()`. Therefore, my feature request becomes exactly what you hinted at: **Would the VS Code team be open to exposing a secure, promise-based function to the webview API that provide…",,,,,,Anecdotal,comment,,,,,,,,2025-07-15,github/JairTorres1003,https://github.com/microsoft/vscode/issues/255608#issuecomment-3075050447,repo: microsoft/vscode | issue: A Secure and Ergonomic API to Obtain Original File Paths from Webview Drag & Drop Events | keyword: workaround
"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 --> This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/255608#issuecomment-3198419982,repo: microsoft/vscode | issue: A Secure and Ergonomic API to Obtain Original File Paths from Webview Drag & Drop Events | keyword: workaround
"Ability to set log levels by output channel <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> I been working on an extensions that utilizes the `OutputChannel` API for logging things into the output view for different log levels such as: `INFO`, `ERROR`, etc... Each of these loggers…",,,,,,Anecdotal,issue,,,,,,,,2024-07-24,github/rudyflores,https://github.com/microsoft/vscode/issues/223536,repo: microsoft/vscode | keyword: workaround | state: open
"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 --> This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-07-25,github/vscodenpa,https://github.com/microsoft/vscode/issues/223536#issuecomment-2249499155,repo: microsoft/vscode | issue: Ability to set log levels by output channel | keyword: workaround
"Adding some additional context here, I noticed the UI allows setting independent log levels through `Developer: Set Log Level...`, but is also the only way to achieve this. I would love for VS Code to add to it's API for `OutputChannel` to set this independent log level similar to how this UI allows it!",,,,,,Anecdotal,comment,,,,,,,,2024-08-19,github/rudyflores,https://github.com/microsoft/vscode/issues/223536#issuecomment-2297197960,repo: microsoft/vscode | issue: Ability to set log levels by output channel | keyword: workaround
"<!-- 9078ab2c-c9e0-7adb-d31b-1f23430222f4 --> :slightly_smiling_face: This feature request received a sufficient number of community upvotes and we moved it to our backlog. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-08-21,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/223536#issuecomment-2300326518,repo: microsoft/vscode | issue: Ability to set log levels by output channel | keyword: workaround
"I would love to see this as well for the following use case: in our VSCode extension we provide a command to start a ""Logging session"", i.e. start recording what they do with our extension. Once they've reproduced some behavior, users can then click in the status bar to close the session. The log file opens in their OS browser and then they can just drag and drop it into a GitHub issue. The problem is that we want to set the log level when starting the session. Right now, I do a ```js await vsc…",,,,,,Anecdotal,comment,,,,,,,,2024-10-30,github/Splines,https://github.com/microsoft/vscode/issues/223536#issuecomment-2447400706,repo: microsoft/vscode | issue: Ability to set log levels by output channel | keyword: workaround
"This is a great idea! I have a use case where I would like to create a log output channel with a different log level other than `INFO` (such as using a setting) and currently the workaround is to jump to the `Output` panel, display the output channel followed by changing the log using the command above with `await vscode.commands.executeCommand('workbench.action.setLogLevel'); `. It would be great if we could specify the default log level as a parameter in `createOutputChannel`.",,,,,,Anecdotal,comment,,,,,,,,2025-02-26,github/c3danielxu,https://github.com/microsoft/vscode/issues/223536#issuecomment-2686091982,repo: microsoft/vscode | issue: Ability to set log levels by output channel | keyword: workaround
"My workaround for now is to wrap the logger, and just log messages at `info` level but with `[debug]` prefixed (if the output channel is not set to `Debug`). In my actual implementation, I have other factors driving whether to force logging messages at `debug` level. Not pretty, but workaround rarely are 😉 ```typescript debugEnabled() { return Logger.channel.logLevel !== LogLevel.Off && Logger.channel.logLevel <= vscode.LogLevel.Debug; } debug(message: string, ...args: any[]) { if (this.debugEn…",,,,,,Anecdotal,comment,,,,,,,,2025-04-17,github/remerle,https://github.com/microsoft/vscode/issues/223536#issuecomment-2813851516,repo: microsoft/vscode | issue: Ability to set log levels by output channel | keyword: workaround
@sandy081 any updates on when this work will be started? Is there a way I could maybe even possibly work with you to contribute this myself?,,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/rudyflores,https://github.com/microsoft/vscode/issues/223536#issuecomment-3197625302,repo: microsoft/vscode | issue: Ability to set log levels by output channel | keyword: workaround
Add policy property to terminal auto approve setting Need one of these? https://github.com/microsoft/vscode/blob/9a44b0b7eac3cb36bbdcfceafd09ed918ba6604d/src/vs/workbench/contrib/chat/browser/chat.contribution.ts#L226-L232,,,,,,Anecdotal,issue,,,,,,,,2025-07-14,github/Tyriar,https://github.com/microsoft/vscode/issues/255789,repo: microsoft/vscode | keyword: workaround | state: open
"This is blocked until the policy being put in the right spot is actually picked up https://github.com/microsoft/vscode/pull/256491 The reason the workaround for https://github.com/microsoft/vscode/pull/256532 was needed is because the original `registerConfiguration` call for `terminal.integrated.*` pulls from various sources, which includes `terminalContrib/` which is the way we separate stand alone features from the rest of the core terminal. So the actual definition is not actually in the sa…",,,,,,Anecdotal,comment,,,,,,,,2025-07-17,github/Tyriar,https://github.com/microsoft/vscode/issues/255789#issuecomment-3085065314,repo: microsoft/vscode | issue: Add policy property to terminal auto approve setting | keyword: workaround
Update: We'll likely add a boolean setting to both unblock the above issue and maybe also give a way for the user to control the defaults.,,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/Tyriar,https://github.com/microsoft/vscode/issues/255789#issuecomment-3197514001,repo: microsoft/vscode | issue: Add policy property to terminal auto approve setting | keyword: workaround
"Meta: Authentication Issues This issue tracks all major authentication issues that are known. This is a grouping of ""I can't sign in to Copilot""-like issues. Please go through these and see if they apply to your issue. ## `FIXED` Stuck trying to sign in to GHE.com/Clicking on Sign in to GitHub _link_ (not button) doesn't work **Original Issue:** https://github.com/microsoft/vscode-copilot-release/issues/11078 ### How to identity In Chat, you are asked to ""Sign in to GHE"" instead of ""Sign in to …",,,,,,Anecdotal,issue,,,,,,,,2025-05-29,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/253132,repo: microsoft/vscode | keyword: workaround | state: closed
This insutrction is not clear: _Ensure the following VS Code setting is removed:_ Where do users find this VS Code setting? Please write CLEAR instructions. Thanks,,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/datadragon61,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192777,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
Installed INSIDERS and getting the exact same problem that the LOGIN button doesn't work. Now I see on top like a quick hourglass and then nothing happens. Tried both release version and pre-release.,,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/datadragon61,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192789,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
I also would like to note that you are referring to another problem.. All the posts that you closed referred to a problem that the SIGN IN TO USE COPILOT simply doesn't respond.,,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/datadragon61,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192797,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"@datadragon61 thanks for the feedback, I updated the issue to include documentation on VS Code Settings. **Can you link me the original issue you opened?** I'll reopen it and we can discuss there. In that issue, I'd like to see: 1. A screenshot of what you see 2. and follow these steps to provide more diagnostic information: * Open the Command Palette again (<kbd>cmd</kbd>/<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>p</kbd>) * Run the `Developer: GitHub Copilot Chat Diagnostics` command * Copy and pa…",,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192800,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"Since yesterday, I'm also unable to use CoPilot Pro at least in VSCode: The Output Terminal shows: ``` [info] [certificates] Removed 16 expired certificates [info] [auth] Invalid copilot token: missing token: 403 ``` And the error message is ``` Your Copilot access has been revoked by the providing organization or enterprise. You are currently logged in as ``` The Developer: GitHub Copilot Chat Diagnostics: ``` ## GitHub Copilot Chat - Extension Version: 0.27.2 (prod) - VS Code: vscode/1.100.2 …",,,,,,Anecdotal,comment,,,,,,,,2025-05-31,github/ryobg,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192806,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
@ryobg do you get Copilot from your organization? Did you reach out to them about this error? It seems like they removed you,,,,,,Anecdotal,comment,,,,,,,,2025-06-01,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192814,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"> [@ryobg](https://github.com/ryobg) do you get Copilot from your organization? Did you reach out to them about this error? It seems like they removed you No, while I'm member of few organizations (so they allow me access to their repos), I'm no part of any organization and I'm not an organization. I pay for my own Copilot Pro subscription (few weeks ago). Additional info, Visual Studio also reports a similar issue.",,,,,,Anecdotal,comment,,,,,,,,2025-06-01,github/ryobg,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192819,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
@ryobg you should reach out to GitHub support then. They can sort out what is wrong with your subscription,,,,,,Anecdotal,comment,,,,,,,,2025-06-01,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192823,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"@TylerLeonhardt `""github.copilot.advanced"": { ""authProvider"": ""github-enterprise"" }` Yeah, this works for me. Copilot stopped asking for login, which was ""stuck"". I hope VS code team fixes this.",,,,,,Anecdotal,comment,,,,,,,,2025-06-02,github/desiFish,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192831,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"I did find that setting in my config but removing it did not change anything. The ""sign in to GitHub.com"" button still does not work. In addition, the GitHub Pull Request extension does not work as well. All of this started in the last days. Before everything was working just fine. I already deinstalled and reinstalled extension, signed out and tried signing in again via VS code profile. The GitHub signing in VS code seemingly works but then the extensions don't. I'm lost at the moment. I just …",,,,,,Anecdotal,comment,,,,,,,,2025-06-08,github/Spenhouet,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192837,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"> > [@ryobg](https://github.com/ryobg) do you get Copilot from your organization? Did you reach out to them about this error? It seems like they removed you > > No, while I'm member of few organizations (so they allow me access to their repos), I'm no part of any organization and I'm not an organization. I pay for my own Copilot Pro subscription (few weeks ago). > > Additional info, Visual Studio also reports a similar issue. Got solved. After 8 days, I got just a comment saying that they had i…",,,,,,Anecdotal,comment,,,,,,,,2025-06-09,github/ryobg,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192840,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"Please open a new issue... or if your issue was closed and dupe'd to this one, comment on that one and I'll re-open.",,,,,,Anecdotal,comment,,,,,,,,2025-06-11,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/253132#issuecomment-3021192851,repo: microsoft/vscode | issue: Meta: Authentication Issues | keyword: workaround
"VS Code files moved to unexpected _ folder, breaking shortcut Type: <b>Bug</b> - VS Code Version: 1.101.1 (User Setup) - OS Version: Windows 11 Pro Today I found that my Visual Studio Code installation had been moved unexpectedly. The executable and program files were located inside a new subfolder named `_` inside the installation directory: `C:\Users\<username>\AppData\Local\Programs\Microsoft VS Code\_` As a result, the desktop shortcut disappeared. I had been using VS Code normally a couple…",,,,,,Anecdotal,issue,,,,,,,,2025-06-22,github/angelocbax,https://github.com/microsoft/vscode/issues/252063,repo: microsoft/vscode | keyword: workaround | state: closed
"Sorry for the breakage, we are exploring a new update flow that should address this scenario, you can follow https://github.com/microsoft/vscode/issues/249239 for updates. Please re-install as a workaround for now.",,,,,,Anecdotal,comment,,,,,,,,2025-07-02,github/deepak1556,https://github.com/microsoft/vscode/issues/252063#issuecomment-3028469683,"repo: microsoft/vscode | issue: VS Code files moved to unexpected _ folder, breaking shortcut | keyword: workaround"
"Just a heads up, this issue still persists. Version info is below: ``` Version: 1.102.2 (user setup) Commit: c306e94f98122556ca081f527b466015e1bc37b0 Date: 2025-07-22T12:15:48.520Z Electron: 35.6.0 ElectronBuildId: 11847422 Chromium: 134.0.6998.205 Node.js: 22.15.1 V8: 13.4.114.21-electron.0 OS: Windows_NT x64 10.0.19045 ```",,,,,,Anecdotal,comment,,,,,,,,2025-07-26,github/adipeterca,https://github.com/microsoft/vscode/issues/252063#issuecomment-3121752334,"repo: microsoft/vscode | issue: VS Code files moved to unexpected _ folder, breaking shortcut | keyword: workaround"
I experienced this issue for the first time today. Copying everything in the newly created `_` directory to its parent seems to have resolved the issue.,,,,,,Anecdotal,comment,,,,,,,,2025-08-04,github/cotz1995,https://github.com/microsoft/vscode/issues/252063#issuecomment-3151204576,"repo: microsoft/vscode | issue: VS Code files moved to unexpected _ folder, breaking shortcut | keyword: workaround"
"this has been happening for years, pretty sure its when it has an update and you restart your computer before it can finish. Whatever it is, its pretty poor.",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/maxpowernz,https://github.com/microsoft/vscode/issues/252063#issuecomment-3174732292,"repo: microsoft/vscode | issue: VS Code files moved to unexpected _ folder, breaking shortcut | keyword: workaround"
"Also experienced this for the first time a few days ago, and moving everything back out to the parent folder is not an easy fix because even administrator permission doesn't stop Windows from complaining about moving things in Program Files. So it looks like a bug that Microsoft should have fixed years ago has somehow regressed to affect much more people than it ever has before. Has the VS Code team been relying a little too much on OpenAI by any chance?",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/hashimaziz1,https://github.com/microsoft/vscode/issues/252063#issuecomment-3176846536,"repo: microsoft/vscode | issue: VS Code files moved to unexpected _ folder, breaking shortcut | keyword: workaround"
"math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format When I ask a question of Copilot Chat: write the below as math formula ``` # Negative log-likelihood for normal distribution nll = -np.sum(-0.5*np.log(2*np.pi*sigma**2) - (y-predicted_y)**2 / (2*sigma**2)) ``` This is the response I get in the vs code: ``` [ nll = -\sum_{i=1}^{n} \left[ -\frac{1}{2}\log(2\pi\sigma^2) - \frac{(y_i-\hat{y_i})^2}{2\sigma^2} \right] ] Where: ( n ) is the number of observat…",,,,,,Anecdotal,issue,,,,,,,,2024-02-29,github/ededovic,https://github.com/microsoft/vscode/issues/255243,repo: microsoft/vscode | keyword: workaround | state: closed
Is there any work around for the time being? I rely on copilot to quickly check my formulas for my chemistry class.,,,,,,Anecdotal,comment,,,,,,,,2024-07-13,github/howsmadae,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223518,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"> > Is there any work around for the time being? I rely on copilot to quickly check my formulas for my chemistry class. > > I just told it to render the formula again but replace ( [ ] ) with $ and it worked for me Please elaborate a bit, @fremdkoerper . I am having no luck with this at all in latest vscode 1.92.o and GitHub Copilot Chat v0.19.2024073102 (pre-release). This is the best I can get: ![image](https://github.com/user-attachments/assets/c9ce1291-41d1-4534-8e2f-f47db6498a43) Problem i…",,,,,,Anecdotal,comment,,,,,,,,2024-08-02,github/hschmiedhofer,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223530,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"I'm having the same issues with Latex rending in Github copilot, even in the latest release VS Code (1.92) and Github Copilot Chat (Release: 2024-08-02). Example below: Prompt_: What is the formula for Sample Standard Deviation?_ Response: _$$ s = \sqrt{\frac{\sum (x_i - \bar{x})^2}{n - 1}} $$ Where: $s$ is the sample standard deviation. $x_i$ represents each data point in the sample. $\bar{x}$ is the sample mean. $n$ is the number of data points in the sample._ Math notation really needs to di…",,,,,,Anecdotal,comment,,,,,,,,2024-08-03,github/LinoGoncalves,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223542,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
> > Is there any work around for the time being? I rely on copilot to quickly check my formulas for my chemistry class. > > I just told it to render the formula again but replace ( [ ] ) with $ and it worked for me I've just been pasting it into web based LaTeX renderers. Would be nice if it supported it natively. Clearly the model is trained to think the renderer will work.,,,,,,Anecdotal,comment,,,,,,,,2024-08-05,github/sthaber,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223605,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"The same. If it can render math formulas automatically like markdown preview, it will work better when paired with o1 model.",,,,,,Anecdotal,comment,,,,,,,,2024-10-30,github/yhgalaxy,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223628,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
The same issue. It is very cumbersome to copy to other tools for rendering. [ChatGPT-Next-Web](https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web) can directly render mathematical formulas enclosed in `[]`.,,,,,,Anecdotal,comment,,,,,,,,2024-10-31,github/wenzhaoabc,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223633,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"Bumping this up, hoping this gets addressed in a future release. I see that this is targeted for November 27 release milestone, but I would like to know if there is a way to track the status of a given issue? Should it be assumed that if this issue is a part of the milestone it is being actively worked on?",,,,,,Anecdotal,comment,,,,,,,,2024-11-06,github/VladKilliakov,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223643,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"I would also prefer a fix, but a workaround I have is to instruct Copilot not to use the latex syntax by asking in the chat. As a general solution, adding this sentence to a [`.github/copilot-instructions.md` custom instructions file](https://docs.github.com/en/copilot/customizing-copilot/adding-custom-instructions-for-github-copilot) is giving me OK results for now: ```md Use plain markdown with C syntax highlighting instead of latex for formulas. ```",,,,,,Anecdotal,comment,,,,,,,,2024-11-10,github/jturcotte,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223655,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
Another workaround is to tell copilot to write in markdown in a .md file and display the preview in real-time with Markdown preview vscode extension,,,,,,Anecdotal,comment,,,,,,,,2024-11-10,github/victxrrr,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223671,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
Same here. I need the math equation to be displayed. I can read latex but it's annoying / distracting.,,,,,,Anecdotal,comment,,,,,,,,2024-12-12,github/jasonrichdarmawan,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223692,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
Got the same issue when playing with qubits in Python. The Copilot chat answers this way: ``` Hadamard Gate on the 0th Qubit: This creates a superposition of (|0\rangle) and (|1\rangle) for the 0th qubit. [ H|0\rangle = \frac{1}{\sqrt{2}}(|0\rangle + |1\rangle) ] ```,,,,,,Anecdotal,comment,,,,,,,,2025-01-12,github/mirao,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223779,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
OMG plz fix this ![Image](https://github.com/user-attachments/assets/f1e9dfe3-87ef-436d-8852-f5d7aa40fdad),,,,,,Anecdotal,comment,,,,,,,,2025-03-02,github/Damika-Anupama,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223819,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"@Y1ZzLu I'd suggest injecting a [custom script](https://marketplace.visualstudio.com/items?itemName=be5invis.vscode-custom-css) with imported [`MathJax`](https://www.mathjax.org). Or reverse vscode chat extension, but requires some knowledge of JavaScript and might violate their terms of service since it's proprietary of vscode maintainers.",,,,,,Anecdotal,comment,,,,,,,,2025-04-20,github/hamad12a,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223942,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
I have version 1.99.3 on debian 12 and it seems to be working just fine now. ![Image](https://github.com/user-attachments/assets/bfbbc391-364a-4876-b6d0-f41688e670ea),,,,,,Anecdotal,comment,,,,,,,,2025-04-21,github/Arash-Kiyanmehr,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059223978,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"> I have version 1.99.3 on debian 12 and it seems to be working just fine now. > > ![Image](https://github.com/user-attachments/assets/bfbbc391-364a-4876-b6d0-f41688e670ea) This is just unicode math inside code fences. What we would like to have is proper rendering of markdown math i.e. instead of ``` X(f) = ∫₋[-∞ to ∞] f(t) e^(−j2πft) dt ``` we want $$ X(f) = \int_{-\infty}^{\infty} x(t) e^{-j2\pi f t} dt $$ This is implemented in every major chat interface (i.e. chatgpt, gemini, ...) but not …",,,,,,Anecdotal,comment,,,,,,,,2025-04-30,github/ChiIIBiII,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059224007,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
@mjbvz Please don't forget to add a copy button or allow the MathJax context menu to appear while hovering over equations,,,,,,Anecdotal,comment,,,,,,,,2025-05-09,github/hamad12a,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059224051,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"For copilot web, you can use this extension - https://github.com/AnonymerNiklasistanonym/LatexMathifyGitHub. It enables Latex to work on all of GitHub, including copilot.",,,,,,Anecdotal,comment,,,,,,,,2025-05-23,github/Fluued,https://github.com/microsoft/vscode/issues/255243#issuecomment-3059224175,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"The latest VS Code insider build enables Katex rendering of block and inline math equations <img width=""471"" height=""887"" alt=""Image"" src=""https://github.com/user-attachments/assets/308e7e5b-1765-4470-b816-ddcdd1fed261"" /> To enabled it, just set `""chat.math.enabled"": true`. We include instructions so models should know how to render math when needed. The supported markup is `$$...$$` for math blocks and `$...$` for inline math equations Please give it a try and open new issues for any bugs you…",,,,,,Anecdotal,comment,,,,,,,,2025-07-25,github/mjbvz,https://github.com/microsoft/vscode/issues/255243#issuecomment-3120619725,"repo: microsoft/vscode | issue: math formulas are not interpreting visually in Copilot Chat, showing in katex or latex format | keyword: workaround"
"User-Level Instruction Files Inaccessible Due to Workspace Restrictions ## Relationship to Existing Issues This bug report provides the missing technical details for several related issues: - #249886: Shows similar symptoms but lacks root cause - #246389 & #231269: Request workspace file access, but this shows the specific technical blocker The error logs in this report reveal that the documented user-level instructions feature fails due to internal tool restrictions, making this a bug rather t…",,,,,,Anecdotal,issue,,,,,,,,2025-07-22,github/DABallentine,https://github.com/microsoft/vscode/issues/257344,repo: microsoft/vscode | keyword: workaround | state: closed
"You are right, I can reproduce. I wasn't aware of this check and also tested this. This affects instruction files in the user folder, but also instruction files in external folders listed by `chat.instructionsFilesLocations` along with their references. FYI @roblourens @digitarald",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/aeschli,https://github.com/microsoft/vscode/issues/257344#issuecomment-3163034693,repo: microsoft/vscode | issue: User-Level Instruction Files Inaccessible Due to Workspace Restrictions | keyword: workaround
"VS Code File Persistence Issue Report Type: <b>Bug</b> # VS Code File Persistence Issue Report ## Problem Description The create_file and replace_string_in_file tools in VS Code Copilot are experiencing persistence issues on Windows systems. ## Technical Details - OS: Windows 10/11 - VS Code Version: Latest - Shell: PowerShell 5.1 - Workspace: Local filesystem (F: drive) ## Reproduction Steps 1. Use create_file tool to create any file with content 2. Tool reports ""success"" 3. Check file with Ge…",,,,,,Anecdotal,issue,,,,,,,,2025-08-09,github/kei2oi2,https://github.com/microsoft/vscode/issues/260742,repo: microsoft/vscode | keyword: workaround | state: closed
Would appreciate seeing a log for the create_file issue. Any errors in the ouput channels or a request log: https://github.com/microsoft/vscode/wiki/Copilot-Issues,,,,,,Anecdotal,comment,,,,,,,,2025-08-09,github/roblourens,https://github.com/microsoft/vscode/issues/260742#issuecomment-3172089456,repo: microsoft/vscode | issue: VS Code File Persistence Issue Report | keyword: workaround
This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Happy Coding!,,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/260742#issuecomment-3200359501,repo: microsoft/vscode | issue: VS Code File Persistence Issue Report | keyword: workaround
"Position getting reset to top of file Type: <b>Bug</b> 1. Open any file. In my case I opened a markdown file. 2. Move anywhere in the file. For example, I moved to line 43. 3. Press ctrl+g to hear the line number of the position of the cursor. 4. Simply press the escape key. Observing: The cursor is placed at the top of the file. Expectations: The cursor should remain at the position, in this case line 43, that the cursor was set on. This is a huge problem for screen reader users. I have yet to…",,,,,,Anecdotal,issue,,,,,,,,2025-08-10,github/accesswatch,https://github.com/microsoft/vscode/issues/260890,repo: microsoft/vscode | keyword: workaround | state: closed
Using editor groups causes this problem also. 1. Open the editor and open a file in the editor. 2. Move to a line further down the file. 3. Press ctrl+2. Open a second file although this seems to work regardless of this fact as well. 4. Now press ctrl+1. The cursor jumps back to the top of the file. I am hoping someone can look at this.,,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/accesswatch,https://github.com/microsoft/vscode/issues/260890#issuecomment-3172833231,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
This issue happens in the latest Insider version. Others will be commenting on multiple cursors which have even larger issues than this. I am hoping we can get a hotfix as we will be teaching an extensive VSCode course at the end of this week and if we need to have students use older versions then we will need to plan for this.,,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/accesswatch,https://github.com/microsoft/vscode/issues/260890#issuecomment-3172836528,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
This is for sure a screen reader only bug ... We have verified with sighted help. Setting editor.editcontext to off fixes the issue for now.,,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/accesswatch,https://github.com/microsoft/vscode/issues/260890#issuecomment-3172849816,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"The issue happens with the new versions of VS Code, like 1.103.0. I tried the version 1.102.3 and everything works OK, using NVDA. This is a big issue because it's hard to edit code in this way.",,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/davidacm,https://github.com/microsoft/vscode/issues/260890#issuecomment-3172928237,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"when using multiple cursors via control+\ and if editor.editcontext is enabled: 1. open a source file 2. go down to some random line 3. hit control+\ to open the file in another editor 4. you will end up on line 1 no matter where you start. 5. hit control+1 to go back to the first editor, and you'll be on line 1.",,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/blindwiz,https://github.com/microsoft/vscode/issues/260890#issuecomment-3172978016,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"Given the severe issues with `editor.editcontext`, can this be disabled even in insiders builds? On top of this issue, there was #256833 (fixed), and #257792. The feature isn't ready for testing at least with a screen reader.",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/Neurrone,https://github.com/microsoft/vscode/issues/260890#issuecomment-3173186650,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"The issue is also present in the merge editor. 1. Open a file with merge conflicts, and navigate to the first conflict. 2. Switch to the other side of the merge editor, and back again. The cursor is back at line 1.",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/rmwilliams2023,https://github.com/microsoft/vscode/issues/260890#issuecomment-3173512970,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
any chance of this being looked into for a hotfix for users or should we simply suggest the setting change @meganrogge ?,,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/accesswatch,https://github.com/microsoft/vscode/issues/260890#issuecomment-3180494775,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"Just confirmed this does not reproduce if you disable `editor.editContext`, so would suggest that as a workaround until @aiday-mar is back from vacation.",,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/meganrogge,https://github.com/microsoft/vscode/issues/260890#issuecomment-3180506793,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"Yes, this fixes this issue but creates issues for those being unaware. We will do our best to ensure the people we talk with no. We are teaching an extensive VSCode class this Saturday to over 130 students so we will ensure they have what they need. @meganrogge",,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/accesswatch,https://github.com/microsoft/vscode/issues/260890#issuecomment-3181272399,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"For what it's worth, I'm also seeing this, both on Windows 10, and in Linux. In windows with the NVDA screen reader, and in Linux with Orca.",,,,,,Anecdotal,comment,,,,,,,,2025-08-17,github/cannona,https://github.com/microsoft/vscode/issues/260890#issuecomment-3194734008,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
Hi thanks for filing this issue. I have looked at it and think I have found a fix here: https://github.com/microsoft/vscode/pull/262285. This should be fixed in tomorrow's insiders release.,,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/aiday-mar,https://github.com/microsoft/vscode/issues/260890#issuecomment-3199800229,repo: microsoft/vscode | issue: Position getting reset to top of file | keyword: workaround
"Integrated terminal automatically sends 'Y' when terminating node batch script Thank you so much for looking into this 🙏 ! Issue Type: <b>Bug</b> ```console ~ > npm run concurrently \""script-1.js\"" \""script-2.js\"" ~ > [ type >> ctrl + c] ~ > Terminate batch job (Y/N)? Y (this character is automatically sent, but only terminates first script, putting remaining output in prompt on next line) ~ > [0] node script-name ~ > [type >> enter] ~ > y (character is still present, with spaces prepended) ~ >…",,,,,,Anecdotal,issue,,,,,,,,2022-02-06,github/stephenmatheis,https://github.com/microsoft/vscode/issues/142341,repo: microsoft/vscode | keyword: workaround | state: closed
You can fix this by setting the value of terminate hatch job within terminal.integrated.autoReplies to null,,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/meganrogge,https://github.com/microsoft/vscode/issues/142341#issuecomment-1031017632,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"@meganrogge, Thank you so much! I should have checked if this was a setting first. Just curious - is this a new setting/behavior? Just started happening with 1.64.",,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/stephenmatheis,https://github.com/microsoft/vscode/issues/142341#issuecomment-1031111717,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"This is still a bug. This happens for me too. Every time I type `CTRL+C` it autoresponds `Y`. Now every time I type anything in the terminal after this, it writes Y after it: ![image](https://user-images.githubusercontent.com/43886029/152754656-df8d0083-a428-4ad5-8791-4dac52a0d12a.png) ```powershell Y : The term 'Y' is not recognized as the name of a cmdlet, function, script file, or operable progr am. Check the spelling of the name, or if a path was included, verify that the path is correct an…",,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/Snailedlt,https://github.com/microsoft/vscode/issues/142341#issuecomment-1031215606,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
Updating to Windows 11 might workaround this as I've never hit this issue. The theory is that something running in the terminal is triggering conpty (the backend component) to reprint the screen which would re-output the match text.,,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/Tyriar,https://github.com/microsoft/vscode/issues/142341#issuecomment-1031565635,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"Thanks for the report, I'm going to disable it by default to be safe. We also had an idea for later on to allow the feature to be discovered intuitively when the user responds manually. How to configure for the batch job message is now called out in the docs: ![image](https://user-images.githubusercontent.com/2193314/152862499-049b261f-73a4-44c5-9d14-b2332a53fee7.png)",,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/Tyriar,https://github.com/microsoft/vscode/issues/142341#issuecomment-1031860237,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"> meganrogge, Thank you so much! I should have checked if this was a setting first. Just curious - is this a new setting/behavior? Just started happening with 1.64. This indeed is new with 1.64, see the [release notes](https://code.visualstudio.com/updates/v1_64#_automatic-replies) for details.",,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/filiptronicek,https://github.com/microsoft/vscode/issues/142341#issuecomment-1031864402,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"I'm trying to use this to automatically enter Y when terminating a batch job. It is giving me an error after my next command though, because it enters ""Y"" again. This is what I have in settings.json: ![image](https://user-images.githubusercontent.com/26261118/153479033-99569eed-832d-4d13-b412-59f06b7cbe0d.png) And this is my terminal: ![image](https://user-images.githubusercontent.com/26261118/153479411-4e84bfbe-1cc1-4709-a31a-80b6d272d14f.png) I saw Windows 11 was mentioned above. Do I need to…",,,,,,Anecdotal,comment,,,,,,,,2022-02-10,github/bballweiss,https://github.com/microsoft/vscode/issues/142341#issuecomment-1035374368,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"Yes on older versions of Windows this is less reliable as the terminal emulation provided by Windows ends up reprinting the screen, causing the phrase to show up again.",,,,,,Anecdotal,comment,,,,,,,,2022-02-10,github/Tyriar,https://github.com/microsoft/vscode/issues/142341#issuecomment-1035479774,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"Shouldn't this be fixed for Windows 10 too though? It's still supported by Microsoft and VSCode, right?",,,,,,Anecdotal,comment,,,,,,,,2022-02-11,github/Snailedlt,https://github.com/microsoft/vscode/issues/142341#issuecomment-1035985361,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"So is the conclusion just ""Not supported you gotta disable it on Windows 10 yourself"" and case closed? Doesn't seem right.",,,,,,Anecdotal,comment,,,,,,,,2022-02-11,github/Regenhardt,https://github.com/microsoft/vscode/issues/142341#issuecomment-1036014502,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
"Ok I see you disabled it by default in a merge request. So the state is now ""this isn't supported on Windows 10""? How about this: Currently it seems to go ""if (buffer.Contains(trigger)) send(reply);"" So what if instead it goes ""if (buffer.Contains(trigger) && !buffer.Contains(trigger+reply)) send(reply);"" You know, just check if the line that was found already has a reply?",,,,,,Anecdotal,comment,,,,,,,,2022-02-11,github/Regenhardt,https://github.com/microsoft/vscode/issues/142341#issuecomment-1036021182,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
Thanks for the reply. I don't think it is OK to leave it as is. I saw it in the release notes (https://code.visualstudio.com/updates/v1_64#_automatic-replies) and spent way too much time trying to get it to work before finding this thread. Can it either be fixed to work with Windows 10 or update the docs to make it clear that Windows 11 is needed?,,,,,,Anecdotal,comment,,,,,,,,2022-02-11,github/bballweiss,https://github.com/microsoft/vscode/issues/142341#issuecomment-1036296372,repo: microsoft/vscode | issue: Integrated terminal automatically sends 'Y' when terminating node batch script | keyword: workaround
VSCode freezes when opening a terminal <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/ins…,,,,,,Anecdotal,issue,,,,,,,,2025-02-06,github/anrikun,https://github.com/microsoft/vscode/issues/239838,repo: microsoft/vscode | keyword: workaround | state: closed
confirm issue exists too after last update. But for me it's random... And doesn't matter which project I open,,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/dkumza,https://github.com/microsoft/vscode/issues/239838#issuecomment-2640699169,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"Same issuewith Debiam 12, VSC locks up. Message: The Windows is not responding Removed and reinstalled VSC same problem. Can not use VSC anymore! Version: 1.97.0 Commit: 33fc5a94a3f99ebe7087e8fe79fbe1d37a251016 Date: 2025-02-04T22:41:26.688Z Electron: 32.2.7 ElectronBuildId: 10660205 Chromium: 128.0.6613.186 Node.js: 20.18.1 V8: 12.8.374.38-electron.0 OS: Linux arm64 6.6.74+rpt-rpi-v8",,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/HeinzRuetschi,https://github.com/microsoft/vscode/issues/239838#issuecomment-2640790567,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
> I think it would be useful following https://github.com/Microsoft/vscode/wiki/Performance-Issues There is nothing about solving complete freezes like this there. How to rollback this update?,,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/anrikun,https://github.com/microsoft/vscode/issues/239838#issuecomment-2640952671,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
To rollback this update (Windows): - Download version 1.96 here: https://code.visualstudio.com/updates/v1_96 - Install it - **BUT** turn off your internet connection before starting VSCode - Go to settings : **update > mode > none**,,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/anrikun,https://github.com/microsoft/vscode/issues/239838#issuecomment-2641011474,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"> Same freeze on Windows 11 ARM64. MacOS version is running without problems. Mac Silicon Version has this issue, too.",,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/jlmasson,https://github.com/microsoft/vscode/issues/239838#issuecomment-2641097646,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
Have the same issue on my Raspberry Pi with newest update (OS and VSC). Starting VS Code and after a few seconds it freeze. Can select commands from the menu but nothing happens. Happens with and without extensions.,,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/wgroh,https://github.com/microsoft/vscode/issues/239838#issuecomment-2641319016,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"yes @FabricioDosSantosMoreira its the same here, only freeze when I open terminal. I got crazy reinstalling everything like extensions and zsh pluggins lol, and nothing works, only when I made the downgrade",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/brpadilha,https://github.com/microsoft/vscode/issues/239838#issuecomment-2641669464,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"We are sorry for the trouble, but need to gather more information for how to reproduce this issue. I hear that people notice this crash when they open a terminal in VS Code, is that true for all users? And if so, anything specifically configured in settings or with the terminal in the OS that could hint to why it crashes? Also, if you could try to reproduce from our insider builds: You can give our preview releases a try from: https://code.visualstudio.com/insiders/",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/bpasero,https://github.com/microsoft/vscode/issues/239838#issuecomment-2641986358,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
I cannot reproduce on macOS. Can you please follow these steps? https://github.com/microsoft/vscode/wiki/Native-Crash-Issues#creating-and-symbolicating-local-crash-reports,,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/meganrogge,https://github.com/microsoft/vscode/issues/239838#issuecomment-2641998280,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"No, When I Was Setting Up My Brothers VS Code First Time I Installed It And Was Trying To Open The Terminal For Checking gcc version and the terminal didn't opened. i didn't did any config at all not even installed a extension only logined his github and microsoft n copilot accout to vscode. nothing else and when i tried again it was not working plz help us",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/mosroom,https://github.com/microsoft/vscode/issues/239838#issuecomment-2641998531,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
@meganrogge what is this btw ?? https://github.com/microsoft/vscode/wiki/Native-Crash-Issues#creating-and-symbolicating-local-crash-reports,,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/mosroom,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642000126,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
does changing either of these help: `terminal.integrated.gpuAcceleration` or `terminal.integrated.shellIntegration.enabled`?,,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/meganrogge,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642006861,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"> @meganrogge what is this btw ?? > https://github.com/microsoft/vscode/wiki/Native-Crash-Issues#creating-and-symbolicating-local-crash-reports That's a guide for creating a crash report, which would be helpful to understand and fix the issue you're seeing.",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/meganrogge,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642012736,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
Can anyone else generate the crash report of this bug who ever else is facing this bug as i not able to generate idk why its not generating. @meganrogge and plz try to fix this error as soon as possible.,,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/mosroom,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642255990,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
Can people please share their settings here? The location is: `C:\Users\<User ID>\AppData\Roaming\Code\User\settings.json`,,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/bpasero,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642274928,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"@bpasero here's mine, I'm on MacOS ARM: ``` { // Workbench ""workbench.editor.closeOnFileDelete"": true, ""workbench.tree.expandMode"": ""singleClick"", ""workbench.tree.indent"": 20, ""workbench.editor.highlightModifiedTabs"": true, ""workbench.editor.decorations.colors"": false, ""workbench.editor.pinnedTabSizing"": ""compact"", ""workbench.colorCustomizations"": { ""editorUnnecessaryCode.opacity"": ""#00000075"", // Global ""scrollbar.shadow"": ""#ff000000"", // ""editor.lineHighlightBorder"": ""#ff000000"", ""focusBorder…",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/widersky,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642326126,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"It appears most of the reports are from Windows 10 x64, I see one on Windows 11 arm (https://github.com/microsoft/vscode/issues/239838#issuecomment-2641097646), one on raspberry pi arm (https://github.com/microsoft/vscode/issues/239838#issuecomment-2640790567), one on Linux arm (https://github.com/microsoft/vscode/issues/239838#issuecomment-2640790567), one on mac arm (https://github.com/microsoft/vscode/issues/239838#issuecomment-2642326126).",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/Tyriar,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642333662,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"I don't have any of the above hardware but will keep trying. Looking at the screenshot I think it's a window freeze caused by an infinite loop. If anyone can reproduce this reliably, these steps would help narrow it down: 1. Open VS Code 2. Open developer tools (Help > Toggle Developer Tools) 3. Open the terminal to cause the issue 4. Open the sources tab in developer tools and hit the pause button That should freeze somewhere, giving context of somewhere that keeps looping. A screenshot of the…",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/Tyriar,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642353406,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"Tried on a Windows x64 10 (19044) VM and doesn't reproduce with no settings, suggest enabled or the settings in https://github.com/microsoft/vscode/issues/239838#issuecomment-2642326126",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/Tyriar,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642446240,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"I solved this problem yestarday , using win + R to opening up the windows terminal and typing in the terminal ""code --disable-gpu"", most likely it's a gpu problem and can be solved in ""file > preferences > settings"" in the search field type ""gpu"" and find ""Enable GPU Acceleration"", turn it off e restart Vscode.",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/igorfonseca05,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642456358,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"> [@Tyriar](https://github.com/Tyriar) unfortunately not :( I solved this problem yestarday , using win + R to opening up the windows terminal and typing in the terminal ""code --disable-gpu"", most likely it's a gpu problem and can be solved in ""file > preferences > settings"" in the search field type ""gpu"" and find ""Enable GPU Acceleration"", turn it off e restart Vscode. Tells me if it is helped for you! Reminder: Make changes after add in the terminal the ""code --disable-gpu"" and open up the VS…",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/igorfonseca05,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642471868,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
@igorfonseca05 I’ve had this option disabled for months because it was causing stuttering when scrolling through code — without GPU Acceleration on macOS M1 the code scrolls much more smoothly. Changing this option doesn’t help anyway; I just tried it a moment ago.,,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/widersky,https://github.com/microsoft/vscode/issues/239838#issuecomment-2642478239,repo: microsoft/vscode | issue: VSCode freezes when opening a terminal | keyword: workaround
"""Open with Code"" old context menu option missing from Explorer on version 1.103.0 Type: <b>Bug</b> 1. Install Visual Studio Code version 1.103.0. 2. During the installation, ensure the ""Add 'Open with Code' action to Windows Explorer directory context menu"" option is checked. 3. Navigate to any folder in Windows Explorer and right-click on a sub-folder, or an empty space. VS Code version: Code 1.103.0 (e3550cfac4b63ca4eafca7b601f0d2885817fd1f, 2025-08-06T21:40:10.271Z) OS version: Windows_NT x6…",,,,,,Anecdotal,issue,,,,,,,,2025-08-07,github/Z-d-Zen,https://github.com/microsoft/vscode/issues/260389,repo: microsoft/vscode | keyword: workaround | state: closed
"Same for me, installed VSCodeUserSetup-x64-1.102.2.exe and context menu item came back. installing VSCodeUserSetup-x64-1.103.0.exe makes it dissapear even though the settings where checked during the install",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/BruceJillis,https://github.com/microsoft/vscode/issues/260389#issuecomment-3165380769,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"Same issue on my end, same version, happened right after update. More so, in Windows 11, if I search for VS Code in the Default Apps, it does not show up. Might help to debug, in the Apps search window, it shows VSCode as being a User version. <img width=""791"" height=""401"" alt=""Image"" src=""https://github.com/user-attachments/assets/63a04644-f1b7-4d12-bc30-4439d59b1b23"" />",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/OlivierPoitras,https://github.com/microsoft/vscode/issues/260389#issuecomment-3165383960,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"> +1 Time to disable VSCode auto update. Microsoft fxxked up everything, just like windows update. This, along with all the AI/chat/copilot ""features"" has me looking to roll back to an older version of VSCode and just leave it there.",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/joeyv120,https://github.com/microsoft/vscode/issues/260389#issuecomment-3165690394,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"> > +1 Time to disable VSCode auto update. Microsoft fxxked up everything, just like windows update. > > This, along with all the AI/chat/copilot ""features"" has me looking to roll back to an older version of VSCode and just leave it there. I wish to roll back to Windows XP and Windows 7 lol. I miss those old days.",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/davidchan9452,https://github.com/microsoft/vscode/issues/260389#issuecomment-3165734991,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"Same here. The new update to Visual Studio Code version 1.103.0 removed the 'Open with Code' option from the context menu. Reinstalling with the options to add the context menu **checked**, still did not add it back.",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/manimau01,https://github.com/microsoft/vscode/issues/260389#issuecomment-3165927051,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"A workaround works for me is to install an earlier version first (say 1.102.3) with both ""Add Open with Code ..."" **checked**, and then run the 1.103 installer with both **unchecked**.",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/chuyuanliu,https://github.com/microsoft/vscode/issues/260389#issuecomment-3166050907,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"Same thing happened here. I turn around and there is no ""Open with Code"" option on Windows 10. (There is however an ""Open with Visual Studio"" option that does nothing. I wasn't even aware that I had Visual Studio installed.) I manually opened VS Code and it showed it had just updated to v1.103.0, which I infer is what removed the ""Open with Code"" option.",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/garretwilson,https://github.com/microsoft/vscode/issues/260389#issuecomment-3166131900,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"This regressed via https://github.com/microsoft/vscode/commit/f5e06c148d8ffd4da18f37179d2be30348575124, its the old style context menu entry that was removed during postinstall https://github.com/microsoft/vscode/blob/88dc5d301c0be666dff294880c720d7cfc3595e1/build/win32/code.iss#L1537-L1545 since we never shipped the new context menu in stable.",,,,,,Anecdotal,comment,,,,,,,,2025-08-08,github/deepak1556,https://github.com/microsoft/vscode/issues/260389#issuecomment-3166309726,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
/closedWith https://github.com/microsoft/vscode/commit/dbbe64c9e73acacf15cdc77fedc014712099b3d9 Closing for verification.,,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/deepak1556,https://github.com/microsoft/vscode/issues/260389#issuecomment-3174662637,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
**Steps for Verification** Note: This requires a stable build **not** insiders to verify * Install 1.102 with context menu option enabled in the setup * Verify that context menu `Open with Code` appears in the file explorer * Update to 1.103 and confirm that context menu is not present * Use `Developer: Apply Update` to update to the unreleased build of choice [system setup](https://vscode.download.prss.microsoft.com/dbazure/download/stable/dbbe64c9e73acacf15cdc77fedc014712099b3d9/VSCodeSetup-x…,,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/deepak1556,https://github.com/microsoft/vscode/issues/260389#issuecomment-3174685674,"repo: microsoft/vscode | issue: ""Open with Code"" old context menu option missing from Explorer on version 1.103.0 | keyword: workaround"
"Disappearing terminal confirmation editors - get a terminal tool confirmation - click into it - It disappears <img width=""493"" height=""270"" alt=""Image"" src=""https://github.com/user-attachments/assets/d0103a54-a301-46cd-8172-434beb9101e8"" /> This is weird- what happened is that the editor's model was disposed, and the editor was removed from the DOM. That happened when the wordHighlighter contrib disposed its reference and there were no remaining refs. I don't know what changed, and I can't repr…",,,,,,Anecdotal,issue,,,,,,,,2025-08-09,github/roblourens,https://github.com/microsoft/vscode/issues/260705,repo: microsoft/vscode | keyword: workaround | state: closed
This is happening because of the following line: https://github.com/microsoft/vscode/blob/7ca850c73f7fa37e1fc80090f14268b0b6b504bb/src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts#L719 It was added in 0c939e4d0ad6648f94a17c0a276e464cf5cf39ae @Yoyokrazy that was a challenge figuring out where it was happening. I'm going to disable `WordHighlighterContribution.ID` in `CodeBlockPart` as a workaround in my upcoming PR. We need to understand what's going on here,,,,,,Anecdotal,comment,,,,,,,,2025-08-09,github/Tyriar,https://github.com/microsoft/vscode/issues/260705#issuecomment-3170977789,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"Actually figured it out, you're right @roblourens we need to call that reference call to make sure it doesn't get disposed. Will fix soon, FYI this has been happening for a very long time at this point but couldn't figure out the repro.",,,,,,Anecdotal,comment,,,,,,,,2025-08-09,github/Tyriar,https://github.com/microsoft/vscode/issues/260705#issuecomment-3171043881,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"Also cc @bpasero, this is confusing, is this how it's expected to be used or are we doing something wrong?",,,,,,Anecdotal,comment,,,,,,,,2025-08-09,github/roblourens,https://github.com/microsoft/vscode/issues/260705#issuecomment-3172068819,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"I am not sure what specifically the question is about but the use of `ITextModelResolverService.createModelReference` with a later `dispose` seems right to me for how to get a workbench level text model created (one that you can resolve from a `URI`, save/revert).",,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/bpasero,https://github.com/microsoft/vscode/issues/260705#issuecomment-3172379946,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
@bpasero what confused me about it is why the editor gets removed even though the original `createModel` call was never disposed?,,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/Tyriar,https://github.com/microsoft/vscode/issues/260705#issuecomment-3172538634,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"I cannot really speak to that as this seems to be a code editor, not covered by workbench semantics. A code editor should not just hide because its underlying model disposes: https://github.com/microsoft/vscode/blob/dafc6c513f832e4aca179bd8c271b4468004c78f/src/vs/editor/browser/widget/codeEditor/codeEditorWidget.ts#L1730-L1731",,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/bpasero,https://github.com/microsoft/vscode/issues/260705#issuecomment-3172814532,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
@bpasero I think it's confusing to me that `createModel` doesn't create a reference to the model? I would expect that to be the default behavior? But I am often unsure about how to properly work with models. We seem to be not the only ones thrown off by this https://github.com/microsoft/vscode/blob/d8e09f6dccf07c017973dd39b5348991a903ba7c/src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPreview.ts#L443-L445 > A code editor should not just hide because its underlying model disposes I su…,,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/roblourens,https://github.com/microsoft/vscode/issues/260705#issuecomment-3176804094,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"We call `createModel` in many places in chat, and maybe some of these are wrong for the same reason. I can see why you would want to separate model creation and handling its lifecycle. Maybe in this case I would expect the editor itself to hold a reference to its model? Because clearly its still using it until it's unloaded? I think it would be helpfult to have a small doc like on the IModelService just explaining how to think about managing models.",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/roblourens,https://github.com/microsoft/vscode/issues/260705#issuecomment-3176819327,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"@roblourens `IModelService.createModel` and `ITextModelResolverService.createModelReference` are 2 somewhat different things. The former creates a lower level monaco code editor model for use in the monaco code editor and the latter creates higher workbench level text model for use in workbench text editors, with support for resolving from file system providers, working with untitled files etc. The latter basically wraps around the lower level model with workbench and file semantics. The use of…",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/bpasero,https://github.com/microsoft/vscode/issues/260705#issuecomment-3187224526,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"> A code editor should not just hide because its underlying model disposes I'm not a big fan of `.dispose` informing active users of that object to not use that object anymore and as far as I remember this caused some tricky debugging sessions in the past. Historically, the diff editor reports an error if someone disposes a text model that is still in use.",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/hediet,https://github.com/microsoft/vscode/issues/260705#issuecomment-3187564418,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"If that's so, then it seems wrong that these `vs/editor/contrib` like WordHighlighter use `createModelReference`? In this scenario we are just trying to create a monaco editor with a model and some contribs.",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/roblourens,https://github.com/microsoft/vscode/issues/260705#issuecomment-3189502650,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"@roblourens I think at one point we made a larger adoption to use text model resolver service for all contribs in monaco editor land, simply because it takes care of more things than just going to the model registry and getting the model by reference (for example: activate extensions for contributed file system providers). Now looking at all the schemes it supports, I actually take back what I said, even for virtual documents it should be used: https://github.com/microsoft/vscode/blob/98cdb6320…",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/bpasero,https://github.com/microsoft/vscode/issues/260705#issuecomment-3189587154,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"Oh so you're saying to just create a reference and not call `createModel` directly? That makes sense, it just wasn't even clear to me that `createModelReference` does create a model if it doesn't exist. I think the only actual issue is that many of us just find this confusing and don't know what the best practices are.",,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/roblourens,https://github.com/microsoft/vscode/issues/260705#issuecomment-3198009881,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"So we would do - `createModelReference` - A `ITextModelContentProvider` is registered for this scheme which calls `createModel` (we already have this but we are reusing `vscodeChatCodeBlock` for confirmations, we should either have a new scheme or a URI parameter to indicate that this model should be `isForSimpleWidget`)",,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/roblourens,https://github.com/microsoft/vscode/issues/260705#issuecomment-3198020029,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
"Yes, an example is here: https://github.com/microsoft/vscode/blob/14978d7cc92765e69d18cbdbe02bfa8faf84aee7/src/vs/workbench/contrib/files/browser/fileActions.ts#L883-L896 https://github.com/microsoft/vscode/blob/14978d7cc92765e69d18cbdbe02bfa8faf84aee7/src/vs/workbench/contrib/files/browser/fileActions.ts#L858-L859",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/bpasero,https://github.com/microsoft/vscode/issues/260705#issuecomment-3199135728,repo: microsoft/vscode | issue: Disappearing terminal confirmation editors | keyword: workaround
VSCode failing to keep the remote connection open <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstu…,,,,,,Anecdotal,issue,,,,,,,,2025-07-14,github/milica-c,https://github.com/microsoft/vscode/issues/255749,repo: microsoft/vscode | keyword: workaround | state: closed
"I have the same issue with Visual Studio Code `1.102.0` on macOS `15.5 (24F74)`. As soon as I open a file, I get disconnected from SSH. <img width=""255"" height=""224"" alt=""Image"" src=""https://github.com/user-attachments/assets/1720d858-31de-4db8-93c5-d28108626bca"" />",,,,,,Anecdotal,comment,,,,,,,,2025-07-14,github/leoregner-tpa,https://github.com/microsoft/vscode/issues/255749#issuecomment-3068588841,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"+1 I use WSL2 + devcontainer. ``` Version: 1.102.0 (system setup) Commit: cb0c47c0cfaad0757385834bd89d410c78a856c0 Date: 2025-07-09T22:10:34.600Z Electron: 35.6.0 ElectronBuildId: 11847422 Chromium: 134.0.6998.205 Node.js: 22.15.1 V8: 13.4.114.21-electron.0 OS: Windows_NT x64 10.0.26100 ``` After I tried to revert to version 1.101.2, this issue no longer occurred!",,,,,,Anecdotal,comment,,,,,,,,2025-07-15,github/eeve,https://github.com/microsoft/vscode/issues/255749#issuecomment-3072209449,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
+1 VSCode: 1.102.0 OS: Fedora Linux 42 (Workstation Edition) Using official remote explorer extension,,,,,,Anecdotal,comment,,,,,,,,2025-07-15,github/hahavenn,https://github.com/microsoft/vscode/issues/255749#issuecomment-3073157086,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
+1 VSCode: 1.102.0 OS: Windows_NT x64 10.0.26100 Remote SSH: 0.120.0 same error with pre release version 0.121.2025063015,,,,,,Anecdotal,comment,,,,,,,,2025-07-15,github/millouzgc,https://github.com/microsoft/vscode/issues/255749#issuecomment-3073663529,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
+1 VSCode: 1.102.0 OS: Windows 11 w/ Ubuntu 22.04 WSL Version: 1.102.0 (system setup) Commit: cb0c47c0cfaad0757385834bd89d410c78a856c0 Date: 2025-07-09T22:10:34.600Z Electron: 35.6.0 ElectronBuildId: 11847422 Chromium: 134.0.6998.205 Node.js: 22.15.1 V8: 13.4.114.21-electron.0 OS: Windows_NT x64 10.0.22631,,,,,,Anecdotal,comment,,,,,,,,2025-07-15,github/bbreisch26,https://github.com/microsoft/vscode/issues/255749#issuecomment-3074116933,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"Well, The interesting thing is ， when I connect to the remote VM with ssh, if I try to close all editor tabs before the Language sever work out the language syntax IntelliSense， the remote connection will not broke, and wait for a while, try to open the source code file , this works sometimes but not always, I guess there is something to do with this",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/LinPr,https://github.com/microsoft/vscode/issues/255749#issuecomment-3076576965,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
Same here ``` Version: 1.101.2 Commit: 2901c5ac6db8a986a5666c3af51ff804d05af0d4 Date: 2025-06-24T20:27:15.391Z Electron: 35.5.1 ElectronBuildId: 11727614 Chromium: 134.0.6998.205 Node.js: 22.15.1 V8: 13.4.114.21-electron.0 OS: Linux x64 6.15.5 ``` Remote SSH 0.120.0,,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/extrange,https://github.com/microsoft/vscode/issues/255749#issuecomment-3076582402,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"Try disabling the extensions you have installed on WSL, restarting VS Code, confirming it's working, and then enabling them again. I tried this earlier today and the issue stopped happening (so far). Also, for me this issue would only happen if I had a single window open. If I had more it wouldn't happen.",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/LAPSrj,https://github.com/microsoft/vscode/issues/255749#issuecomment-3076744726,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"> Try disabling the extensions you have installed on WSL, restarting VS Code, confirming it's working, and then enabling them again. I tried this earlier today and the issue stopped happening (so far). > > Also, for me this issue would only happen if I had a single window open. If I had more it wouldn't happen. Hi, I confirm that process is working!",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/milica-c,https://github.com/microsoft/vscode/issues/255749#issuecomment-3077269921,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"Hi @wonss737 , sorry for not being specific :) For me it worked the uninstalling of all extensions and then restarting VsCode and then installing strictly needed ones only.",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/mica-c,https://github.com/microsoft/vscode/issues/255749#issuecomment-3078576156,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"> > Try disabling the extensions you have installed on WSL, restarting VS Code, confirming it's working, and then enabling them again. I tried this earlier today and the issue stopped happening (so far). > > > > Also, for me this issue would only happen if I had a single window open. If I had more it wouldn't happen. > > Hi, I confirm that process is working! this is not always work, when the next time I restart machine and vscode, I have to do it once again(at least this happens to me). So I d…",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/LinPr,https://github.com/microsoft/vscode/issues/255749#issuecomment-3078988292,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"> > > Try disabling the extensions you have installed on WSL, restarting VS Code, confirming it's working, and then enabling them again. I tried this earlier today and the issue stopped happening (so far). > > > Also, for me this issue would only happen if I had a single window open. If I had more it wouldn't happen. > > > > > > Hi, I confirm that process is working! > > this is not always work, when the next time I restart machine and vscode, I have to do it once again(at least this happens to…",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/LAPSrj,https://github.com/microsoft/vscode/issues/255749#issuecomment-3079124554,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"> > > > Try disabling the extensions you have installed on WSL, restarting VS Code, confirming it's working, and then enabling them again. I tried this earlier today and the issue stopped happening (so far). > > > > Also, for me this issue would only happen if I had a single window open. If I had more it wouldn't happen. > > > > > > > > > Hi, I confirm that process is working! > > > > > > this is not always work, when the next time I restart machine and vscode, I have to do it once again(at lea…",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/A00474880,https://github.com/microsoft/vscode/issues/255749#issuecomment-3079407658,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"> > > > Try disabling the extensions you have installed on WSL, restarting VS Code, confirming it's working, and then enabling them again. I tried this earlier today and the issue stopped happening (so far). > > > > Also, for me this issue would only happen if I had a single window open. If I had more it wouldn't happen. > > > > > > > > > Hi, I confirm that process is working! > > > > this is not always work, when the next time I restart machine and vscode, I have to do it once again(at least t…",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/LinPr,https://github.com/microsoft/vscode/issues/255749#issuecomment-3079628996,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"> > > > > Try disabling the extensions you have installed on WSL, restarting VS Code, confirming it's working, and then enabling them again. I tried this earlier today and the issue stopped happening (so far). > > > > > Also, for me this issue would only happen if I had a single window open. If I had more it wouldn't happen. > > > > > > > > > > > > Hi, I confirm that process is working! > > > > > > > > > this is not always work, when the next time I restart machine and vscode, I have to do it o…",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/A00474880,https://github.com/microsoft/vscode/issues/255749#issuecomment-3079866466,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"From other issues from the last few days, it seems this problem is also happening with [continuedev/continue#6612](https://github.com/continuedev/continue/issues/6612) I'm adding this just in case someone is having the same issue, finds this topic, and doesn't use the Vue (Official) extension.",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/LAPSrj,https://github.com/microsoft/vscode/issues/255749#issuecomment-3079897945,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"Hi all, https://github.com/continuedev/continue maintainer here 👋 FWIW our issue appears to have been entirely related to our own application logic, nothing related to upstream vscode updates or anything. Think it's just a coincidence that both our release + Vue release were causing similar issues. If folks are using Continue, it appears we've successfully resolved the problem in latest release, v1.0.19",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/Patrick-Erichsen,https://github.com/microsoft/vscode/issues/255749#issuecomment-3080005369,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"TBH I didn't have time today to look into both threads to identify what was the issue in them. The issue seems to be related to plugins but it also seems to have been caused by the latest VS Code update. Maybe something on the latest version is breaking something on some plugins. I believe it's worth to reopen the issue and keep the investigation going. EDIT: I just realized that I only noticed this issue yesterday because I didn't close VS Code until the weekend, so it only installed the lates…",,,,,,Anecdotal,comment,,,,,,,,2025-07-16,github/LAPSrj,https://github.com/microsoft/vscode/issues/255749#issuecomment-3080107073,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"@mica-c can you help reopen the issue?, Since this thread is pretty active. Like @LAPSrj above, the issue seems related to extensions and only happens when extensions are enabled, but it is caused by some bug after VSCode update, I can rollback VSCode and everything is good, when updated, VSCode go on some crashes with a few reloads and then working normally. This also only seems to happen every time a new VSCode instance is started fresh, without other existing VSCode instances, if you already…",,,,,,Anecdotal,comment,,,,,,,,2025-07-17,github/NamesMT,https://github.com/microsoft/vscode/issues/255749#issuecomment-3082343015,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
This is possibly (probably?) related to: https://github.com/microsoft/vscode-remote-release/issues/11091,,,,,,Anecdotal,comment,,,,,,,,2025-07-17,github/GalenReich,https://github.com/microsoft/vscode/issues/255749#issuecomment-3084623465,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
https://github.com/vuejs/language-tools/issues/5478#issuecomment-3089586212 says that the issue is not on `vuejs/language-tools` side. However https://github.com/vuejs/language-tools/issues/5478#issuecomment-3089551022 opened a pr to fix it by prompting a manual reload instead of calling `workbench.action.restartExtensionHost` : https://github.com/vuejs/language-tools/pull/5530,,,,,,Anecdotal,comment,,,,,,,,2025-07-18,github/ggjulio,https://github.com/microsoft/vscode/issues/255749#issuecomment-3089670801,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
> https://github.com/vuejs/language-tools/issues/5478#issuecomment-3089586212 says that the issue is not on `vuejs/language-tools` side. > > However https://github.com/vuejs/language-tools/issues/5478#issuecomment-3089551022 say otherwise and opened a pr: https://github.com/vuejs/language-tools/pull/5530 https://github.com/vuejs/language-tools/pull/5530 is a workaround to avoid invoking `Restart Extension Host`automatically (it leads to crash) I mentioned the root cause in https://github.com/mi…,,,,,,Anecdotal,comment,,,,,,,,2025-07-18,github/so1ve,https://github.com/microsoft/vscode/issues/255749#issuecomment-3089685208,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
https://github.com/vuejs/language-tools/issues/5478 is closed and pr https://github.com/vuejs/language-tools/pull/5530 is merged. Vue official 3.03 is available. The workaround is working,,,,,,Anecdotal,comment,,,,,,,,2025-07-18,github/A00474880,https://github.com/microsoft/vscode/issues/255749#issuecomment-3090550316,repo: microsoft/vscode | issue: VSCode failing to keep the remote connection open | keyword: workaround
"Run in terminal allow list doesn't work well with pwsh commands starting with ( Reported by @sandersaares at https://github.com/microsoft/vscode/issues/252496#issuecomment-3018675786 > This feature helps a lot! That said, here is an example of a command that I have still had to manually approve 100 times today: > > > cd ""c:\blah"" && (Get-Content local.rs) -replace '\.by_rc_checked\(\)', '.bind_by_rc_checked()' | Set-Content local.rs > > I tried allowlisting `cd`, `Get-Content`, `Set-Content` an…",,,,,,Anecdotal,issue,,,,,,,,2025-06-30,github/Tyriar,https://github.com/microsoft/vscode/issues/252982,repo: microsoft/vscode | keyword: workaround | state: closed
"Windows IME for Chinese has been block from poping up when editing file content Type: <b>Bug</b> 1. edit some file, just type `nihao`(你好) under zh mode of Chinese IME that comes with Windows. 2. you will find that IME was blocked from poping up, but the underline is working well. 3. type any word in some input box elsewhere file content tab, such as search input box, the IME works well and you can see the pop-up. This problem has been there for two or there verions. I tried disable all extensio…",,,,,,Anecdotal,issue,,,,,,,,2025-07-03,github/LiuJiewenTT,https://github.com/microsoft/vscode/issues/253874,repo: microsoft/vscode | keyword: workaround | state: closed
Duplicate of #251518 See https://github.com/microsoft/vscode/issues/251518#issuecomment-2984266275 Toggling the setting `editor.experimentalEditContextEnabled` is a workaround.,,,,,,Anecdotal,comment,,,,,,,,2025-07-03,github/tamuratak,https://github.com/microsoft/vscode/issues/253874#issuecomment-3033580156,repo: microsoft/vscode | issue: Windows IME for Chinese has been block from poping up when editing file content | keyword: workaround
> Duplicate of [#251518](https://github.com/microsoft/vscode/issues/251518) > > See [#251518 (comment)](https://github.com/microsoft/vscode/issues/251518#issuecomment-2984266275) > > Toggling the setting `editor.experimentalEditContextEnabled` is a workaround. It works for me. Thank you very much!,,,,,,Anecdotal,comment,,,,,,,,2025-07-04,github/LiuJiewenTT,https://github.com/microsoft/vscode/issues/253874#issuecomment-3034175541,repo: microsoft/vscode | issue: Windows IME for Chinese has been block from poping up when editing file content | keyword: workaround
"For those who came later: The settings has been renamed to `editor.editContext` already, from `v1.102.0`.",,,,,,Anecdotal,comment,,,,,,,,2025-07-14,github/LiuJiewenTT,https://github.com/microsoft/vscode/issues/253874#issuecomment-3067727207,repo: microsoft/vscode | issue: Windows IME for Chinese has been block from poping up when editing file content | keyword: workaround
Copilot Agent with no access to edit files or terminal tools I installed this latest VS Code version: Version: 1.101.2 (system setup) Commit: 2901c5ac6db8a986a5666c3af51ff804d05af0d4 Date: 2025-06-24T20:27:15.391Z Electron: 35.5.1 ElectronBuildId: 11727614 Chromium: 134.0.6998.205 Node.js: 22.15.1 V8: 13.4.114.21-electron.0 OS: Windows_NT x64 10.0.26100 And after that Agent mode is completely broken to edit or run commands and I get one of these messages: ```text Since I currently do not have a…,,,,,,Anecdotal,issue,,,,,,,,2025-07-02,github/paulomarquesc,https://github.com/microsoft/vscode/issues/253561,repo: microsoft/vscode | keyword: workaround | state: closed
"I ended up resolving the issue myself after accidentally figuring out that that I need to open my prompt file and click in the little text that says ""Configure Tools"" from within the prompt file and not in the Copilot chat window, that don't work. After you select all that you need, it will now execute terminal commands, edit files, create new files, etc. This was a change that happened some time between Monday (06/30) back tracking to 14 days before, not sure when this version was exactly rele…",,,,,,Anecdotal,comment,,,,,,,,2025-07-03,github/paulomarquesc,https://github.com/microsoft/vscode/issues/253561#issuecomment-3029907061,repo: microsoft/vscode | issue: Copilot Agent with no access to edit files or terminal tools | keyword: workaround
chat - disable custom welcome content for now (workaround endless loop) <!-- Thank you for submitting a Pull Request. Please: * Read our Pull Request guidelines: https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests * Associate an issue with the Pull Request. * Ensure that the code is up-to-date with the `main` branch. * Include a description of the proposed changes and how to test them. -->,,,,,,Anecdotal,issue,,,,,,,,2025-07-04,github/bpasero,https://github.com/microsoft/vscode/pull/254130,repo: microsoft/vscode | keyword: workaround | state: closed
chat - disable custom welcome content for now (workaround endless loop) <!-- Thank you for submitting a Pull Request. Please: * Read our Pull Request guidelines: https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests * Associate an issue with the Pull Request. * Ensure that the code is up-to-date with the `main` branch. * Include a description of the proposed changes and how to test them. -->,,,,,,Anecdotal,issue,,,,,,,,2025-07-04,github/bpasero,https://github.com/microsoft/vscode/pull/254129,repo: microsoft/vscode | keyword: workaround | state: closed
"Copilot takes a long time initializing ""vue-typescript-plugin-pack"" I am not sure if this is the proper place or label for this issue. It is not related to the agent itself, but to the vue-typescript-plugin-pack loaded for copilot. When copilot is enabled in a vue project with typescript support, initializing the vue-typescript-plugin-pack takes longer than a full minute, which breaks intellisense, code actions, or any interoperability with the tsserver. I created this repository with a fairly …",,,,,,Anecdotal,issue,,,,,,,,2025-08-08,github/stweedie,https://github.com/microsoft/vscode/issues/260664,repo: microsoft/vscode | keyword: workaround | state: closed
"I have been trying to keep the reproduction minimal, though it seems to be tied directly to copilot chat making changes to files. For instance, if you clone the repo I mentioned and open files, it seems fine. However, if you instead ask copilot to add a new ts / vue file or update an existing vue / ts file, THEN opening any .vue file becomes unresponsive. When it gets in this state, the only way I've found to get it back to normal is to start a new chat and then reload the vscode window.",,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/stweedie,https://github.com/microsoft/vscode/issues/260664#issuecomment-3181175496,"repo: microsoft/vscode | issue: Copilot takes a long time initializing ""vue-typescript-plugin-pack"" | keyword: workaround"
"I have done some more tracing, and it appears that something (maybe copilot?) is causing the language service to use the absolute path of the vscode installation instead of the project / workspace root. I added a log statement to the ""visitDirectory"" function of my local typescript project that vscode is using: <img width=""762"" height=""71"" alt=""Image"" src=""https://github.com/user-attachments/assets/62b63a1e-465a-4f41-9dc3-0431eba6150d"" /> During normal operation (ie with copilot closed and not …",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/stweedie,https://github.com/microsoft/vscode/issues/260664#issuecomment-3185797861,"repo: microsoft/vscode | issue: Copilot takes a long time initializing ""vue-typescript-plugin-pack"" | keyword: workaround"
"More context: I have traced it to the message that is sent to the tsserver process. The problematic message is this: ```json { ""seq"": 2, ""type"": ""request"", ""command"": ""updateOpen"", ""arguments"": { ""changedFiles"": [], ""closedFiles"": [], ""openFiles"": [ { ""file"": ""/home/skyler/source/side-projects/slow-copilot/src/models/OmahaHand.ts"", ""fileContent"": """", ""projectRootPath"": ""/home/skyler/source/side-projects/slow-copilot"", ""scriptKindName"": ""TS"" }, { ""file"": ""^/chat-editing-text-model/ts-nul-authori…",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/stweedie,https://github.com/microsoft/vscode/issues/260664#issuecomment-3186001302,"repo: microsoft/vscode | issue: Copilot takes a long time initializing ""vue-typescript-plugin-pack"" | keyword: workaround"
"I updated our code to not sync `chat-editing-text-model` files as a workaround. However it sounds like the root cause may in the vue extension. `chat-editing-text-model` is just one example of a loose file that VS Code can work with. TypeScript plugins need to support these If you can confirm this bug only happens when the vue extension is enabled, please file an issue against them so they can investigate",,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/mjbvz,https://github.com/microsoft/vscode/issues/260664#issuecomment-3197922961,"repo: microsoft/vscode | issue: Copilot takes a long time initializing ""vue-typescript-plugin-pack"" | keyword: workaround"
"Gemini API - Invalid Authorization header Type: <b>Bug</b> I am using my own Gemini API key. After setup, it allows one request, but subsequent requests return an error: Sorry, your request failed. Please try again. Request id: 71fe0a3a-2022-464b-9775-e2bdf04e0c19 Reason: Request Failed: 400 [{ ""error"": { ""code"": 400, ""message"": ""Invalid Authorization header."", ""status"": ""INVALID_ARGUMENT"" } } ] Workaround: Reconfigure the API key. It works for one other request. Extension version: 0.30.0 VS Co…",,,,,,Anecdotal,issue,,,,,,,,2025-08-10,github/abluejay-piyo,https://github.com/microsoft/vscode/issues/260825,repo: microsoft/vscode | keyword: workaround | state: closed
"I also had a similar issue. After applying for a new API Key in Google AI Studio, the problem was resolved. I suggest you try the same method, regenerate the API Key, and reconfigure it. I hope this helps you solve the problem.",,,,,,Anecdotal,comment,,,,,,,,2025-08-10,github/pztsdy,https://github.com/microsoft/vscode/issues/260825#issuecomment-3172663139,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"Hi, the same thing happened to me. I changed the API key and the same thing happened — it didn’t fix it. Is there anything else I should do?",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/gfmarco,https://github.com/microsoft/vscode/issues/260825#issuecomment-3172985349,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"Reason: Request Failed: 400 [{ ""error"": { ""code"": 400, ""message"": ""Invalid Authorization header."", ""status"": ""INVALID_ARGUMENT"" I can confirm it too.",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/andlungeanu,https://github.com/microsoft/vscode/issues/260825#issuecomment-3173915110,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
I'm having trouble reproducing this but I have deployed an attempted fix in VS Code insiders. Can you try it there and report back?,,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/lramos15,https://github.com/microsoft/vscode/issues/260825#issuecomment-3179769418,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"@lramos15 I'm having the same issue, even with the latest VS Code Insiders. However, I found the workaround to make it work by triggering `Developer: Reload Window` FYI, it happens to me when using my own Gemini key for both models. ``` Version: 1.104.0-insider Commit: 97bc9a439c022a88fba7be68f67e068361f6c467 Date: 2025-08-12T17:22:21.373Z (4 hrs ago) Electron: 37.2.3 ElectronBuildId: 12035395 Chromium: 138.0.7204.100 Node.js: 22.17.0 V8: 13.8.500258-electron.0 OS: Darwin arm64 24.5.0 ``` <img …",,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/TC-X,https://github.com/microsoft/vscode/issues/260825#issuecomment-3181189913,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"I'm not sure if this is related, but I'm always getting these errors as well, but this case `Developer: Reload Window` won't help. Only when using my own Gemini key for both models. ``` Sorry, your request failed. Please try again. Request id: 0631590a-4c4e-46ac-9507-46430fa6b89b Reason: Response contained no choices. ``` <img width=""591"" height=""858"" alt=""Image"" src=""https://github.com/user-attachments/assets/be519a71-db9f-4cae-bfd3-d4a92bdceed8"" />",,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/TC-X,https://github.com/microsoft/vscode/issues/260825#issuecomment-3181207655,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"> Make sure your project matches, the project where the API key came from. Could you elaborate? I don't really understand 😓",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/MarkTheRobloxGuy,https://github.com/microsoft/vscode/issues/260825#issuecomment-3184365781,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"When you're in VS code on the bottom left, to the right of the fork there is a little cloud, make sure it matches the project you got your API key from in google cloud. It will be on the top left center of google cloud. Though i did this it worked, but its been intermittent still but better.",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/zcamper,https://github.com/microsoft/vscode/issues/260825#issuecomment-3185202413,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"> [@TC-X](https://github.com/TC-X) And you're on the latest copilot chat pre-release? @lramos15 Oh, I was on the Insiders but with the `release version` earlier. I just tried the `pre-release version` now; it seems like I don't get the `INVALID_ARGUMENT` error anymore. But I'm still randomly getting `Reason: Response contained no choices.` though. ``` Version: 1.104.0-insider Commit: 95db854cd8dd72aeea01ae3ca2b10a3323435c00 Date: 2025-08-13T05:05:10.751Z Electron: 37.2.3 ElectronBuildId: 120353…",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/TC-X,https://github.com/microsoft/vscode/issues/260825#issuecomment-3189898895,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"Same problem, seems something ""times out"" and resets when you reload the window. The error on timeout is always `Reason: Request Failed: 400 [{ ""error"": { ""code"": 400, ""message"": ""Invalid Authorization header."", ""status"": ""INVALID_ARGUMENT"" } } ]` Seems to timeout after 2-5min in my case, seems to be a problem of how the copilot extension handles the connection. EDIT: disabling the Github copilot extension and enabling it again also works, so.. its the extension..",,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/tekert,https://github.com/microsoft/vscode/issues/260825#issuecomment-3190386686,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"@lramos15 Can confirm the insiders release fixes the auth header error (Gemini). Thanks! The ""Response contained no choices"" error is persisting occasionally still. Happens about 1 out of 5-10 requests. Clicking ""Try again"" does work when it fails with this error though.",,,,,,Anecdotal,comment,,,,,,,,2025-08-16,github/chris-mcdonald-dev,https://github.com/microsoft/vscode/issues/260825#issuecomment-3193453524,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"Closing since the Gemini auth issue is solved. Something to note about Gemini BYOK, is we currently use the [OAI compatbile endpoint](https://ai.google.dev/gemini-api/docs/openai) for Gemini which can be pretty finnicky. For example when Gemini makes multiple tool calls this appears to fail due to the lack of tool calling ids. Copilot Chat will likely need to switch to the vertex API at some point which would fix many of the other issues being seen",,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/lramos15,https://github.com/microsoft/vscode/issues/260825#issuecomment-3196775454,repo: microsoft/vscode | issue: Gemini API - Invalid Authorization header | keyword: workaround
"Auto-approve terminal command execution in Copilot Agent Mode Currently, when using GitHub Copilot Chat Agent Mode, users are prompted to manually approve the action by clicking the Continue button. It would be great to have a setting or toggle that allows trusted commands to be automatically executed without manual confirmation, especially for repetitive or non-destructive actions ![Image](https://github.com/user-attachments/assets/2dd086fb-57f2-4fa3-b5f8-40eef217d0c7)",,,,,,Anecdotal,issue,,,,,,,,2025-04-01,github/PawiX25,https://github.com/microsoft/vscode/issues/252496,repo: microsoft/vscode | keyword: workaround | state: closed
"I agree it would be very useful to **whitelist patterns** of commands. I generally don't want the AI to be able to run commands without my supervision, but some commands are just fine, and having to confirm them every single time breaks the flow a lot. For example, my agent builds the project on every task to check for errors, and it makes several errors per task. Having to be constantly approving the build command is so disruptive.",,,,,,Anecdotal,comment,,,,,,,,2025-04-05,github/sergiocarneiro,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008392256,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"This is available in [Cline](https://cline.bot/) and Roo Code, it would be great to see it in Copilot as well. <img width=""665"" alt=""Image"" src=""https://github.com/user-attachments/assets/0cd58b8f-8ceb-4ff3-8b83-7c62c0b5f3a1"" /> <img width=""658"" alt=""Image"" src=""https://github.com/user-attachments/assets/f9b2600f-3fb4-4073-8bba-6c43f4e10209"" /> <img width=""666"" alt=""Image"" src=""https://github.com/user-attachments/assets/d0609c90-815c-45b6-91e6-746ac2fc8744"" />",,,,,,Anecdotal,comment,,,,,,,,2025-04-13,github/sammcj,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008392783,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
I was able to do this by explicitly telling the agent to use desktop-commander (mcp) - execute_command for all commands and not the built-in tool. Def not a fix but at least it's a work around.,,,,,,Anecdotal,comment,,,,,,,,2025-04-14,github/Hakaze,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008392915,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
> I was able to do this by explicitly telling the agent to use desktop-commander (mcp) - execute_command for all commands and not the built-in tool. Def not a fix but at least it's a work around. Did you create an instruction for this or do you have to write it in every prompt?,,,,,,Anecdotal,comment,,,,,,,,2025-04-16,github/JoanComasFdz,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008392930,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"I noticed that when using Gpt-4 as the model it just keeps stopping and you have to write ""continue"" to get it to continue. If you chose Claude, it keeps presenting a CONTINUE button. I wish it would have an option to auto approve like with Cline, because thats a whole other experience. I'll try the desktop-commander workaround, thanks.",,,,,,Anecdotal,comment,,,,,,,,2025-04-17,github/galori,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008392946,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"I bet AI users come together and make the very first set of ""Version1"" packages. They test the hell out of everything to make sure there's nothing broken with it at all, and if there is because of certain OS or software, then there's a Verson1 made of that to be compatible with the Version1 of everything else.",,,,,,Anecdotal,comment,,,,,,,,2025-04-18,github/tannerbroberts,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008392988,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"Actually, I am finding that o4-mini (Preview) is behaving much better from this perspective. it will complete tasks much better without asking for confirmation repeatedly.",,,,,,Anecdotal,comment,,,,,,,,2025-04-18,github/danielcor,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393001,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"Hey all—hit the same “Continue” pause headache, so I whipped up a quick console‑paste hack that auto‑clicks Continue in Agent Mode. No extensions needed—just paste in VS Code DevTools. https://github.com/PawiX25/copilot-auto-continue/blob/main/README.md",,,,,,Anecdotal,comment,,,,,,,,2025-04-21,github/PawiX25,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393014,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"I've since discovered that Cline can use Github Copilot models as it's ""backend"" if you select API Provider = ""VS Code LM API"", and then it lets you select any of the Copilot models. @PawiX25 that is excellent, thank you. How about having it also click on ""Keep"" for auto-approving edits?",,,,,,Anecdotal,comment,,,,,,,,2025-04-23,github/galori,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393068,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"Hi @galori — thanks for the tip! I’ve noticed that when I select “VS Code LM API” as the provider, some models (e.g. Sonnet 3.7) show up in Copilot Agent Mode but then the API call just fails with an error. In my testing so far I can only actually invoke: Gemini 2.5 Pro GPT-4o GPT-4.1 …but anything else (Claude 3.7, 3.5, etc.) never returns a valid response. I’m not sure yet whether that’s on the VS Code LM API side or something Cline needs to add. I’ll share my “auto-click Keep” snippet once I…",,,,,,Anecdotal,comment,,,,,,,,2025-04-23,github/PawiX25,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393079,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"> For me, the ""Always approve allowed execute operations"" is a good solution. That would be like the ""Trust"" (t) option in Claude Code or Amazon Q...",,,,,,Anecdotal,comment,,,,,,,,2025-04-23,github/loretoparisi,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393105,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
I discovered you can actually accomplish this today with the experimental setting `chat.tools.autoApprove`. See https://visualstudiomagazine.com/articles/2025/04/04/vs-code-v1-99-is-all-about-copilot-chat.aspx.,,,,,,Anecdotal,comment,,,,,,,,2025-04-23,github/tjcorr,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393137,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"> I discovered you can actually accomplish this today with the experimental setting `chat.tools.autoApprove`. See [visualstudiomagazine.com/articles/2025/04/04/vs-code-v1-99-is-all-about-copilot-chat.aspx](https://visualstudiomagazine.com/articles/2025/04/04/vs-code-v1-99-is-all-about-copilot-chat.aspx). Yes this works, but this allows it to run everything. That's usually a very bad idea, it very often goes out of control 😅",,,,,,Anecdotal,comment,,,,,,,,2025-04-24,github/dvcrn,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393237,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"I found a workaround. Just ask copilot to create vscode tasks based on your package.json and then tell it to prefer using those tasks instead of npm run, pnpm run, etc. vscode tasks won't ask for permissions and will just be executed. At the same time since those are well defined they should be save to use. For example a task that is only executing `pnpm run test` seems pretty save to me. It looks like this: ![Image](https://github.com/user-attachments/assets/bb9004bd-4b2f-4fb3-a819-58a189640f1…",,,,,,Anecdotal,comment,,,,,,,,2025-05-02,github/Wandang,https://github.com/microsoft/vscode/issues/252496#issuecomment-3008393268,repo: microsoft/vscode | issue: Auto-approve terminal command execution in Copilot Agent Mode | keyword: workaround
"Allow for transparent / vibrant window theme ![image](https://user-images.githubusercontent.com/5620073/29191214-a775c87e-7e25-11e7-83e1-39eadbce7851.png) Maybe it can be enabled with `{ transparent: true, vibrancy: 'dark' }` ? https://github.com/electron/electron/pull/7898 — Vibrancy PR https://electron.atom.io/docs/api/frameless-window/#transparent-window",,,,,,Anecdotal,issue,,,,,,,,2017-08-10,github/sergeysova,https://github.com/microsoft/vscode/issues/32257,repo: microsoft/vscode | keyword: workaround | state: closed
"This is amazing. I'm not sure if something like this would be able to achieved on Windows as well (it might just take a lot more effort than MacOS), but it would fit in with the new Fluent Design System.",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-321731886,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"@LestaD do you have a working prototype of what you suggested via `{ transparent: true, vibrancy: 'dark' }` ?",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/bpasero,https://github.com/microsoft/vscode/issues/32257#issuecomment-321771323,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"@LestaD so far I was not able to use the vibrancy effect of Electron, could also be related to the fact that we are not on latest Electron.",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/bpasero,https://github.com/microsoft/vscode/issues/32257#issuecomment-321807498,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
@bpasero I enabled vibrancy in VSCode 1.15 `wnd.setVibrancy('dark')`: ![image](https://user-images.githubusercontent.com/5620073/29230839-68171110-7eed-11e7-8306-741ac79e2112.png) `wnd.setVibrancy('ultra-dark')` ![image](https://user-images.githubusercontent.com/5620073/29230914-ab36e72c-7eed-11e7-897d-3f3640719832.png),,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321912672,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"```js // Open devTools in any vscode window wnds = electron.remote.BrowserWindow.getAllWindows() win = new electron.remote.BrowserWindow({ width: 600, height: 500, frame: false, transparent: true, vibrancy: 'dark', show: false }) // with wnds[0].getURL() find any window with title != ""Code"" source = wnds[1] win.loadURL(source.getURL()) win.show() // next open and undock DevTools win.openDevTools() ``` Next with `Elements` tab add that style before `</body>`: ```html <style> .monaco-shell, .mona…",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321915221,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
## Dark ![image](https://user-images.githubusercontent.com/5620073/29232222-2555b830-7ef3-11e7-8a0a-a75758911e20.png),,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321920519,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
## Ultra Dark ![image](https://user-images.githubusercontent.com/5620073/29232225-2a8ab79c-7ef3-11e7-90b0-6af627318739.png),,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321920630,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"I tried this on Windows and unfortunately it doesn't work (so Electron's API for this must still be supported on only MacOS). However I did find an npm package named [`electron-vibrancy`](https://github.com/arkenthera/electron-vibrancy) that supports Windows 10 and got the following results: ![image](https://user-images.githubusercontent.com/18223213/29234148-e3a05c2c-7ea9-11e7-95d6-67a73ae6e8b3.png) I had to disable the window frame because the vibrancy effect doesn't play well with it, so if …",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-321933035,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"@LestaD followed your steps and cannot make it work, care to open a PR for me to test it out? Do I need to enable something in macOS to see it?",,,,,,Anecdotal,comment,,,,,,,,2017-08-12,github/bpasero,https://github.com/microsoft/vscode/issues/32257#issuecomment-321963984,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"@rianadon that's because it's using the undocumented `SetWindowCompositionAttribute` function in Windows. No you can't have a higher blur radius. BTW what you suggest is missing shadows, and you can't resize it by grabbing the window borders because you used `transparent: true`. Here's an example with Discord: ![](https://files.charlesmilette.net/V400KmE.png) If you look near the Explorer window, you can see the shadow is still there. The window was created with the following options: ```js var…",,,,,,Anecdotal,comment,,,,,,,,2017-09-23,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-331663738,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"@sylveon My experiment was not a suggestion on the way VS Code should implement this; it was only to see if such a vibrancy effect was possible on Windows. I used `electron-vibrancy` as my Electron and Windows API knowledge is quite limited. But as you said it has a few major shortcomings, so, should this be done well, using it wouldn't be a good idea. I tried using options similar to what you suggested to get the effect with shadows, but for some reason the background of the window becomes sol…",,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333356661,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Unfortunately since this is a modification of Discord (a closed-source program), sharing the source code would potentially lead me into trouble. The background is solid black until you call SetWindowCompositionAttribute on it, only after it will become blurred: ![gif](https://user-images.githubusercontent.com/6440374/31055849-41fa7266-a697-11e7-9dcf-51e005d488aa.gif) The program I used in my GIF comes from here: http://glass8.eu/files/SetWindowCompositionAttribute.7z Electron version of my Disc…",,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333382405,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
Gotcha. It turns out I set the opacity of some elements to 80% and the dark color of the blur combined with the opacity made everything look black. Changing the blur color to 0x00000000 did the trick. However I still had to use 80% opacities to color the blur as setting the body background color to something with 0 opacity didn't change anything. Thanks for the help. I'd still have to wait for one of the many Windows custom titlebar issues to reach a consensus to do any more with this though.,,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333392254,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Yeah a custom titlebar is required, because blur doesn't plays well with non-borderless windows: ![image](https://user-images.githubusercontent.com/6440374/31057177-46784fe2-a6ac-11e7-9bf5-058bdbc33e58.png)",,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333392447,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Since it seems it will take a while for a consensus to be reached on what kind of titlebar VS Code should have, I went with the Metro app style and incorporated the color that's shown on macOS currently (since I was modifying the existing macOS custom titlebar anyways): ![image](https://user-images.githubusercontent.com/18223213/33155010-7f93921e-cfa1-11e7-9013-1552aec3e23e.png) @bpasero if this looks good I could write a PR for the titlebar on Windows. Or would it be better to wait for one of …",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-346511556,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Depending on how node-gyp is complex (I never used it), I could try getting a PR for blur on Windows working after that. BTW @rianadon looks nice :)",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-346517957,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"### Light ![Light theme](https://user-images.githubusercontent.com/6258309/33913127-9b164264-df66-11e7-8fd6-0ad5355d5a4d.png ""Light theme"") <p><details><summary>Colors:</summary> <ul><li>Active title bar: <code>rgba(0, 0, 0, 0.1)</code></li> <li>Activity Bar: <code>rgba(0, 0, 0, 0.4)</code></li> <li>Sidebar, Tab container: <code>transparent</code></li> <li>Inactive tab: <code>rgba(255, 255, 255, 0.25)</code> (not exactly sure how I feel about it though)</li> </ul> </details></p> --- I like wher…",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/easyaspi314,https://github.com/microsoft/vscode/issues/32257#issuecomment-351226214,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
I think this should follow the acrylic material guidelines: https://docs.microsoft.com/en-us/windows/uwp/design/style/acrylic,,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/patrys,https://github.com/microsoft/vscode/issues/32257#issuecomment-358937418,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Unfortunately, the Fluent transparency effect is not available for Win32 apps right now. Insider Build 17063 does have it, and I can use it fine on Terminus, another Electron app: ![](https://charles.getsharex.com/ApplicationFrameHost_caE9E0.png) It also is buggy right now, so I'd wait for it to get more stable before trying anything. The fact it's only available on 17063 or higher means we would need to use the old blur effect on older versions (which is also still available in 17063). So in m…",,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-358965359,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
@sylveon I'm aware that it's currently only officially exposed in the insiders build. I'm not sure it's worth implementing a workaround though as it seems the panel could easily remain solid on machines that don't support the new properties and it's quite possible that by the time this change is released in VS Code the platform API will already hit the stable channel.,,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/patrys,https://github.com/microsoft/vscode/issues/32257#issuecomment-358973532,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Changing the effect type is just [changing the value of an enum](https://pastebin.com/z0G8HUBB), so it isn't really a workaround, just a configuration option. Also nothing is official or an API, the method used to reach this effect is undocumented and will probably remain so. Also Microsoft, if you're reading this, please document this/expose it in a documented API. The potential of it is awesome, and could easily gain a lot of users (AMD themselves are also relying on this undocumented stuff f…",,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-358981313,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"That fluent effect looks great @sylveon! Both this effect and the pre-17063 use undocumented APIs, so as I see it there shouldn't be much difference between them. It should be easy enough to support both.",,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-359146942,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Yeah, it's easy enough to support blur, fluent and regular transparency all at the same time. Just change the value of an enum between `ACCENT_ENABLE_TRANSPARENTGRADIENT` (just transparent), `ACCENT_ENABLE_BLURBEHIND` (old blur effect) and `ACCENT_ENABLE_FLUENT` (fluent effect) when applying the effect. If the user disables it, just apply `ACCENT_DISABLED` to return to normal effect-less behavior. See the pastebin I posted yesterday.",,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-359172922,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"👀 ![](https://files.charlesmilette.net/Code%20-%20OSS_tV3ylZ.png) ![](https://charles.getsharex.com/Code%20-%20OSS_IyRl01.png) ![](https://charles.getsharex.com/Code%20-%20OSS_sb9bNF.png) Now that I've got the base working, having it on macOS shouldn't be an issue. Instead of setting thickFrame to true and changing the composition attribute, set vibrancy and transparent to true. The rest should be completely platform-independent.",,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-359190092,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Windows design guidelines suggest having two panels set to 80% and 60%, would that work here for the action bar and the explorer pane?",,,,,,Anecdotal,comment,,,,,,,,2018-01-21,github/patrys,https://github.com/microsoft/vscode/issues/32257#issuecomment-359245465,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: workaround
"Orchestrator/Subagent system for task decomposition and delegation to isolated modes Workflow similar to the idea of _Orchestrator Mode_, a specialized workflow coordination system in Roo-Code that enables complex task decomposition and delegation. Unlike other modes that directly manipulate files or execute commands, Orchestrator mode operates as a strategic coordinator, breaking down complex requests into subtasks and delegating them to appropriate specialized modes.",,,,,,Anecdotal,issue,,,,,,,,2025-06-30,github/digitarald,https://github.com/microsoft/vscode/issues/253085,repo: microsoft/vscode | keyword: checklist | state: open
What would VS Code need for this? - Create a sub-task in a certain mode. Is this a new ChatModel or do we keep a flat ChatModel with messages tagged as being part of a sub-task? Maybe it's a ChatModel that contains other ChatModels. Is the sub-task history ever relevant after the sub-task is done? - There is input (the first user message in the new session) and output (an agentic turn must end with a tool call or special output shape containing the result to report back to the previous mode) - …,,,,,,Anecdotal,comment,,,,,,,,2025-07-07,github/roblourens,https://github.com/microsoft/vscode/issues/253085#issuecomment-3043203083,repo: microsoft/vscode | issue: Orchestrator/Subagent system for task decomposition and delegation to isolated modes | keyword: checklist
"https://x.com/sidbidasaria/status/1948495478146167251 Claude Custom Subagents Aka Roo Code's Orchestrator, but simpler. **[Docs](https://docs.anthropic.com/en/docs/claude-code/sub-agents):** Sub agents are pre-configured AI personalities that Claude Code can delegate tasks to. Each sub agent: - Has a specific purpose and expertise area - Uses its own context window separate from the main conversation - Can be configured with specific tools it’s allowed to use - Includes a custom system prompt t…",,,,,,Anecdotal,comment,,,,,,,,2025-07-25,github/digitarald,https://github.com/microsoft/vscode/issues/253085#issuecomment-3115890898,repo: microsoft/vscode | issue: Orchestrator/Subagent system for task decomposition and delegation to isolated modes | keyword: checklist
"This may also be relevant: https://opencode.ai/docs/agents/ Would be super useful to have a flow like this. For instance, in workflows that require the agent to do similar things for a list of documents or something (e.g., PR checks), if the list is non-trivial the conversation gets bloated, whereas it would be good to process each item independently and just report a result back to the main conversation.",,,,,,Anecdotal,comment,,,,,,,,2025-08-05,github/bepuca,https://github.com/microsoft/vscode/issues/253085#issuecomment-3153863265,repo: microsoft/vscode | issue: Orchestrator/Subagent system for task decomposition and delegation to isolated modes | keyword: checklist
"This would be useful, as one custom mode cannot handle different kinds of tasks. Different models with different instructions are needed per task.",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/deyil,https://github.com/microsoft/vscode/issues/253085#issuecomment-3165665049,repo: microsoft/vscode | issue: Orchestrator/Subagent system for task decomposition and delegation to isolated modes | keyword: checklist
It’s even super useful without with a single non-orchestrator mode. Having nested conversations to manage context bloat is huge. The other thing very related that Roo is doing well right now is the todo tasks. Basically when you strip it down just built in prompting for the orchestrator to ensure that it creates a structured list of subtasks before dispatching and keeping it up to date as progress is made. Updating the todo list is a tool call as an easy way to leverage existing approval mechan…,,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/jcaplan,https://github.com/microsoft/vscode/issues/253085#issuecomment-3189310845,repo: microsoft/vscode | issue: Orchestrator/Subagent system for task decomposition and delegation to isolated modes | keyword: checklist
"Copilot Chat: chat summarization makes broken and bad edits <!-- Please search existing issues to avoid creating duplicates --> <!-- Please attach logs to help us diagnose your issue --> - Copilot Chat Extension Version: 0.30.2025080503 - VS Code Version: 1.103.0-insider (Universal) - OS Version: Darwin arm64 24.6.0 - Feature (e.g. agent/edit/ask mode): agent - Selected model (e.g. GPT 4.1, Claude 3.7 Sonnet): Claude Sonnet 4 - Logs: - Ping me directly for my captured `.copilotmd` files - pre-s…",,,,,,Anecdotal,issue,,,,,,,,2025-08-06,github/agreaves-ms,https://github.com/microsoft/vscode/issues/260188,repo: microsoft/vscode | keyword: checklist | state: open
"> Attach files that are being edited to the context of the conversation, WITHOUT truncation. This I don't believe is the right approach. My philosophy is that the agent should decide which context is relevant and load it. We should not fill it up with potentially junk tokens (although persisting more verbatim context as part of the summarization process is still something I'd like to do, it just never worked well in testing...) > Copilot should have the model rebuild some of its context before …",,,,,,Anecdotal,comment,,,,,,,,2025-08-06,github/roblourens,https://github.com/microsoft/vscode/issues/260188#issuecomment-3161883919,repo: microsoft/vscode | issue: Copilot Chat: chat summarization makes broken and bad edits | keyword: checklist
"I've also noticed issues with chatt summarization, that despite having given clear and strong instructions it results in the quality decreasing sharply after this runs. the ai will revert its behavior to default, which for my tastes is 1. too scypahntic 2. makes too many assumptions 3. doesn't check docs or api schemas properly 4. overconfident this results in it making many many terrible mistakes in agent mode, guessing at api calls, instead of just looking up the relvant context and being abl…",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/BrettMoan,https://github.com/microsoft/vscode/issues/260188#issuecomment-3177084009,repo: microsoft/vscode | issue: Copilot Chat: chat summarization makes broken and bad edits | keyword: checklist
"Similar issues. You'll see this started with a 24 item todo list to work around already large issues with large files and edits and overzealous summarization/issues feeding edits to fast models. <img width=""242"" height=""62"" alt=""Image"" src=""https://github.com/user-attachments/assets/11fc8235-490b-46c8-9d9f-bd6f358242b4"" /> Has the thread, is doing the refactoring work Summarization happens, immediately decides only the next rule needed implemented, blows away TODO list as well. <img width=""911""…",,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/dochollidayxx,https://github.com/microsoft/vscode/issues/260188#issuecomment-3180407946,repo: microsoft/vscode | issue: Copilot Chat: chat summarization makes broken and bad edits | keyword: checklist
chat.mcp.serverSampling setting overwritten when using MCP: List Servers <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed:…,,,,,,Anecdotal,issue,,,,,,,,2025-08-08,github/kaheidt,https://github.com/microsoft/vscode/issues/260668,repo: microsoft/vscode | keyword: checklist | state: open
"build/npm: add explicit npm version validation in preinstall.js (mirrors Node.js check) # Summary This PR addresses issue [[#252372] by adding explicit npm version validation to the existing `build/npm/preinstall.js` script, following the maintainer preference outlined in the issue discussion. ## Changes Made - **This PR modifies only** `build/npm/preinstall.js`. - **Extended existing Node.js validation logic** in `build/npm/preinstall.js` to include npm version checking - **Added `VSCODE_SKIP_…",,,,,,Anecdotal,issue,,,,,,,,2025-08-10,github/ali90h,https://github.com/microsoft/vscode/pull/260848,repo: microsoft/vscode | keyword: checklist | state: open
"Fix: Add restart button to Running Extensions view (#250201) **Fixes #250201** ## Summary This PR adds the restart button functionality to the Running Extensions view, ensuring consistency with the main Extensions view behavior when disabling extensions. ## Problem When extensions are disabled from the Running Extensions view (View → Extensions → Show Running Extensions), no restart button appears to notify users that extensions need to be restarted. This is inconsistent with the main Extension…",,,,,,Anecdotal,issue,,,,,,,,2025-06-26,github/Ranvirdeshmukh,https://github.com/microsoft/vscode/pull/252462,repo: microsoft/vscode | keyword: checklist | state: open
Default keybinding `Ctrl+K F` (Close Workspace) does not trigger any command in VS Code 1.98.2 <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue h…,,,,,,Anecdotal,issue,,,,,,,,2025-03-30,github/krausality,https://github.com/microsoft/vscode/issues/245078,repo: microsoft/vscode | keyword: checklist | state: open
"Shift+Alt+D (which I've bound to ""Format document"") also doesn't trigger formatting in VSCode. Instead it triggers Darkreader's ""Toggle plugin"" action in Chrome?? System info: ``` Version: 1.98.2 Commit: ddc367ed5c8936efe395cffeec279b04ffd7db78 Date: 2025-03-12T13:32:45.399Z (2 wks ago) Browser: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Code/1.98.2 Chrome/132.0.6834.196 Electron/34.2.0 Safari/537.36 Arch Linux ```",,,,,,Anecdotal,comment,,,,,,,,2025-03-30,github/TheDevMinerTV,https://github.com/microsoft/vscode/issues/245078#issuecomment-2764694969,repo: microsoft/vscode | issue: Default keybinding `Ctrl+K F` (Close Workspace) does not trigger any command in VS Code 1.98.2 | keyword: checklist
"> Shift+Alt+D (which I've bound to ""Format document"") also doesn't trigger formatting in VSCode. Instead it triggers Darkreader's ""Toggle plugin"" action in Chrome?? > > System info: > > ``` > Version: 1.98.2 > Commit: ddc367ed5c8936efe395cffeec279b04ffd7db78 > Date: 2025-03-12T13:32:45.399Z (2 wks ago) > Browser: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Code/1.98.2 Chrome/132.0.6834.196 Electron/34.2.0 Safari/537.36 > > Arch Linux > ``` That sounds like a separate …",,,,,,Anecdotal,comment,,,,,,,,2025-03-30,github/krausality,https://github.com/microsoft/vscode/issues/245078#issuecomment-2764725608,repo: microsoft/vscode | issue: Default keybinding `Ctrl+K F` (Close Workspace) does not trigger any command in VS Code 1.98.2 | keyword: checklist
"Allow preset in msp.com for which servers and specific tools are enabled Seen as top request for some popular servers, like https://github.com/AgentDeskAI/browser-tools-mcp/issues/71 Some servers (GitHub, Playwrigh for example in my testing) provide a long list of tools and I want to set my preference once when I only need a few tools. This might not align with BS Code's config principles, but this is just a draft idea for having a boolean to enable/disable and an array to cover tools (might ne…",,,,,,Anecdotal,issue,,,,,,,,2025-03-17,github/digitarald,https://github.com/microsoft/vscode/issues/243714,repo: microsoft/vscode | keyword: checklist | state: open
I still think the idea of support toolsets in prompt.md like we discussed a bit previously is better than an enablement in approach in this way.,,,,,,Anecdotal,comment,,,,,,,,2025-03-17,github/connor4312,https://github.com/microsoft/vscode/issues/243714#issuecomment-2729906592,repo: microsoft/vscode | issue: Allow preset in msp.com for which servers and specific tools are enabled | keyword: checklist
"Added Support Of /dir/file_path.txt, <line> link format #217927 <!-- Thank you for submitting a Pull Request. Please: * Read our Pull Request guidelines: https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests * Associate an issue with the Pull Request. * Ensure that the code is up-to-date with the `main` branch. * Include a description of the proposed changes and how to test them. --> This Pull Request adds support for file paths in the format /dir/file_path.txt, <line> (with …",,,,,,Anecdotal,issue,,,,,,,,2024-09-27,github/vp007-dev,https://github.com/microsoft/vscode/pull/229964,repo: microsoft/vscode | keyword: checklist | state: open
Did you use AI to generate the PR description? You say you tested it locally and added a unit test but neither can be true as it would give a runtime error?,,,,,,Anecdotal,comment,,,,,,,,2024-09-27,github/Tyriar,https://github.com/microsoft/vscode/pull/229964#issuecomment-2379746691,"repo: microsoft/vscode | issue: Added Support Of /dir/file_path.txt, <line> link format #217927 | keyword: checklist"
> Did you use AI to generate the PR description? You say you tested it locally and added a unit test but neither can be true as it would give a runtime error? Yes i did use AI to generate description because i am bad at grammar so i just explained my work and it gave me a description so i edited the description a little bit so yeah AI can ruin work I am having errors in my local machine for no reasons i spent hours to build vs code but it gives error in my system and i think its because of some…,,,,,,Anecdotal,comment,,,,,,,,2024-09-28,github/vp007-dev,https://github.com/microsoft/vscode/pull/229964#issuecomment-2380377484,"repo: microsoft/vscode | issue: Added Support Of /dir/file_path.txt, <line> link format #217927 | keyword: checklist"
> Did you use AI to generate the PR description? You say you tested it locally and added a unit test but neither can be true as it would give a runtime error? Yes i did use AI to generate description because i am bad at grammar so i just explained my work and it gave me a description so i edited the description a little bit so yeah AI can ruin work I am having errors in my local machine for no reasons i spent hours to build vs code but it gives error in my system and i think its because of some…,,,,,,Anecdotal,comment,,,,,,,,2024-09-28,github/vp007-dev,https://github.com/microsoft/vscode/pull/229964#issuecomment-2380380383,"repo: microsoft/vscode | issue: Added Support Of /dir/file_path.txt, <line> link format #217927 | keyword: checklist"
"@vp007-dev no problem, just it had incorrect information. You don't need perfect grammar, just `Closes #217927` would have been fine in this case. Instructions to set up are [here](https://github.com/microsoft/vscode/wiki/How-to-Contribute). I can try help if you give an error but I'm often busy so don't respond too often.",,,,,,Anecdotal,comment,,,,,,,,2024-09-28,github/Tyriar,https://github.com/microsoft/vscode/pull/229964#issuecomment-2380640245,"repo: microsoft/vscode | issue: Added Support Of /dir/file_path.txt, <line> link format #217927 | keyword: checklist"
**### Error!:** ![adawdwadawdawd](https://github.com/user-attachments/assets/461cd25b-3362-4410-86fc-b20a39162595) and yes i have installed and tried everything here: ![awdawdadwa](https://github.com/user-attachments/assets/14d557a3-1458-40b3-9bc9-5acc8a15e0c8) and i also tried that msvs_version thing i edited the config file still no good,,,,,,Anecdotal,comment,,,,,,,,2024-09-30,github/vp007-dev,https://github.com/microsoft/vscode/pull/229964#issuecomment-2383603959,"repo: microsoft/vscode | issue: Added Support Of /dir/file_path.txt, <line> link format #217927 | keyword: checklist"
"I've never seen that one. I guess the first thing I'd try is look at the problem file it's talking about and seeing if it does indeed lack a `main` property. Make sure you're on a relatively new version of VS Code as well (the resolve conflicts button in on this page), if this branch is too old it might have some weird stuff related to our AMD -> ESM migration.",,,,,,Anecdotal,comment,,,,,,,,2024-10-16,github/Tyriar,https://github.com/microsoft/vscode/pull/229964#issuecomment-2417979872,"repo: microsoft/vscode | issue: Added Support Of /dir/file_path.txt, <line> link format #217927 | keyword: checklist"
"""Open with Code - Insiders"" is not available <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.c…",,,,,,Anecdotal,issue,,,,,,,,2023-01-21,github/omidshojaee,https://github.com/microsoft/vscode/issues/171911,repo: microsoft/vscode | keyword: checklist | state: open
"To solve this, I modified the registries of the stable vs code and made it open vs code-insiders. It works great and the icon is also there so yeah, you need to add 4 files to the registry in different locations so HKEY_CLASSES_ROOT so I will just send you the file that will do it for you. Paste the codes to the file names and be sure to add the **.reg** extension next to it. 1. name: all.reg. This will add it to the * in the HKEY_CLASSES_ROOT ``` Windows Registry Editor Version 5.00 [HKEY_CLAS…",,,,,,Anecdotal,comment,,,,,,,,2023-02-24,github/ITSUREN,https://github.com/microsoft/vscode/issues/171911#issuecomment-1443514880,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Just for clarification, has https://github.com/microsoft/vscode/issues/127365 now rolled out into stable?",,,,,,Anecdotal,comment,,,,,,,,2023-03-18,github/retroNUC,https://github.com/microsoft/vscode/issues/171911#issuecomment-1474864857,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Is way to add it to the main menu and not the ""Show more options"" menu? @ITSURENXD Also, @retroNUC It seems like this is still only in Insiders and not in the Stable release. When does this come into the stable release? Is there any registry hack to achieve the same, I have wasted about 3 hours trying to find a way but found no way which can bring it into the Primary menu. I even looked at registries of VSCode Insider, where I find an entry `Computer\HKEY_CURRENT_USER\Software\Classes\VSCodeIns…",,,,,,Anecdotal,comment,,,,,,,,2023-07-02,github/sanidhyas3s,https://github.com/microsoft/vscode/issues/171911#issuecomment-1616571939,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
Windows 11 is released more than 2 years ago. Millions of programs successfully integrate with the new context menu and VSCode still fails. I'm not going to implement the workaround suggested in #183297 because 1) It's a workaround 2) I should not be forced to tweak my machine for something as basic as integrating with context menu 3) #127365 is closed as fixed. It is not fixed. I opened this issue for 1.75.0-insider. I'm now on 1.84.0-insider and still have it.,,,,,,Anecdotal,comment,,,,,,,,2023-10-27,github/omidshojaee,https://github.com/microsoft/vscode/issues/171911#issuecomment-1783121942,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"On my machine, ""Open with Code Insiders"" actually works, but for the stable VS Code it still doesn't. 😵‍💫 Installed versions are 1.84.0-insider (user setup) and 1.84.0 (user setup) on Windows 11 Pro 22H2.",,,,,,Anecdotal,comment,,,,,,,,2023-11-02,github/lgk-bsw,https://github.com/microsoft/vscode/issues/171911#issuecomment-1790246372,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"fresh windows 11 pro, windows insiders beta channel enabled, then fresh install of vscode insiders 1.85.0 and the ""Open with Code Insiders"" still not available on Windows 11 context menu: ![image](https://github.com/microsoft/vscode/assets/7363029/2ede0148-afe3-47f6-88d4-728fd1c28db9)",,,,,,Anecdotal,comment,,,,,,,,2023-11-06,github/carlosrmendes,https://github.com/microsoft/vscode/issues/171911#issuecomment-1795013815,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Unbelievable how this is still not resolved... Is it really that hard for an app from Microsoft itself to fix an issue for a feature where many other applications from other vendors can do it easily? It's really frustrating having to open VSCode first in order to then open any folder, instead of opening the folder directly in VSCode from the Explorer.",,,,,,Anecdotal,comment,,,,,,,,2023-12-12,github/carlosrmendes,https://github.com/microsoft/vscode/issues/171911#issuecomment-1851833984,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
This is the email address of the developer of Notepad++: don.h@free.fr Please contact him so he can teach you how to solve this problem!,,,,,,Anecdotal,comment,,,,,,,,2024-01-05,github/omidshojaee,https://github.com/microsoft/vscode/issues/171911#issuecomment-1878926293,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Sorry for the delay here, as a next step please capture an event trace following the steps below * Uninstall current copy of VS Code insiders from the device * Download and keep the VS Code insiders installer ready * Open `Windows Performance Recorder` from the OS start menu, if you don't have it installed set it up following the instructions [here](https://learn.microsoft.com/en-us/windows-hardware/test/wpt/windows-performance-recorder#where-to-get-windows-performance-recorder) * Download the …",,,,,,Anecdotal,comment,,,,,,,,2024-01-09,github/deepak1556,https://github.com/microsoft/vscode/issues/171911#issuecomment-1882892289,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Hello, ![image](https://github.com/microsoft/vscode/assets/31741561/f238a433-b1eb-40b8-b9eb-7db8d29b9192) ![image](https://github.com/microsoft/vscode/assets/31741561/0a6affe5-1471-4737-8dcc-890b070cd285)",,,,,,Anecdotal,comment,,,,,,,,2024-01-09,github/omidshojaee,https://github.com/microsoft/vscode/issues/171911#issuecomment-1883025233,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"I just installed `VSCodeSetup-x64-1.86.0-insider.exe` and got the desired W11 context menu. (System installer, x64) It also worked just fine for me with `VSCodeUserSetup-x64-1.86.0-insider` (User installer, x64) after uninstalling the system app. Do you want traces of successful installs, @deepak1556, or just failing ones?",,,,,,Anecdotal,comment,,,,,,,,2024-01-11,github/cinderblock,https://github.com/microsoft/vscode/issues/171911#issuecomment-1886236335,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"@cinderblock need traces only for the failing scenarios. @omidshojaee not sure what the issue is, can you try reinstalling the latest `Windows performance recorder`",,,,,,Anecdotal,comment,,,,,,,,2024-01-11,github/deepak1556,https://github.com/microsoft/vscode/issues/171911#issuecomment-1886248807,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Haven't received any logs so far, are users still experiencing issue with latest insiders where context menu does not show up after installation ? Please note, this issue is about the issue with insiders and not stable.",,,,,,Anecdotal,comment,,,,,,,,2024-02-08,github/deepak1556,https://github.com/microsoft/vscode/issues/171911#issuecomment-1933625910,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"hi @deepak1556, I couldn't send you the logs yet because I'm facing the same issue as @omidshojaee, I'm getting the same error when I try to load the profile you sent into the Windows Perfomance Recorder (I've downloaded the latest version).",,,,,,Anecdotal,comment,,,,,,,,2024-02-09,github/carlosrmendes,https://github.com/microsoft/vscode/issues/171911#issuecomment-1935656082,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"email with the logs sent, despite the error, I was able to follow all the steps you indicated @deepak1556",,,,,,Anecdotal,comment,,,,,,,,2024-02-09,github/carlosrmendes,https://github.com/microsoft/vscode/issues/171911#issuecomment-1935674648,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"1.91.0-insiders, tested a fresh install on a new fresh windows 11 pc.... issues still occur... is it that difficult to solve this @deepak1556 ?",,,,,,Anecdotal,comment,,,,,,,,2024-06-12,github/carlosrmendes,https://github.com/microsoft/vscode/issues/171911#issuecomment-2162744011,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Hey, Have you tried to see if the stable version still has the open with vs code for people having problems with the vs code-insiders and vice versa? Try to install both into the system at once. If one of them works you can manually change the registry so that the registry files for the working one (stable in my case) so that it points to the executable of the non-working one (vs code insiders in my case). You can also change the text ""Open with vs code"" to ""Open with vs Code Insider"" And the l…",,,,,,Anecdotal,comment,,,,,,,,2024-06-14,github/ITSUREN,https://github.com/microsoft/vscode/issues/171911#issuecomment-2168275245,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
I tried the stable v1.90.1 and it didn't work. Although if it did work it wouldn't make any sense because the insider is ahead of stable and must provide all stable functionalities + new features.,,,,,,Anecdotal,comment,,,,,,,,2024-06-15,github/omidshojaee,https://github.com/microsoft/vscode/issues/171911#issuecomment-2169416924,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"Unless I'm mistaken, this issue is still waiting for traces of failed installs to determine why the context menu is not showing up for some. However, the users reporting the failed installs have been unable to add the requested traces because of errors setting up the traces. I believe I was able to get the traces, but my install was successful so the traces were undesired. Is it possible the issue preventing capturing traces is also causing the issue preventing the installation of the context m…",,,,,,Anecdotal,comment,,,,,,,,2024-07-05,github/cinderblock,https://github.com/microsoft/vscode/issues/171911#issuecomment-2209685402,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"> > Hello, > > ![image](https://private-user-images.githubusercontent.com/31741561/295213504-f238a433-b1eb-40b8-b9eb-7db8d29b9192.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjAxNDA0NzAsIm5iZiI6MTcyMDE0MDE3MCwicGF0aCI6Ii8zMTc0MTU2MS8yOTUyMTM1MDQtZjIzOGE0MzMtYjFlYi00MGI4LWI5ZWItN2RiOGQyOWI5MTkyLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJG…",,,,,,Anecdotal,comment,,,,,,,,2024-07-05,github/ITSUREN,https://github.com/microsoft/vscode/issues/171911#issuecomment-2210596725,"repo: microsoft/vscode | issue: ""Open with Code - Insiders"" is not available | keyword: checklist"
"MSIX installer After 2 years of conversation in issue #10759 (Release in the Windows Store) I think this is the right time to reevaluate the request. What we originally wanted is all the goodness of UWP lifecycle management (clean install/uninstall and updates received in the background without having to run the app), but now it's possible outside of the Store with MSIX packaging without having to comply with some of the stricter rules of the Store and resource/capability management of UWP apps…",,,,,,Anecdotal,issue,,,,,,,,2018-10-25,github/petroemil,https://github.com/microsoft/vscode/issues/61793,repo: microsoft/vscode | keyword: checklist | state: open
"(Experimental duplicate detection) Thanks for submitting this issue. Please also check if it is already covered by an existing one, like: - [Feature Request -- Allow install from windows app store. (#26826)](https://www.github.com/Microsoft/vscode/issues/26826) <!-- score: 0.495 --> <!-- potential_duplicates_comment -->",,,,,,Anecdotal,comment,,,,,,,,2018-10-25,github/vscodebot[bot],https://github.com/microsoft/vscode/issues/61793#issuecomment-433033233,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
> but now it's possible outside of the Store with MSIX packaging without having to comply with some of the stricter rules of the Store and resource/capability management of UWP apps. Can you elaborate on this?,,,,,,Anecdotal,comment,,,,,,,,2018-10-25,github/joaomoreno,https://github.com/microsoft/vscode/issues/61793#issuecomment-433093967,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"@joaomoreno MSIX gives non-Store apps all the lifecycle-management of Store apps. An app packaged up as MSIX doesn't have to be published to the Store, you can just share the .msix file as you'd do with any other installer and people can download and install it to their machines. You get the clean install/uninstall, you get background updates and you can still keep your freedom and talk to command line tools like the .NET Core SDK or Git and attach to running processes to debug them, etc. - thi…",,,,,,Anecdotal,comment,,,,,,,,2018-10-25,github/petroemil,https://github.com/microsoft/vscode/issues/61793#issuecomment-433101579,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
Is it possible to have per machine only installations? How are version distributed? Gpo? Updates are controlled by admins and not by a releasy cycles that may published a broken version that disallow developers to work? I hope we are not get another per user installer where the application gets auto-deleted when the user logs off and his roaming profile is cleaned from disk including all per user apps like the current per user installer.,,,,,,Anecdotal,comment,,,,,,,,2018-11-12,github/alexhass,https://github.com/microsoft/vscode/issues/61793#issuecomment-437818608,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
This requires Minimum Windows 10 Build 17701 or later. Is this min September 2018 or March 2019? Not sure about the build version. There are a lot of users with Windows 7 around. Looks not like a working solution for the masses in short or mid term.,,,,,,Anecdotal,comment,,,,,,,,2018-11-12,github/alexhass,https://github.com/microsoft/vscode/issues/61793#issuecomment-437821081,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"Microsoft wants to push MSIX for everything, why not making a kind of lighthouse project and bringing VSCode with a MSIX installer. Beneficial for users because of clean install and uninstall. Support of the proposed new MS installer way 👍, and sure a good PR sign to show. Look here we support MSIX, go ahead and provide MSIX installer for your application as well. Just my 2 cents. I would love to have it as MSIX installer.",,,,,,Anecdotal,comment,,,,,,,,2018-11-13,github/okieselbach,https://github.com/microsoft/vscode/issues/61793#issuecomment-438176189,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"@okieselbach: Can you read? I said this is future musik. Check the dependencies yourself. MSIX should be done for sure. But there are older windows 10/7 systems around. Until the MSIX can be used we need MSI. No way around. Ignoring is no option and I provided the vscode MSI installer to the vscode team. Not your two cents, but mine.",,,,,,Anecdotal,comment,,,,,,,,2018-11-13,github/alexhass,https://github.com/microsoft/vscode/issues/61793#issuecomment-438483931,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"https://github.com/Microsoft/msix-packaging#windows-7-support MSIX has been advertised to be cross-platform, so there of course is Windows 7 support 👍",,,,,,Anecdotal,comment,,,,,,,,2018-11-14,github/saschanaz,https://github.com/microsoft/vscode/issues/61793#issuecomment-438550811,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
@petroemil According to this [documentation](https://docs.microsoft.com/en-au/windows/uwp/packaging/create-app-package-with-makeappx-tool) MakeAppX.exe can create MSIX too. I had already started this work with #59152,,,,,,Anecdotal,comment,,,,,,,,2018-11-14,github/WilliamABradley,https://github.com/microsoft/vscode/issues/61793#issuecomment-438561395,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"Fascinating... just wonder how users should install anything on windows 7 as they have no permissions to install software per machine. There is no windows store on windows 7, too. And I cannot deploy an msix via active directory as software gpo only allows msi files.",,,,,,Anecdotal,comment,,,,,,,,2018-11-14,github/alexhass,https://github.com/microsoft/vscode/issues/61793#issuecomment-438585913,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"I just converted my vscode MSI setup to MSIX with new MSIX Packager in Windows 10 R1809. The converter first requires that you have a MSI setup at hand. - The result is a setup that has no features at all. - The current MSI installer I shared has 128 features and allow you to select/deselect every single file association. There may be conflicting file association with other software. - MSIX seems to be a one button setup. Ok, for beginners this may be ok as it is easy to install with just one c…",,,,,,Anecdotal,comment,,,,,,,,2018-11-18,github/alexhass,https://github.com/microsoft/vscode/issues/61793#issuecomment-439728447,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"@alexhass MSIX is intentionally designed to be a streamlined (Click-Once-like) install experience. Most (if not all) of the settings you describe could be set as a ""First Start"" dialog or any time later from app settings.",,,,,,Anecdotal,comment,,,,,,,,2018-11-19,github/petroemil,https://github.com/microsoft/vscode/issues/61793#issuecomment-439952439,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
Absolutely stunned that an MS product does not have an MSI installer. Please put it to the roadmap!,,,,,,Anecdotal,comment,,,,,,,,2019-03-25,github/bluikko,https://github.com/microsoft/vscode/issues/61793#issuecomment-476037648,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"#33184 If MSIX-installer would be released, there is no need of MSI-installer, right? Ping @alexhass",,,,,,Anecdotal,comment,,,,,,,,2019-10-17,github/janparttimaa,https://github.com/microsoft/vscode/issues/61793#issuecomment-543120824,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
I'm not sure if MSIX can be used in AD Software Installation - if that is the case then MSI would be more widely useful than MSIX.,,,,,,Anecdotal,comment,,,,,,,,2019-10-17,github/bluikko,https://github.com/microsoft/vscode/issues/61793#issuecomment-543144628,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"https://docs.microsoft.com/en-us/windows/msix/group-policy-msix - according to here, group policy can not be used to deploy MSIX apps. There are other alternatives though. InTune natively supports deploying them, and I wouldn't be surprised if you could install the AppX by some form of command (which you could trigger through GPO)",,,,,,Anecdotal,comment,,,,,,,,2019-10-17,github/MatthewSteeples,https://github.com/microsoft/vscode/issues/61793#issuecomment-543177914,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
I believe this part is touched upon the [intro part](https://www.microsoft.com/en-us/videoplayer/embed/RE3ig2l) of the [MSIX-Labs](https://github.com/microsoft/MSIX-Labs) tutorial series in the overview part. Watch the first video and seek to 17:25,,,,,,Anecdotal,comment,,,,,,,,2019-10-17,github/MathiasMagnus,https://github.com/microsoft/vscode/issues/61793#issuecomment-543214474,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"Dose they release MSIX installer? I can find that was marked as completed in #97432, but in 6/11 they update VSCode and I can't find MSIX installer in the VSCode website, both stable and insider. How about the plan to release MSIX installer?",,,,,,Anecdotal,comment,,,,,,,,2020-06-10,github/wenqiangx325,https://github.com/microsoft/vscode/issues/61793#issuecomment-642273600,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"Just to update everyone here. I am currently making progress on the exploration of an MSIX package for VS Code. We are still working through the hurdles of releasing such a package, but progress has been made. Note that we still intend to ship our other packaged formats for the variety of surface areas they support.",,,,,,Anecdotal,comment,,,,,,,,2020-06-17,github/sbatten,https://github.com/microsoft/vscode/issues/61793#issuecomment-645620092,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"> Just to update everyone here. I am currently making progress on the exploration of an MSIX package for VS Code. We are still working through the hurdles of releasing such a package, but progress has been made. Note that we still intend to ship our other packaged formats for the variety of surface areas they support. Would you release a MSIX install after 'Iteration Plan for June 2020'( #100100 ) finish? Or more time will be need? Thank you.",,,,,,Anecdotal,comment,,,,,,,,2020-06-25,github/wenqiangx325,https://github.com/microsoft/vscode/issues/61793#issuecomment-649339702,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"@wenqiangxie There will not be an MSIX at the end of the milestone unfortunately. There are quite a few processes that we need to do that we don't have to do currently. Right now we are still enumerating and evaluating the impact of all of these changes that need to be made. For that reason, we are still in progress.",,,,,,Anecdotal,comment,,,,,,,,2020-06-25,github/sbatten,https://github.com/microsoft/vscode/issues/61793#issuecomment-649638395,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"Does an MSIX installer bring some value that an MSI installer doesn't? MSI installer can be used in cases where MSIX is unsupported, so I would've expected MSI installer to be more useful.",,,,,,Anecdotal,comment,,,,,,,,2020-06-26,github/bluikko,https://github.com/microsoft/vscode/issues/61793#issuecomment-649917453,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"> Does an MSIX installer bring some value that an MSI installer doesn't? > > MSI installer can be used in cases where MSIX is unsupported, so I would've expected MSI installer to be more useful. So why Microsoft release MSIX technology? As for me, I love MSIX installer because MSIX doesn't change my system space as traditional installer, and if most software in my computer use MSIX installer, my system could be more clear. That not means VSCode harm my computer, but VSCode team of Microsoft, th…",,,,,,Anecdotal,comment,,,,,,,,2020-06-26,github/wenqiangx325,https://github.com/microsoft/vscode/issues/61793#issuecomment-649925345,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"I see, some of those are indeed somewhat useful features for home users. Business environment would still benefit from an MSI installer for managed systems since MSIX is not supported by traditional deployment tools (including some from Microsoft). With the ""5,000+"" open issues it may be futile to open an issue for MSI installer (if one doesn't already exist).",,,,,,Anecdotal,comment,,,,,,,,2020-06-26,github/bluikko,https://github.com/microsoft/vscode/issues/61793#issuecomment-649928397,repo: microsoft/vscode | issue: MSIX installer | keyword: checklist
"Resolve file with same name as folder as index # Suggestion <!-- Please fill in each section completely. Thank you! --> ## 🔍 Search Terms Filename matches containing directory (folder), resolves index (default) for directory <!-- 💡 Did you know? TypeScript has over 2,000 open suggestions! 🔎 Please search thoroughly before logging new feature requests as most common ideas already have a proposal in progress. The ""Common Feature Requests"" section of the FAQ lists many popular requests: https://gi…",,,,,,Anecdotal,issue,,,,,,,,2021-06-08,github/CaptainN,https://github.com/microsoft/vscode/issues/125871,repo: microsoft/vscode | keyword: checklist | state: open
"Is there any environment where this works at runtime? TypeScript's module resolution is specifically designed to work exactly how it would at runtime, so the compiler can leave your directory structure and filenames alone.",,,,,,Anecdotal,comment,,,,,,,,2021-06-08,github/fatcerberus,https://github.com/microsoft/vscode/issues/125871#issuecomment-856894248,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"We generally don't add new naming conventions without some more technical motivation than this. It seems like this is really an editor / dev tool problem -- VS Code could be collapsing these more aggressively. I don't think there's any room for TS to improve the experience, nor that seeing `foo/foo.ts` everywhere is really that much of an improvement.",,,,,,Anecdotal,comment,,,,,,,,2021-06-08,github/RyanCavanaugh,https://github.com/microsoft/vscode/issues/125871#issuecomment-857102939,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"I don't know if any runtimes support it (I'm not even sure if [node.js supports `index` by default using ESM imports](https://nodejs.org/api/esm.html#esm_resolver_algorithm_specification)), but I do know, my use of Typescript for browser based output is never designed to be resolved at runtime. It's always bundled. In that sense, it doesn't work like you've suggested either - in both cases, the module files have to be moved or transformed in some way. I guess this is something of a friction. So…",,,,,,Anecdotal,comment,,,,,,,,2021-06-08,github/CaptainN,https://github.com/microsoft/vscode/issues/125871#issuecomment-857103740,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"It'd be an improvement, because it wouldn't need to show the directory at all - it would just show `foo.ts`. This problem is more obvious during debugging in Chrome or Firefox. It's not just an editor problem.",,,,,,Anecdotal,comment,,,,,,,,2021-06-08,github/CaptainN,https://github.com/microsoft/vscode/issues/125871#issuecomment-857104630,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"> Why let dogma override pragmatism? This goes the other way too. You could just give your files proper names. Sure, the import will be slightly longer, but it's a pragmatic solution to your issue.",,,,,,Anecdotal,comment,,,,,,,,2021-06-08,github/MartinJohns,https://github.com/microsoft/vscode/issues/125871#issuecomment-857126715,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"> You could just give your files proper names. Yeah, that's a possibility too. But it's kind of normal for source code to do what I'm describing, and also, it's weird to use `index` in compiled projects like these. It makes sense on servers (node.js), and for nextjs's routing system. But it's weird in source code. Anyway, I made my unconvincing case.",,,,,,Anecdotal,comment,,,,,,,,2021-06-08,github/CaptainN,https://github.com/microsoft/vscode/issues/125871#issuecomment-857150584,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"Context for why we moved this: While we don't have any intention of changing module resolution, we agreed that the display of filenames like this in the UI could be much better in a lot of cases. The screenshots from the left-side bar show how bad the current UX is in cases like these. We didn't have any immediate home-run solutions but wanted to brainstorm a bit on how to make filename display always be contextually meaningful.",,,,,,Anecdotal,comment,,,,,,,,2021-06-11,github/RyanCavanaugh,https://github.com/microsoft/vscode/issues/125871#issuecomment-859726260,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"Just a reminder - this is also an issue in the debugger/console output, in both VSCode and in Chrome/Firefox/etc.",,,,,,Anecdotal,comment,,,,,,,,2021-06-11,github/CaptainN,https://github.com/microsoft/vscode/issues/125871#issuecomment-859735920,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"This also effects languages like python, where you can have a lot of `__init__.py` files Assigning a few other people from the VS Code side who may be interested: @JacksonKearl for label and search, @TylerLeonhardt for quick open",,,,,,Anecdotal,comment,,,,,,,,2021-10-26,github/mjbvz,https://github.com/microsoft/vscode/issues/125871#issuecomment-951453117,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
@TylerLeonhardt A large feature request I have is https://github.com/microsoft/vscode/issues/41909 which is similar in nature but only for the tabs themselves. This seems a bit more complex.,,,,,,Anecdotal,comment,,,,,,,,2022-12-06,github/lramos15,https://github.com/microsoft/vscode/issues/125871#issuecomment-1339968448,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"Hi, there is a [directory-named-webpack-plugin](https://www.npmjs.com/package/directory-named-webpack-plugin) and allowing vscode to understand this pattern would really make life easier. Because, as it was said multiple times, you don't really want numerous index.js files in your project. They doesn't make sense.",,,,,,Anecdotal,comment,,,,,,,,2023-12-02,github/mariusrak,https://github.com/microsoft/vscode/issues/125871#issuecomment-1837195138,repo: microsoft/vscode | issue: Resolve file with same name as folder as index | keyword: checklist
"Tokenization overhaul The current tokenisation story of VS Code is based on TM grammars, which are pretty powerful, but we are running into their limits if we want to do something more than a top-down scanner can do. Also, once you implement a TM interpreter, you realise how inefficient the way in which regular expressions must be evaluated is and how TM grammars were not meant to do much more than simple colouring using just a few rules... The fact that we now have these complex grammars than …",,,,,,Anecdotal,issue,,,,,,,,2019-07-10,github/alexdima,https://github.com/microsoft/vscode/issues/77140,repo: microsoft/vscode | keyword: checklist | state: open
It would be great if the proposal to add syntax highlighting to the language server protocol could be considered. I think the latest on that is here: https://github.com/microsoft/vscode-languageserver-node/pull/367,,,,,,Anecdotal,comment,,,,,,,,2019-08-09,github/paulyoung,https://github.com/microsoft/vscode/issues/77140#issuecomment-520065760,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
Tree-Sitter support would be amazing! It does have a fast parser and grammars for many popular languages (including syntax-highlighters that map Tree-Sitter AST nodes to TextMate scopes).,,,,,,Anecdotal,comment,,,,,,,,2019-08-16,github/fwcd,https://github.com/microsoft/vscode/issues/77140#issuecomment-522129653,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Excellent post @alexandrudima. While maintaining the C++ TM grammar and helping get the Tree Sitter working, I can say I've experienced the limitations of the Decorations API and TextMate first hand. To add to your point of complex regex, the C++ grammar has a single pattern (regex + capture groups) that is 20,000 characters long: more characters than the entire file of the Go Lang TM grammar. ### Base Parser Idea > Another idea was to build some base parser, with components such as C-style com…",,,,,,Anecdotal,comment,,,,,,,,2019-08-17,github/jeff-hykin,https://github.com/microsoft/vscode/issues/77140#issuecomment-522194469,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Having recently crafted a language server using text decorations for semantic highlighting as well, I'm in agreement with @jeff-hykin that the most practical and not too difficult solution would be the ""Normal + Streamlined Grammar Idea"". I've found that writing a very simple and barebones TM grammar for common/context-insensitive tokens like keywords and comments works very well. I then override the default highlight where necessary with semantic coloring using text decorations. Thus, to provi…",,,,,,Anecdotal,comment,,,,,,,,2019-08-17,github/alexzielenski,https://github.com/microsoft/vscode/issues/77140#issuecomment-522250234,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"> API for an extension to identify ranges of text as a token id number, @alexzielenski When you say token id are you talking about the tokens [from this](https://code.visualstudio.com/blogs/2017/02/08/syntax-highlighting-optimizations)?. For example: ``` { startIndex: 8, scopes: ['source.js','meta.function.js'] }, ``` Which gets converted into: ``` // bbbbbbbbb fffffffff FFF TTT LLLLLLLL [ 8, 16793623, // 000000010 000000001 000 000 00010111 ] ``` <br> <br> <br> > would be a more than sufficien…",,,,,,Anecdotal,comment,,,,,,,,2019-08-17,github/jeff-hykin,https://github.com/microsoft/vscode/issues/77140#issuecomment-522271458,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"@jeff-hykin When I said token id i just meant an arbitrary number which the extension could assign meaning to. So, the extension could provide: `{ startIndex: 8, endIndex: 12, tokenId: 5 }` And also specify a map to the api: ``` registerTokenTypes(tid => { switch (tid) { case 5: return ""entity.name.function"" // or a TextDecoration } }) ``` Regarding incremental text updates: I am already making use of an API provided by vscode to its language server to receive text deltas. I'm unsure if there e…",,,,,,Anecdotal,comment,,,,,,,,2019-08-17,github/alexzielenski,https://github.com/microsoft/vscode/issues/77140#issuecomment-522271893,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
">the extension could provide: > { startIndex: 8, endIndex: 12, tokenId: 5 } > And also specify a map to the api: Ah I see, thats a great idea. That would greatly reduce the amount of data needed for communication. If there was a static way to provide such a mapping, I bet it could be combined with the Trie generated from the Theme to make for a direct way to go from `tokenId: 5` to style data. > I am already making use of an API provided by vscode to its language server to receive text deltas. …",,,,,,Anecdotal,comment,,,,,,,,2019-08-17,github/jeff-hykin,https://github.com/microsoft/vscode/issues/77140#issuecomment-522273566,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"For comparison, I benchmarked a few engines: **Tokenization performance (PHP)** First tokenization run only. Does not include V8 optimizations from subsequent runs (like after editing a file). File: [PHPMailer.php](https://github.com/PHPMailer/PHPMailer/blob/master/src/PHPMailer.php) Average of 10 iterations. All times in milliseconds (lower is better). | WASM | JS | TreeSitter | TextMate -- | -- | -- | -- | -- Average | 24.95 | 38.73 | 78.24 | 795.75 Min | 23.58 | 36.48 | 75.81 | 789.64 Max | …",,,,,,Anecdotal,comment,,,,,,,,2019-08-20,github/mattacosta,https://github.com/microsoft/vscode/issues/77140#issuecomment-523193951,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Will this overhaul fix syntax highlighting for multiline generic function/method calls? ![img](https://files.gitter.im/Microsoft/TypeScript/ue7K/image.png) It regularly happens to me where I try to split a generic function/method call to multiple lines and the syntax highlighter just... Freaks out. It highlights stuff in white, blue, green, other exotic colors. The colors chosen are very random and differ from case to case.",,,,,,Anecdotal,comment,,,,,,,,2019-08-22,github/AnyhowStep,https://github.com/microsoft/vscode/issues/77140#issuecomment-523903064,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"@AnyhowStep You might want to report that to the Typescript grammar repo, I think that's solvable with the current tools. To answer your question though: the tree sitter would likely not have that issue. This thread is currently solving a pre-requisite problem: the tree sitter (and other parsers) don't have an efficient real-time way to tell VS code about the structure of the code. We need a way to identify tokens, a way to store information about each token, a way for extensions to incremental…",,,,,,Anecdotal,comment,,,,,,,,2019-08-22,github/jeff-hykin,https://github.com/microsoft/vscode/issues/77140#issuecomment-524108279,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Ah. I didn't even know where to go to report it. I looked it up and it looks like others have reported it and the issues have been marked as ""won't fix"" and ""design limitation"". https://github.com/microsoft/TypeScript-TmLanguage/issues/767 https://github.com/microsoft/TypeScript-TmLanguage/issues/745 https://github.com/microsoft/TypeScript-TmLanguage/issues/479 https://github.com/microsoft/TypeScript-TmLanguage/issues/475#issuecomment-309905772 > This is by design as the grammar lookup doesn't …",,,,,,Anecdotal,comment,,,,,,,,2019-08-23,github/AnyhowStep,https://github.com/microsoft/vscode/issues/77140#issuecomment-524216546,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"> Ah. I didn't even know where to go to report it. @AnyhowStep, yeah it's definitely not obvious where to go. Mentioning it and being redirected is a valid way to find out. Thanks for including the issue links. I understand the details of problem now, the fundamental problem isn't perfectly solveable with TM, and this situation is exactly what the tree-sitter is designed to fix, so this issue is (very indirectly) working on that problem. However, I've written the syntax for the very similar cas…",,,,,,Anecdotal,comment,,,,,,,,2019-08-23,github/jeff-hykin,https://github.com/microsoft/vscode/issues/77140#issuecomment-524345200,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"> This is by design as the grammar lookup doesn't allow multiple lines at a time. Multiline comments and strings work ok, is this different to those? (though this is probably a bit off-topic for hear)",,,,,,Anecdotal,comment,,,,,,,,2019-08-26,github/DanTup,https://github.com/microsoft/vscode/issues/77140#issuecomment-524773512,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"@alexandrudima Would it be too much of a performance hit to consider having tokens refer to an enumerated/hashed style rather than directly store the foreground, background, and font directly on the tokem? If that is in the realm of possibility, I have an idea of a way to allow multiple sources to contribute semantic meaning efficiently and effectively with out needing to have multiple token stores.",,,,,,Anecdotal,comment,,,,,,,,2019-09-20,github/jeff-hykin,https://github.com/microsoft/vscode/issues/77140#issuecomment-533408474,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Semantic tokenization would also provide a good way to get #1751 implemented: in nearly every scenario listed in #1751, the ""root"" language server would also know what other syntax was embedded in the file, and where that syntax ends. E.g., in the `onclick=""event.preventDefault()""` example, the HTML language server would be able to say ""the text from X to Y should be parsed as Javascript"", where X and Y are the position immediately after the first `""` and immediately before the second `""` respe…",,,,,,Anecdotal,comment,,,,,,,,2019-09-23,github/rmunn,https://github.com/microsoft/vscode/issues/77140#issuecomment-533953100,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"One place to dogfood this could be hover / completion / parameterHints. 1. They don't have color now anyway so this wouldn't disrupt users too much. 2. I remember @DanielRosenwasser said VS is using semantic coloring for highlighting code in these widgets, so TS server already has this info. 3. These are incomplete code so they can't be colorized by the full language TM grammar. 4. These are read-only code, should be easier to colorize than code in editor. ![image](https://user-images.githubuse…",,,,,,Anecdotal,comment,,,,,,,,2019-12-04,github/octref,https://github.com/microsoft/vscode/issues/77140#issuecomment-561888466,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"> One place to dogfood this could be hover / completion / parameterHints. These things aren't valid code, so I'd say you're really better off with using the symbol display parts that we return there. You could request our highlighting for document previews if you're trying to limit broader UX impact.",,,,,,Anecdotal,comment,,,,,,,,2019-12-05,github/DanielRosenwasser,https://github.com/microsoft/vscode/issues/77140#issuecomment-561919626,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Had this one with Go #76073. The TM grammer for it has been sourced from the Atom extension which is no longer willing to maintain that grammer as they since moved on to implementing syntax highlighting using tree-sitter, that is, semantic coloring. So I guess this is just one more syntax highlighting issue that will be resolved if VS Code (Probably the Go extension) adopts semantic coloring for Go.",,,,,,Anecdotal,comment,,,,,,,,2019-12-21,github/segevfiner,https://github.com/microsoft/vscode/issues/77140#issuecomment-568205533,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
Hey @alexdima Is there still ambition for the overhaul or was it deemed not possible? Can the synchronous assumptions be solved?,,,,,,Anecdotal,comment,,,,,,,,2021-04-28,github/jasonwilliams,https://github.com/microsoft/vscode/issues/77140#issuecomment-828356006,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Hello, I've read from this thread https://github.com/microsoft/vscode/issues/64681 that this would solve our problem ? is it the case ? and is this issue being taken care of or is iddle at the time ? thank you",,,,,,Anecdotal,comment,,,,,,,,2021-07-23,github/ebkgne,https://github.com/microsoft/vscode/issues/77140#issuecomment-885556768,repo: microsoft/vscode | issue: Tokenization overhaul | keyword: checklist
"Copilot Agent randomly enters indefinite wait after terminal commands - Copilot Chat Extension Version: 0.29.1 - VS Code Version: 1.102.3 - OS Version: macOS 15.5 - Feature (e.g. agent/edit/ask mode): agent - Selected model (e.g. GPT 4.1, Claude 3.7 Sonnet): Claude Sonnet 4 - Logs: 2025-08-03 00:04:14.320 [info] [GitExtensionServiceImpl] Initializing Git extension service. 2025-08-03 00:04:14.320 [info] Using the Electron fetcher. 2025-08-03 00:04:14.320 [info] Logged in as dongju93 2025-08-03 …",,,,,,Anecdotal,issue,,,,,,,,2025-08-02,github/dongju93,https://github.com/microsoft/vscode/issues/259348,repo: microsoft/vscode | keyword: checklist | state: closed
"The majority of the hanging issues and output read issues are fixed in the latest Insiders, see https://github.com/microsoft/vscode/issues/255396 and https://github.com/microsoft/vscode/issues/257439#issuecomment-3136187753. If you still experience issues in the latest Insiders, please create a new issue with the following info: - A screenshot of the chat and terminal when it's hanging - Hover the terminal tab, click show details and take a screenshot of the tab. It should look something like t…",,,,,,Anecdotal,comment,,,,,,,,2025-08-03,github/Tyriar,https://github.com/microsoft/vscode/issues/259348#issuecomment-3146910652,repo: microsoft/vscode | issue: Copilot Agent randomly enters indefinite wait after terminal commands | keyword: checklist
It's still happening after the vscode 1.103 stable release. Was this fix not included in this month's release?,,,,,,Anecdotal,comment,,,,,,,,2025-08-08,github/dongju93,https://github.com/microsoft/vscode/issues/259348#issuecomment-3166930062,repo: microsoft/vscode | issue: Copilot Agent randomly enters indefinite wait after terminal commands | keyword: checklist
"@dongju93 it was, I think there may be some transitional issue people see where old terminals are still being used. Try closing all terminals and/or clearing the chat session, that helped someone that ran into this yesterday.",,,,,,Anecdotal,comment,,,,,,,,2025-08-08,github/Tyriar,https://github.com/microsoft/vscode/issues/259348#issuecomment-3167191877,repo: microsoft/vscode | issue: Copilot Agent randomly enters indefinite wait after terminal commands | keyword: checklist
"Great, a model that doesn't listen to users and has overrides behind it. Type: <b>Bug</b> Summarized conversation historyOkay, I will perform a Text Deconstruction of the provided analysis of my (the AI's) mistakes. ## Introduction The provided text is a detailed deconstruction, authored by the user, analyzing the AI's errors during a previous complex interaction. The objective of that original interaction was the consolidation of various documents and concepts related to ""Character-Based Expla…",,,,,,Anecdotal,issue,,,,,,,,2025-05-30,github/chieffy99,https://github.com/microsoft/vscode/issues/250101,repo: microsoft/vscode | keyword: checklist | state: closed
"Great, a model that doesn't listen to users and has an override behind it. I don't know if the text in there is real or not. You should go and look at the log data and analyze.",,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/chieffy99,https://github.com/microsoft/vscode/issues/250101#issuecomment-2921347492,"repo: microsoft/vscode | issue: Great, a model that doesn't listen to users and has overrides behind it. | keyword: checklist"
This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Happy Coding!,,,,,,Anecdotal,comment,,,,,,,,2025-06-07,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/250101#issuecomment-2952373561,"repo: microsoft/vscode | issue: Great, a model that doesn't listen to users and has overrides behind it. | keyword: checklist"
"@lramos15, look [here](https://github.com/orgs/community/discussions/162256) Summary: Copilot Agent Context loss after ""Summarized conversation history"" Alternative: Instead of summarizing conversations, utilize memory management to retain context or key-points that summarized over time. It's working fine: VS Code, Update 1.99.3: with Copilot Chat (0.26.7). Not working in VS Code (1.100) and Copilot Chat Latest version.",,,,,,Anecdotal,comment,,,,,,,,2025-06-10,github/wail-asad,https://github.com/microsoft/vscode/issues/250101#issuecomment-2958390403,"repo: microsoft/vscode | issue: Great, a model that doesn't listen to users and has overrides behind it. | keyword: checklist"
"Thank you very much. I also don't know how to explain it properly because I'm just a regular user and have only been using GitHub Copilot for a short time. My method, which I call Chain of Fault (CoF), was originally a way to find the causes of errors in my interactions with ChatGPT. It focuses on errors visible in the conversation, allowing me to improve, learn, and understand the model's limitations. It uses the same principle as the original CoT (Chain of Thought) prompting that grounds the …",,,,,,Anecdotal,comment,,,,,,,,2025-06-10,github/chieffy99,https://github.com/microsoft/vscode/issues/250101#issuecomment-2960571208,"repo: microsoft/vscode | issue: Great, a model that doesn't listen to users and has overrides behind it. | keyword: checklist"
"Enable Option to Reuse an Existing Terminal for Code Execution **Description:** Provide a setting to allow the ""Shift+Enter"" command to send code to an already active Python interpreter session rather than launching a new terminal. **Motivation & Use Cases:** - **Problem:** Currently, the command may launch a new terminal each time even if one is already active, which is disruptive for users running long-lived interpreter sessions. - **Solution:** Introduce a setting (e.g., `""python.reuseActive…",,,,,,Anecdotal,issue,,,,,,,,2025-04-09,github/omkarchandra,https://github.com/microsoft/vscode/issues/246133,repo: microsoft/vscode | keyword: checklist | state: closed
"Vs <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> # Contributing to VS Code Welcome, and thank you for your interest in contributing to VS Code! There are several ways in which you can contribute, beyond writing code. The goal of this document is to provide a high-level overview …",,,,,,Anecdotal,issue,,,,,,,,2025-04-08,github/thaileen0411,https://github.com/microsoft/vscode/issues/246008,repo: microsoft/vscode | keyword: checklist | state: closed
"Incomplete walkthroughs pile up in Get Started I have seen this issue many screen sharing sessions: Walkthroughs stay half-completed, stick around in the list, and make it feel stale even as extensions add new ones. While new walkthroughs get added to the end, the top ones don't make room. The walkthroughs should be contextually relevant, lean, and uncluttered – not feel like the stack of books next to your bed that make you feel bad about not leveling up fast enough. Mine as reference: <img wi…",,,,,,Anecdotal,issue,,,,,,,,2022-02-04,github/digitarald,https://github.com/microsoft/vscode/issues/142219,repo: microsoft/vscode | keyword: checklist | state: closed
"> Don't complete steps without the walkthrough being open Wouldn't this make it harder to complete items? > Don't ⭐️-feature walkthroughs that are more than half completed, have any progress, or have been opened before I'd go a little farther and maybe de-emphasize the core walkthroughs so they're all equal. A few more ideas: - Bubble up new walkthroughs to the top and sort by updates (including user updates) - Reduce amount of walkthroughs. When you open VS Code out of the box, there are 3 wal…",,,,,,Anecdotal,comment,,,,,,,,2022-02-04,github/miguelsolorio,https://github.com/microsoft/vscode/issues/142219#issuecomment-1030233217,repo: microsoft/vscode | issue: Incomplete walkthroughs pile up in Get Started | keyword: checklist
"> > Don't complete steps without the walkthrough being open > Wouldn't this make it harder to complete items? The outcome I aimed for would be that less walkthroughs are partially completed even though a user never opened them – making progress more ""real"". Love all the ideas! 2 and 3 seem low hanging enough for experimenting.",,,,,,Anecdotal,comment,,,,,,,,2022-02-04,github/digitarald,https://github.com/microsoft/vscode/issues/142219#issuecomment-1030236521,repo: microsoft/vscode | issue: Incomplete walkthroughs pile up in Get Started | keyword: checklist
"I have two ideas related to the latter two points that Harald mentioned. I would love feedback on them! One is taking a slideshow approach, and the other is keeping the general look of the current walkthrough experience but making changes to the manual checking of the steps. **Slideshow** https://user-images.githubusercontent.com/60596156/152615347-ac6c9928-a381-48e2-a503-e43d50cf4f2b.mov - Unlike the checklist approach, each step is marked towards progress whether you have gone to the next ste…",,,,,,Anecdotal,comment,,,,,,,,2022-02-04,github/lychung7,https://github.com/microsoft/vscode/issues/142219#issuecomment-1030423398,repo: microsoft/vscode | issue: Incomplete walkthroughs pile up in Get Started | keyword: checklist
"I'm loving the simplicity of the ""single task"" view. One minor drawback is someone isn't able to quickly scan out the various steps and pick one, they must go through each one. I wonder if there's ways to solve that? As an idea, we could use the hover tooltip on the dots.",,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/miguelsolorio,https://github.com/microsoft/vscode/issues/142219#issuecomment-1031981272,repo: microsoft/vscode | issue: Incomplete walkthroughs pile up in Get Started | keyword: checklist
"> One minor drawback is someone isn't able to quickly scan out the various steps and pick one, they must go through each one. I think the increased simplicity could help with a) reduces choices the user has to make, b) the _staged disclosure_ adds an element of discovery, and c) improved learnability as each step stands on its own. > After the 'Show Terminal' button is clicked on, the step is still shown. The current experience hides the step after the user takes action, but I think we should k…",,,,,,Anecdotal,comment,,,,,,,,2022-02-07,github/digitarald,https://github.com/microsoft/vscode/issues/142219#issuecomment-1031998457,repo: microsoft/vscode | issue: Incomplete walkthroughs pile up in Get Started | keyword: checklist
"> I have two ideas related to the latter two points that Harald mentioned. I would love feedback on them! One is taking a slideshow approach, and the other is keeping the general look of the current walkthrough experience but making changes to the manual checking of the steps. > > **Slideshow** > > Screen.Recording.2022-02-04.at.3.10.33.PM.mov > * Unlike the checklist approach, each step is marked towards progress whether you have gone to the next step or taken action. Also, the slideshow does …",,,,,,Anecdotal,comment,,,,,,,,2022-02-24,github/jaeyonglee8687,https://github.com/microsoft/vscode/issues/142219#issuecomment-1049535348,repo: microsoft/vscode | issue: Incomplete walkthroughs pile up in Get Started | keyword: checklist
Terminal sticky scroll not working at all <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/…,,,,,,Anecdotal,issue,,,,,,,,2023-12-11,github/Destroy666x,https://github.com/microsoft/vscode/issues/200509,repo: microsoft/vscode | keyword: checklist | state: closed
"Thanks for creating this issue! It looks like you may be using an old version of VS Code, the latest stable release is 1.85.0. Please try upgrading to the latest version and checking whether this issue remains. Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2023-12-11,github/vscodenpa,https://github.com/microsoft/vscode/issues/200509#issuecomment-1849252543,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"Thanks for reporting this issue! Unfortunately, it's hard for us to understand what issue you're seeing. Please help us out by providing a screen recording showing exactly what isn't working as expected. While we can work with most standard formats, `.gif` files are preferred as they are displayed inline on GitHub. You may find https://gifcap.dev helpful as a browser-based gif recording tool. If the issue depends on keyboard input, you can help us by enabling screencast mode for the recording (…",,,,,,Anecdotal,comment,,,,,,,,2023-12-14,github/vscodenpa,https://github.com/microsoft/vscode/issues/200509#issuecomment-1856430481,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"What exactly do you want me to GIF? Just the sticky scroll not working as described? If so, sure, but not sure what value it brings.",,,,,,Anecdotal,comment,,,,,,,,2023-12-15,github/Destroy666x,https://github.com/microsoft/vscode/issues/200509#issuecomment-1857055074,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"How long is the output, does it fill your scrollback completely such that the input command was trimmed off the top? Try increasing `terminal.integrated.scollback` if this is the case. (tracked in https://github.com/microsoft/vscode/issues/198010) Also does `ffmpeg -codecs` exit or does it keep running? A screenshot of the bottom of the terminal as well as where the command was input would be helpful.",,,,,,Anecdotal,comment,,,,,,,,2023-12-15,github/Tyriar,https://github.com/microsoft/vscode/issues/200509#issuecomment-1858029349,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"I'm experiencing the same issue. Before reporting, I've gone through the following checklist: [✓] Ensured `terminal.integrated.stickyscroll` is enabled in user, remote, and workspace settings. [✓] Reloaded VSCode five times. [✓] Reopened the terminal five times, ensuring to terminate and restart it each time, not just closing the panel. [✓] The issue persists in both local and remote blank workspaces. [✓] Set `terminal.integrated.stickyscroll.maxlinecount` to `5`. --- Additional information tha…",,,,,,Anecdotal,comment,,,,,,,,2023-12-19,github/Haawron,https://github.com/microsoft/vscode/issues/200509#issuecomment-1862295048,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"> How long is the output, Lots of lines, but also happens with commands with less lines output. > Try increasing `terminal.integrated.scollback` if this is the case Didn't help. I had `6666` value there, way more than the output of checked commands. > Also does ffmpeg -codecs exit or does it keep running? It's running for a moment then stops. Additional details: - it started to partially work in 1.85.1 for me. In PowerShell mainly, although what it chooses to stick is not great. Seems to not co…",,,,,,Anecdotal,comment,,,,,,,,2023-12-19,github/Destroy666x,https://github.com/microsoft/vscode/issues/200509#issuecomment-1863324911,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"Here's a demonstration on all 3: ![2023 12 19 20 05 31 257 Settings_-_OBS-AdvancedSceneSwitcher](https://github.com/microsoft/vscode/assets/3606072/3023cf81-4487-4678-a127-3edc3e92909a) Just in case it matters, I'm using oh-my-posh as prompt. And clink for cmd enhancer. No other CLI modifications other than VSCode's terminal settings. Git Bash is the most pure with 0 changes, so I'd expect it to work there primarily if anywhere, not in PowerShell 7.",,,,,,Anecdotal,comment,,,,,,,,2023-12-19,github/Destroy666x,https://github.com/microsoft/vscode/issues/200509#issuecomment-1863329598,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"I have similar issue in Windows 10 and Powershell 7, with VScode 1.85.1. In my case, sticky scroll works well in naive powershell 7 defined by the following profile: ```json { ""terminal.integrated.profiles.windows"": { ""PowerShell"": { ""path"": ""pwsh"", ""icon"": ""terminal-powershell"" }, } ``` However, if I launch my terminal with commands as the following profile: ```json { ""terminal.integrated.profiles.windows"": { ""pipenv"": { ""path"": ""pwsh"", ""args"": [ ""-Command"", ""pipenv"", ""shell"" ], ""icon"": ""vm"" }…",,,,,,Anecdotal,comment,,,,,,,,2024-01-09,github/Take-Me1010,https://github.com/microsoft/vscode/issues/200509#issuecomment-1882484611,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"same issue here, tried with cmd (windows), git bash, WSL. Also when all extensions are disabled. v1.87.0, also v1.88.0-insider with default setting",,,,,,Anecdotal,comment,,,,,,,,2024-02-27,github/d-mahard,https://github.com/microsoft/vscode/issues/200509#issuecomment-1967884916,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"Looking at the above it seems like these issues are all related to shell integration not being enabled. - cmd regardless of prompt will never have sticky scroll since we don't have shell integration for it - git bash did not have shell integration earlier but does now. - Certain custom pwsh profiles will not automatically have shell integration enabled, this is because we inject arguments to launch pwsh with and we only do that when we're confident we won't break the profile. In this case you'l…",,,,,,Anecdotal,comment,,,,,,,,2024-12-10,github/Tyriar,https://github.com/microsoft/vscode/issues/200509#issuecomment-2531931677,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"Are you kidding me? How much can I withdraw now?W dniu 2024-12-10 16:09:58 użytkownik Daniel Imms napisał:Looking at the above it seems like these issues are all related to shell integration not being enabled.cmd regardless of prompt will never have sticky scroll since we don't have shell integration for itgit bash did not have shell integration earlier but does now.Certain custom pwsh profiles will not automatically have shell integration enabled, this is because we inject arguments to launch …",,,,,,Anecdotal,comment,,,,,,,,2024-12-10,github/ghost,https://github.com/microsoft/vscode/issues/200509#issuecomment-2532109132,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"cmd (clink) does have an integration with VSCode, actually... @Tyriar https://github.com/chrisant996/clink-gizmos/blob/main/vscode_shell_integration.lua Too bad there's nothing more official and it's just a random file, though.",,,,,,Anecdotal,comment,,,,,,,,2024-12-10,github/Destroy666x,https://github.com/microsoft/vscode/issues/200509#issuecomment-2532240162,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
"@Destroy666x interesting, didn't know that. It looks like it's using A, B, C, D, E sequences and sending the cwd so it should work. Though on Windows somethings might be off until conpty v2 ships with https://github.com/microsoft/vscode/issues/224488. In the meantime using `""terminal.integrated.experimental.windowsUseConptyDll"": true` might help",,,,,,Anecdotal,comment,,,,,,,,2024-12-10,github/Tyriar,https://github.com/microsoft/vscode/issues/200509#issuecomment-2532250816,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
@TylerLeonhardt just checking the setting description as that's all that changed https://github.com/microsoft/vscode/pull/235737,,,,,,Anecdotal,comment,,,,,,,,2025-01-30,github/Tyriar,https://github.com/microsoft/vscode/issues/200509#issuecomment-2624715047,repo: microsoft/vscode | issue: Terminal sticky scroll not working at all | keyword: checklist
Failure to setup setting sync: RequestFailed (UserDataSyncError) syncResource:unknown operationId:unknown: Connection refused for the request 'https://vscode-sync-insiders.trafficmanager.net/v1/manifest'. <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existi…,,,,,,Anecdotal,issue,,,,,,,,2024-12-07,github/eddieparker,https://github.com/microsoft/vscode/issues/235545,repo: microsoft/vscode | keyword: checklist | state: closed
> Failed: net::ERR_TIMED_OUT Seems network issue on the user machine. Please diagnose your network configuration and check if you are behind proxy and configure it accordingly.,,,,,,Anecdotal,comment,,,,,,,,2024-12-09,github/sandy081,https://github.com/microsoft/vscode/issues/235545#issuecomment-2527520946,repo: microsoft/vscode | issue: Failure to setup setting sync:  RequestFailed (UserDataSyncError) syncResource:unknown operationId:unknown: Connection refused for the request 'https://vscode-sync-insiders.trafficmanager.net/v1/manifest'. | keyword: checklist
Feature request: Global search (cmd-shift-f) only in files owned by a given team from CODEOWNERS <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> # Problem - Some VSCode projects might be large monorepos with 10000s of files across 100s of codeowners. - A given team may be codeowne…,,,,,,Anecdotal,issue,,,,,,,,2024-09-06,github/jakub-g,https://github.com/microsoft/vscode/issues/227768,repo: microsoft/vscode | keyword: checklist | state: closed
I think this would be a setting. The file would have to be such that each newline is a valid 'files to include/exclude' pattern for vscode.,,,,,,Anecdotal,comment,,,,,,,,2024-09-06,github/andreamah,https://github.com/microsoft/vscode/issues/227768#issuecomment-2334385782,repo: microsoft/vscode | issue: Feature request: Global search (cmd-shift-f) only in files owned by a given team from CODEOWNERS | keyword: checklist
"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 --> This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-09-06,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/227768#issuecomment-2334388366,repo: microsoft/vscode | issue: Feature request: Global search (cmd-shift-f) only in files owned by a given team from CODEOWNERS | keyword: checklist
"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 --> This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-10-27,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/227768#issuecomment-2439812939,repo: microsoft/vscode | issue: Feature request: Global search (cmd-shift-f) only in files owned by a given team from CODEOWNERS | keyword: checklist
"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 --> :slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-11-07,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/227768#issuecomment-2461197441,repo: microsoft/vscode | issue: Feature request: Global search (cmd-shift-f) only in files owned by a given team from CODEOWNERS | keyword: checklist
"Automatic Package Acquisition and Full Project Loads for TypeScript on Web TypeScript in VS Code has already been able to support workloads across TypeScript and JavaScript projects in web scenarios, such as on https://vscode.dev and https://github.dev. Unfortunately, it suffers from two problems: 1. It only supports a ""partial semantic"" mode, and only operates on open files. 2. It cannot provide rich navigation and authoring based on external libraries, due to a lack of either automatic type a…",,,,,,Anecdotal,issue,,,,,,,,2023-05-17,github/DanielRosenwasser,https://github.com/microsoft/vscode/issues/182791,repo: microsoft/vscode | keyword: checklist | state: closed
Here's a draft PR based on @zkat's work: https://github.com/microsoft/vscode/pull/182801 I wrote up a short overview of the changes with pointers into the code.,,,,,,Anecdotal,comment,,,,,,,,2023-05-17,github/sandersn,https://github.com/microsoft/vscode/issues/182791#issuecomment-1552157922,repo: microsoft/vscode | issue: Automatic Package Acquisition and Full Project Loads for TypeScript on Web | keyword: checklist
Not sure if this is the best place to report the bug but I'm going to post here since this is a work-in-progress. I'm trying to setup vscode on the web with typescript support using https://github.com/CodinGame/monaco-vscode-api. My app has private npm packages (node_modules) that are already mounted in the vscode filesystem tree. I found that typescript server ignores my node_modules directory and always tries to download the package from npm. I was able to fix the issue by disabling this beha…,,,,,,Anecdotal,comment,,,,,,,,2024-03-08,github/Abdallatif,https://github.com/microsoft/vscode/issues/182791#issuecomment-1985967058,repo: microsoft/vscode | issue: Automatic Package Acquisition and Full Project Loads for TypeScript on Web | keyword: checklist
July 2024 Endgame Recovery 2 - [x] Create a milestone `July 2024 Recovery 2` @hediet - [x] Bump the version number @hediet - [x] [🔖candidate issues](https://github.com/issues?q=is%3Aissue%20label%3Acandidate%20repo:microsoft/monaco-editor%20repo:microsoft/vscode%20repo:microsoft/vscode-anycode%20repo:microsoft/vscode-copilot%20repo:microsoft/vscode-copilot-release%20repo:microsoft/vscode-dev%20repo:microsoft/vscode-dev-chrome-launcher%20repo:microsoft/vscode-emmet-helper%20repo:microsoft/vscode…,,,,,,Anecdotal,issue,,,,,,,,2024-08-14,github/hediet,https://github.com/microsoft/vscode/issues/225637,repo: microsoft/vscode | keyword: checklist | state: closed
This is the only one under the Candidate Issues mentioned early on in the checklist: https://github.com/microsoft/vscode-copilot-release/issues/1439,,,,,,Anecdotal,comment,,,,,,,,2024-08-16,github/lobsterkatie,https://github.com/microsoft/vscode/issues/225637#issuecomment-2293995429,repo: microsoft/vscode | issue: July 2024 Endgame Recovery 2 | keyword: checklist
Fishy indeed. It also broke attaching to remote containers on my end. Reverting to 1.92.1 fixed it. No more auto updates.,,,,,,Anecdotal,comment,,,,,,,,2024-08-22,github/sprig,https://github.com/microsoft/vscode/issues/225637#issuecomment-2305059019,repo: microsoft/vscode | issue: July 2024 Endgame Recovery 2 | keyword: checklist
Something about chat and location data 🤷‍♂️ https://github.com/microsoft/vscode/compare/1.92.1...1.92.2,,,,,,Anecdotal,comment,,,,,,,,2024-08-27,github/kevindqc,https://github.com/microsoft/vscode/issues/225637#issuecomment-2313428664,repo: microsoft/vscode | issue: July 2024 Endgame Recovery 2 | keyword: checklist
"TaskList in Markdown Preview <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> I know there is an extension for previewing checklists: https://github.com/mjbvz/vscode-markdown-checkboxes, but when checking a box in the preview, it leaves the `.md` file unchecked. It seems like this …",,,,,,Anecdotal,issue,,,,,,,,2024-01-01,github/kylebutts,https://github.com/microsoft/vscode/issues/201669,repo: microsoft/vscode | keyword: checklist | state: closed
Please file this feature request against that extension. VS Code itself targets standard markdown which does not include task lists,,,,,,Anecdotal,comment,,,,,,,,2024-01-03,github/mjbvz,https://github.com/microsoft/vscode/issues/201669#issuecomment-1875666183,repo: microsoft/vscode | issue: TaskList in Markdown Preview | keyword: checklist
@mjbvz is there a way to watch for click events in the VSCode preview window from another extension? Could you point me towards that API and I can try and submit a PR,,,,,,Anecdotal,comment,,,,,,,,2024-01-03,github/kylebutts,https://github.com/microsoft/vscode/issues/201669#issuecomment-1875850317,repo: microsoft/vscode | issue: TaskList in Markdown Preview | keyword: checklist
"`serve-web`- default getting started has weird scroll state Testing #191542 This might have to do more on how `getting started` is loaded in the web, but: 1. Try `serve-web` with a new host like `127.0.0.3` 2. Navigate there and see the getting started page ![Image](https://github.com/microsoft/vscode/assets/31675041/978b8aa5-2097-4ef6-914b-b762eb6b5709) It looks like the getting started checklist is partially scrolled already. Scrolling up doesn't work until you scroll down. Also, sort of unre…",,,,,,Anecdotal,issue,,,,,,,,2023-08-29,github/andreamah,https://github.com/microsoft/vscode/issues/191644,repo: microsoft/vscode | keyword: checklist | state: closed
"Revisit need for workbench contribution that block editor restore **Motivation** Today we instantiate more than `70` workbench contributions before an editor has a chance to open and show its contents. This has an impact on startup performance and we should review all these early contributions to validate that this is warranted. To help in moving contributions off the critical startup path, new API was added to explicitly require a contribution when needed: * a new [`registerWorkbenchContributi…",,,,,,Anecdotal,issue,,,,,,,,2024-02-01,github/bpasero,https://github.com/microsoft/vscode/issues/203947,repo: microsoft/vscode | keyword: checklist | state: closed
ℹ I have intentionally for now only included 2 people so that we can get a feeling of how this works and what kind of additional things we might need to provide to make this nicer to adopt.,,,,,,Anecdotal,comment,,,,,,,,2024-02-01,github/bpasero,https://github.com/microsoft/vscode/issues/203947#issuecomment-1920599729,repo: microsoft/vscode | issue: Revisit need for workbench contribution that block editor restore | keyword: checklist
"I went through all of them to find candidates that are potentially doing more than just registering to some registry. Good news is that most of them are actually only doing that and thus are unlikely to consume a lot of cycles, esp. given many services that contributions are depending on are lazy. The remaining ones need to be looked at in more detail, but I suggest to tackle in debt week.",,,,,,Anecdotal,comment,,,,,,,,2024-02-05,github/bpasero,https://github.com/microsoft/vscode/issues/203947#issuecomment-1927467790,repo: microsoft/vscode | issue: Revisit need for workbench contribution that block editor restore | keyword: checklist
"Do not prompt me to save files when opening a new folder, just keep them open. When choosing File -> Open Folder... and choosing a different folder to open, VsCode will prompt to save any unsaved files open in the present workspace. It would be way less intrusive to just leave unsaved files open when changing the workspace. Often they are checklists of things or part of ongoing work that is somehow related to the newly opened workspace, but the user deviates from opening an additional window to…",,,,,,Anecdotal,issue,,,,,,,,2024-03-15,github/MMulthaupt,https://github.com/microsoft/vscode/issues/207853,repo: microsoft/vscode | keyword: checklist | state: closed
"@bpasero Good suggestion, but the file is not transferred to the newly opened workspace. @ahmed0saber The file may exist only in memory, i.e. created with Ctrl+N with no associated file name or path.",,,,,,Anecdotal,comment,,,,,,,,2024-03-19,github/MMulthaupt,https://github.com/microsoft/vscode/issues/207853#issuecomment-2007251116,"repo: microsoft/vscode | issue: Do not prompt me to save files when opening a new folder, just keep them open. | keyword: checklist"
"Allow showing suggestion diagnostics in VS Code problems panel ### 🔍 Search Terms VS Code, suggestions, diagnostics, problems panel, typescript.suggestionActions.enabled ### ✅ Viability Checklist - [X] This wouldn't be a breaking change in existing TypeScript/JavaScript code - [X] This wouldn't change the runtime behavior of existing JavaScript code - [X] This could be implemented without emitting different JS based on the types of the expressions - [X] This isn't a runtime feature (e.g. librar…",,,,,,Anecdotal,issue,,,,,,,,2024-02-22,github/bshoshany,https://github.com/microsoft/vscode/issues/206024,repo: microsoft/vscode | keyword: checklist | state: closed
"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 --> This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-03-13,github/vscodenpa,https://github.com/microsoft/vscode/issues/206024#issuecomment-1995986858,repo: microsoft/vscode | issue: Allow showing suggestion diagnostics in VS Code problems panel | keyword: checklist
"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 --> This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-05-03,github/vscodenpa,https://github.com/microsoft/vscode/issues/206024#issuecomment-2092033427,repo: microsoft/vscode | issue: Allow showing suggestion diagnostics in VS Code problems panel | keyword: checklist
"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 --> :slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2024-05-13,github/vscodenpa,https://github.com/microsoft/vscode/issues/206024#issuecomment-2106525109,repo: microsoft/vscode | issue: Allow showing suggestion diagnostics in VS Code problems panel | keyword: checklist
"gradle build problem Type: <b>Bug</b> buildscript { ext.kotlin_version = '1.7.10' repositories { google() mavenCentral() } dependencies { classpath 'com.android.tools.build:gradle:7.4.2' classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"" classpath 'com.google.gms:google-services:4.3.15' } } allprojects { repositories { google() mavenCentral() } } rootProject.buildDir = '../build' subprojects { project.buildDir = ""${rootProject.buildDir}/${project.name}"" } subprojects { projec…",,,,,,Anecdotal,issue,,,,,,,,2023-05-25,github/Sadafj,https://github.com/microsoft/vscode/issues/183399,repo: microsoft/vscode | keyword: checklist | state: closed
"Thanks for creating this issue! To help narrow it down, please take the time to follow below steps. Thanks a lot and happy coding 🙏 ### Is the issue caused by an Extension? Stop VS Code and from the command line (NOT the integrated terminal in Code), execute: `code --disable-extensions` and try your steps again to see if it reproduces. If it still reproduces, jump to the next chapter. If you see it is an issue with the extension, please run the command `Start Extension Bisect` and follow the in…",,,,,,Anecdotal,comment,,,,,,,,2023-05-25,github/meganrogge,https://github.com/microsoft/vscode/issues/183399#issuecomment-1562935847,repo: microsoft/vscode | issue: gradle build problem | keyword: checklist
vscode deletes project by running it <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/insid…,,,,,,Anecdotal,issue,,,,,,,,2023-06-13,github/PothpothBR,https://github.com/microsoft/vscode/issues/185035,repo: microsoft/vscode | keyword: checklist | state: closed
"Sorry for the trouble, had you started typing the `rm -rf` command in the python debugger's terminal before pressing F5? If so there is an open issue to address that. Otherwise, where did the `rm` come from?",,,,,,Anecdotal,comment,,,,,,,,2023-06-13,github/roblourens,https://github.com/microsoft/vscode/issues/185035#issuecomment-1590180519,repo: microsoft/vscode | issue: vscode deletes project by running it | keyword: checklist
"I use buildozer to compile a kivy application in python. I didn't run any remove commands, just run `buildozer android debug deploy run logcat`. VSCode opens a new shell to run a python application (Python Debug Console), which had not been opened before. So I can guarantee that there was nothing dumped before the command was executed. I was able to redo the lost progress, and I continue to use VSCode in other projects as normal, this has not occurred since, even though I think I have developed…",,,,,,Anecdotal,comment,,,,,,,,2023-06-14,github/PothpothBR,https://github.com/microsoft/vscode/issues/185035#issuecomment-1591769575,repo: microsoft/vscode | issue: vscode deletes project by running it | keyword: checklist
Improper bracket pair highlighting in .ts file Does this issue occur when all extensions are disabled?: Yes - VS Code Version: 1.78.2 - OS Version: Windows Steps to Reproduce: ![image](https://github.com/microsoft/vscode/assets/50770619/16e3737f-6f7f-4658-bc28-b6f86d1369b8),,,,,,Anecdotal,issue,,,,,,,,2023-06-07,github/abhijit-chikane,https://github.com/microsoft/vscode/issues/184526,repo: microsoft/vscode | keyword: checklist | state: closed
"Thanks for creating this issue! It looks like you may be using an old version of VS Code, the latest stable release is 1.78.2. Please try upgrading to the latest version and checking whether this issue remains. Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2023-06-07,github/vscodenpa,https://github.com/microsoft/vscode/issues/184526#issuecomment-1581227775,repo: microsoft/vscode | issue: Improper bracket pair highlighting in .ts file | keyword: checklist
"This is the full snippet ```import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core'; import { select, Store } from '@ngrx/store'; import { Observable } from 'rxjs'; import { map } from 'rxjs/operators'; import { ChecklistCollection, ChecklistTemplate } from '../../types/checklist'; import { UpdateChecklistSearchKeyword, UpdateStatusFilter } from './store/actions/checklist-filters.actions'; import { selectChecklistCount, selectChecklistFilters, selectExpandedChecklists, select…",,,,,,Anecdotal,comment,,,,,,,,2023-06-08,github/abhijit-chikane,https://github.com/microsoft/vscode/issues/184526#issuecomment-1582607756,repo: microsoft/vscode | issue: Improper bracket pair highlighting in .ts file | keyword: checklist
"Refactor Preview checklist shall be the difference symbol between the total and some checked items <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> When required to rename <kbd>F2</kbd> with Refactor Preview, I request a future option to show different symbols for checking all item…",,,,,,Anecdotal,issue,,,,,,,,2023-02-12,github/MicroBeaut,https://github.com/microsoft/vscode/issues/174193,repo: microsoft/vscode | keyword: checklist | state: closed
"For example, I pressed <kbd>F2</kbd> to rename ""readStatus"" to ""readStatus1"" then <kbd>ENTER</kbd>. between selecting all items and selecting some items, the symbols of the checkbox are still the same. Difficult to identify which one select all witch one selects only some items. Please take a look at the below capture for your reference, ![image](https://user-images.githubusercontent.com/90538693/221358122-54dee44c-a07f-44c9-b091-fef4ab5dbeba.png)",,,,,,Anecdotal,comment,,,,,,,,2023-02-25,github/MicroBeaut,https://github.com/microsoft/vscode/issues/174193#issuecomment-1445115623,repo: microsoft/vscode | issue: Refactor Preview checklist shall be the difference symbol between the total and some checked items | keyword: checklist
"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 --> This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2023-03-06,github/vscodenpa,https://github.com/microsoft/vscode/issues/174193#issuecomment-1456246748,repo: microsoft/vscode | issue: Refactor Preview checklist shall be the difference symbol between the total and some checked items | keyword: checklist
"<!-- 7e568b0a-a7ce-58b9-b1f9-fd0231e000d2 --> This feature request has not yet received the 20 community [upvotes](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) it takes to make to our backlog. 10 days to go. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2023-04-26,github/vscodenpa,https://github.com/microsoft/vscode/issues/174193#issuecomment-1522675951,repo: microsoft/vscode | issue: Refactor Preview checklist shall be the difference symbol between the total and some checked items | keyword: checklist
"<!-- 8f679c1b-b8df-69ca-c20a-0e1342f111e3 --> :slightly_frowning_face: In the last 60 days, this feature request has received less than 20 community upvotes and we closed it. Still a big Thank You to you for taking the time to create this issue! To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2023-05-07,github/vscodenpa,https://github.com/microsoft/vscode/issues/174193#issuecomment-1537272989,repo: microsoft/vscode | issue: Refactor Preview checklist shall be the difference symbol between the total and some checked items | keyword: checklist
Getting Started: add a new step when git is not installed <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> This could include platform specific instructions. Curious to know which platforms we're talking about here... Windows for sure but what else? Does Raspbian ship git?,,,,,,Anecdotal,issue,,,,,,,,2021-06-02,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/125349,repo: microsoft/vscode | keyword: checklist | state: closed
"@Ayonijakaushik19 thanks! We cannot assign you as you are not a member of this issue, but please feel free to submit a PR. The relevant code is here: https://github.com/microsoft/vscode/blob/920303b974e9ac5b9f7d30d5bc354db5a849c793/src/vs/workbench/contrib/welcome/gettingStarted/common/gettingStartedContent.ts#L314",,,,,,Anecdotal,comment,,,,,,,,2021-07-19,github/JacksonKearl,https://github.com/microsoft/vscode/issues/125349#issuecomment-882770908,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
@JacksonKearl @Ayonijakaushik19 I can take this up if it's not already done. Could you elaborate on what new step needs to be added?,,,,,,Anecdotal,comment,,,,,,,,2021-07-29,github/heptapod42,https://github.com/microsoft/vscode/issues/125349#issuecomment-888858579,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"hello guys, i'm really trying to get started in contributing to open source...can how i get started here?",,,,,,Anecdotal,comment,,,,,,,,2021-08-07,github/louis-nwosu,https://github.com/microsoft/vscode/issues/125349#issuecomment-894640350,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"Hello @TylerLeonhardt @JacksonKearl, this is my first time contributing to an open source project and I'm willing to work on this issue. I just set this repo up on my machine and its working. I had a look at the file you've shared and there are conditions for few steps which checks if git is missing. So, I tried simulating the inexistence of git just by disabling it in vs code settings. Is that fine? And also, should there be a button which says ""Install Git""? If yes, what should it be linked t…",,,,,,Anecdotal,comment,,,,,,,,2021-08-09,github/vighnesh192,https://github.com/microsoft/vscode/issues/125349#issuecomment-895010375,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"We can use https://aka.ms/vscode-install-git. I recommend testing this by fully removing git if at all possible, otherwise there my be unexpected behaviors when a new users is actually running this for the first time.",,,,,,Anecdotal,comment,,,,,,,,2021-08-13,github/JacksonKearl,https://github.com/microsoft/vscode/issues/125349#issuecomment-898744826,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"Could you assign it to me? I would like to work on this quickly. **Edit** I guess, Only members can be assigned. So, I will open a PR and link to this issue.",,,,,,Anecdotal,comment,,,,,,,,2021-08-18,github/jayeshmann,https://github.com/microsoft/vscode/issues/125349#issuecomment-900760511,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"> We can use https://aka.ms/vscode-install-git. I recommend testing this by fully removing git if at all possible, otherwise there my be unexpected behaviors when a new users is actually running this for the first time. Hello, I'm sorry I should've kept you updated but I've made those changes and I just have to test it out by uninstalling git.",,,,,,Anecdotal,comment,,,,,,,,2021-08-18,github/vighnesh192,https://github.com/microsoft/vscode/issues/125349#issuecomment-901017176,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"Just tested this on Windows, and the ""Install Git"" item is marked as ticked when you click on the ""Install Git"" button regardless of whether you have actually installed Git - is this expected? Or would it be better to only tick the button when an installation of git is detected? The screenshot below shows that I clicked the button but didn't actually install Git. The item is ticked but attempting to run git in the terminal (or git pane) fails ![image](https://user-images.githubusercontent.com/1…",,,,,,Anecdotal,comment,,,,,,,,2021-08-25,github/stuartleeks,https://github.com/microsoft/vscode/issues/125349#issuecomment-905306247,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"I uninstalled git and reloaded to see the new ""Install git"" item. Then, I installed git, but the item wasn't checked off, and I wasn't sure what to run to get the item to check off. After reloading again, I didn't see the item. I uninstalled git again and reloaded. The item showed up, but checked off this time. I unchecked the item and reinstalled git, and ran git in the terminal, and the item still wasn't checked off. I switched workspaces, and I didn't see the item again.",,,,,,Anecdotal,comment,,,,,,,,2021-08-26,github/rzhao271,https://github.com/microsoft/vscode/issues/125349#issuecomment-906530748,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
Can we have `setInterval()` which checks if **git** is installed when we reach this step? @JacksonKearl,,,,,,Anecdotal,comment,,,,,,,,2021-09-23,github/vighnesh192,https://github.com/microsoft/vscode/issues/125349#issuecomment-925487946,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
Hi. What is the current status of this issue? Is there a bug for the current implementation? I can work on it if no one is working and someone gives me the context. Thanks.,,,,,,Anecdotal,comment,,,,,,,,2021-10-23,github/ismailarilik,https://github.com/microsoft/vscode/issues/125349#issuecomment-950097971,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"> I uninstalled git and reloaded to see the new ""Install git"" item. > Then, I installed git, but the item wasn't checked off, and I wasn't sure what to run to get the item to check off. After reloading again, I didn't see the item. Isn't it the expected behavior? If VS Code is open and git is installed, even **Source Control** tab doesn't notice this change; a reload is required for that. If this is not the expected behavior and automatic discovery of git existence is necessary, then this tab s…",,,,,,Anecdotal,comment,,,,,,,,2021-10-23,github/ismailarilik,https://github.com/microsoft/vscode/issues/125349#issuecomment-950115645,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
"I am not able to test this at the moment due to some system issues, but I would consider the following sufficient for marking this complete: 1. If a user does not have `git` installed, a tile is shown pointing them to steps for installing git and notifying of a need to reload the window to complete installation. A button/link could be shown to trigger a reload. 2. Upon completing the installation and relaunching VS Code, the tile for installing git is no longer shown, and the tile explaining gi…",,,,,,Anecdotal,comment,,,,,,,,2021-10-25,github/JacksonKearl,https://github.com/microsoft/vscode/issues/125349#issuecomment-951346625,repo: microsoft/vscode | issue: Getting Started: add a new step when git is not installed | keyword: checklist
Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has alrea…,,,,,,Anecdotal,issue,,,,,,,,2025-08-07,github/SilentZhang,https://github.com/microsoft/vscode/issues/260230,repo: microsoft/vscode | keyword: gotcha | state: open
"<img width=""1906"" height=""926"" alt=""Image"" src=""https://github.com/user-attachments/assets/64f8eea1-6271-478b-a7da-79d12484d2c4"" /> https://youtu.be/EkVU2rKIdpc",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/SilentZhang,https://github.com/microsoft/vscode/issues/260230#issuecomment-3162303503,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: gotcha
Hi! Does it work if you disable the python environments extension by doing `python.useEnvironmentsExtension: false` in your user settings? If so this is likely an issue with conda and that extension which I have made comprehensive updates to within the past few days so if you could get the newest pre-release of the python environments extension and try it there that would be great! see https://github.com/microsoft/vscode-python-environments/issues/678 and https://github.com/microsoft/vscode-pyt…,,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/eleanorjboyd,https://github.com/microsoft/vscode/issues/260230#issuecomment-3184908174,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: gotcha
我也遇到了相同的问题，正确的方法是使用 `conda init powershell`达到在powershell启动时自动加载Conda环境的效果。不推荐通过修改PATH变量引入Conda环境，可能影响其他程序。,,,,,,Anecdotal,comment,,,,,,,,2025-08-17,github/tecog,https://github.com/microsoft/vscode/issues/260230#issuecomment-3194174043,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: gotcha
Hi @tecog could you explain exactly what you are seeing? Are you saying you want to activate it without using `conda init powershell` because this should support that and if not then you are facing a bug,,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/eleanorjboyd,https://github.com/microsoft/vscode/issues/260230#issuecomment-3197544004,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: gotcha
"Hi @eleanorjboyd, thanks for following up! Apologies for the confusion — I wasn’t reporting a bug myself. I was just responding to @SilentZhang to share the correct way to configure Conda in PowerShell. What I suggested was using `conda init powershell`, which modifies the PowerShell startup configuration (specifically `$PROFILE.CurrentUserAllHosts`) so that Conda is automatically initialized when a PowerShell session starts. This is the recommended approach instead of manually adding Conda to …",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/tecog,https://github.com/microsoft/vscode/issues/260230#issuecomment-3198958400,repo: microsoft/vscode | issue: Python Interpreter Selection Doesn't Propagate Conda Activation to Integrated Terminal | keyword: gotcha
"Add user related workspace settings <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> Currently, VSCode only supports the settings.json file per workspace. This is fine if you are working on a project alone. But when working on projects as a team, different settings may be necessary…",,,,,,Anecdotal,issue,,,,,,,,2025-08-07,github/NCC1701M,https://github.com/microsoft/vscode/issues/260267,repo: microsoft/vscode | keyword: gotcha | state: open
"Maybe I'm misunderstanding the question here, but isn't this what profiles + settings accomplishes? You would define all of your personal settings there and then the settings which are relevant to your entire team/project would be in the workspace folder.",,,,,,Anecdotal,comment,,,,,,,,2025-08-12,github/Yoyokrazy,https://github.com/microsoft/vscode/issues/260267#issuecomment-3180219002,repo: microsoft/vscode | issue: Add user related workspace settings | keyword: gotcha
"As far as I know are profiles also global. So the Profile ""Abc"" would have the same settings and stuff whenever I select it. What I mean are very specific settings for one workspace but not only for the workspace they are also specific for the current user.",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/NCC1701M,https://github.com/microsoft/vscode/issues/260267#issuecomment-3184823852,repo: microsoft/vscode | issue: Add user related workspace settings | keyword: gotcha
"Ah okay, but then isn't it somewhat viable to have multiple niche profiles? Since you can tie profiles to workspaces/folders through the profile editor, you could duplicate your ""base"" profile and then change it's settings per workspace, then it would automatically be loaded when you switch to the given workspace it was set up for. I think it's unlikely we add another explicit json file within `.vscode/`, but if my above suggestion doesn't work I can label this as a feature request and see if w…",,,,,,Anecdotal,comment,,,,,,,,2025-08-13,github/Yoyokrazy,https://github.com/microsoft/vscode/issues/260267#issuecomment-3185818548,repo: microsoft/vscode | issue: Add user related workspace settings | keyword: gotcha
"Well yeah I could create a profile for a specific dev container but in my opinion that's a little overhead when I just want to set one or two settings for this workspace. I still want to use my default settings so I have to copy them from my default profile to my ""dev container"" profile and I have to keep them in sync. It would be much easier if I could simply create a `settings.user.json` file, add my two or three settings and that's it. And I tried to create a profile for my dev container on …",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/NCC1701M,https://github.com/microsoft/vscode/issues/260267#issuecomment-3189327735,repo: microsoft/vscode | issue: Add user related workspace settings | keyword: gotcha
"Gotcha, I see what you're saying. I'm going to defer to Sandeep on this one who owns that space. Sounds like there is another issue with the profiles + dev container experience, but I'm not sure where that problem necesarily lies in ownership. Might end up being a separate issue/bug in addition to this feature req.",,,,,,Anecdotal,comment,,,,,,,,2025-08-14,github/Yoyokrazy,https://github.com/microsoft/vscode/issues/260267#issuecomment-3190071871,repo: microsoft/vscode | issue: Add user related workspace settings | keyword: gotcha
"Clear all problems in the 'Problems' pane with a button Please add a button in the `Problems` pane that allows the developer to clear all items in there. **Following discussions from #15524, #29169, #66343 and #50448.** Currently we see problems from different sources (linters, tasks, etc) and they sometimes stay there after the problem or the source file is gone, e.g. problems in an unsaved buffer, in files that were renamed, or files removed when we switch Git branches. More often than not I …",,,,,,Anecdotal,issue,,,,,,,,2019-01-23,github/darlanalves,https://github.com/microsoft/vscode/issues/66982,repo: microsoft/vscode | keyword: gotcha | state: open
"(Experimental duplicate detection) Thanks for submitting this issue. Please also check if it is already covered by an existing one, like: - [Clear problems using a task (#50448)](https://www.github.com/Microsoft/vscode/issues/50448) <!-- score: 0.481 --> <!-- potential_duplicates_comment -->",,,,,,Anecdotal,comment,,,,,,,,2019-01-23,github/vscodebot[bot],https://github.com/microsoft/vscode/issues/66982#issuecomment-456775654,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"As I mentioned in other issues, this is an issue with those extensions generating problems. They own the lifecycle of problems and they are responsible for clearing them when become stale. Looks like VS Code has to fix this as extensions are not. So here is my proposal: - Problems view by default does not show problems of a file that is not known to VS Code. It means if a file does not exist and is not opened in VS Code, Problems view will filter them. I am worried to introduce a clear button b…",,,,,,Anecdotal,comment,,,,,,,,2019-01-24,github/sandy081,https://github.com/microsoft/vscode/issues/66982#issuecomment-457124436,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"I don't think that will work - for example, my problems are generated from a cmake build running as a task - I wouldn't expect to have to open any files that have compilation errors. If you would prefer not to add a button, or change the API, maybe just adding a command which destroys the problems window and recreates it would be enough?",,,,,,Anecdotal,comment,,,,,,,,2019-01-24,github/Gruntfuggly,https://github.com/microsoft/vscode/issues/66982#issuecomment-457234136,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"@sandy081 > As I mentioned in other issues, this is an issue with those extensions generating problems. Yes. The issue is an issue from the extensions. But, adding this simple feature allows the users to have a much better experience. > Problems view by default does not show problems of a file that is not known to VS Code. The filter probably isn't a great idea. Plus, if you add a filter, there will need to be a way to disable it and it doesn't catch all the cases. > I am worried to introduce a…",,,,,,Anecdotal,comment,,,,,,,,2019-01-24,github/atishpatel,https://github.com/microsoft/vscode/issues/66982#issuecomment-457253536,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"The issue isn't even just about extensions, it is not perfect problem matchers as well (and for some cases, e.g. webpack it isn't even possible to get a PM that works in all cases) -- so having a clear would be a great addition imo.",,,,,,Anecdotal,comment,,,,,,,,2019-01-25,github/eamodio,https://github.com/microsoft/vscode/issues/66982#issuecomment-457675452,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"> Problems view by default does not show problems of a file that is not known to VS Code. It means if a file does not exist and is not opened in VS Code, Problems view will filter them. I don't agree with this. The lingering errors aren't always about files that have been deleted since the last check. Sometimes the extension doesn't get executed again so the results are stale, etc. etc. Perhaps the clear could be a forced re-run of the extension? I'm not sure if this is a good idea, thoughts?",,,,,,Anecdotal,comment,,,,,,,,2019-01-25,github/adam-ah,https://github.com/microsoft/vscode/issues/66982#issuecomment-457746167,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"If there are ""magic"" extensions that the Problems pane is expected to interact with in a special way, and ""non-magic"" operations such as output from linters that are not deeply aware of VSCode architecture that cause the Problems pane to irrevocably and incrementally fill with garbage, perhaps there's a fundamental design problem here, and the ""non-magic"" operations need to yield be routed to a new, less opinionated panel with a Clear button.",,,,,,Anecdotal,comment,,,,,,,,2019-01-25,github/meshula,https://github.com/microsoft/vscode/issues/66982#issuecomment-457755968,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
Clearing problems is not as straight forward as it is. @dbaeumer mentioned why exactly it is [here](https://github.com/Microsoft/vscode/issues/50448#issuecomment-456745547) > In VS Code problem model problems are owned by the one creating them. An extension could therefore always only apply the delta (e.g.remove one and add another one) instead of always computing all errors and pushing them into the model (the task system by the way does some delta optimizations as well). So if a user clears a…,,,,,,Anecdotal,comment,,,,,,,,2019-01-30,github/sandy081,https://github.com/microsoft/vscode/issues/66982#issuecomment-458961831,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"I don't understand @sandy081 , the ones we are clearing are the ones we never want to see again; the extension has long forgotten about them, that's why they are getting stuck. > since the extension computing them might still think old problems are present The extension doesn't think anything at this point, the stale items have been forgotten about, the deltas are not reflecting them any more. What's wrong with removing the stale items that the extension isn't maintaining any more? > So if a us…",,,,,,Anecdotal,comment,,,,,,,,2019-01-30,github/adam-ah,https://github.com/microsoft/vscode/issues/66982#issuecomment-459095692,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"@sandy081 Ah, thank you for quoting that. It helps us understand and focus on potential solutions. A couple of questions: 1. As adam-ah said, why wouldn't extension know the deltas is all problems? Are the deltas stored by the extensions instead of by vscode? 2. One option is to introduce an API change that notifies the extensions, but there are other options. I'm currently solving the problem by using the ""Reload window"" command. What if the button cleared the list AND *restart extensions* tha…",,,,,,Anecdotal,comment,,,,,,,,2019-01-31,github/atishpatel,https://github.com/microsoft/vscode/issues/66982#issuecomment-459406499,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"@adam-ah If a clear action is introduced, then it cannot be specific/scoped to stale problems. A stale problem can be anything in the given context. It can be from the deleted file, or from a task which did not update on fixing the problem. My point is that, clear action cannot be half complete and it should work for all problems including those which behave correctly. It means that extensions that are playing well and smart (incremental) should be aware of problems being removed. > If the exte…",,,,,,Anecdotal,comment,,,,,,,,2019-02-01,github/sandy081,https://github.com/microsoft/vscode/issues/66982#issuecomment-459667482,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"Hahaha :laughing: Yeah, it's not an ideal solution, but it's about what I do to solve it currently with ""Reload window"". :) So, where do we stand? There have been 5 issues opened with multiple people commenting and the proposed filter solution won't work in many cases. What more would it take to decide if a proper solution with an API change should be implemented? Or should we just live with the reload window?",,,,,,Anecdotal,comment,,,,,,,,2019-02-03,github/atishpatel,https://github.com/microsoft/vscode/issues/66982#issuecomment-460082943,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"Facing this now with Git History plugin. When I view a git history, issues appear in Problem view. And, no way to clear these. A Clear button would be nice. Most IDEs do this.",,,,,,Anecdotal,comment,,,,,,,,2019-02-21,github/jxbetancourt,https://github.com/microsoft/vscode/issues/66982#issuecomment-466046209,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"A good example of why this is needed - I currently have 5 problems coming from vscode's `settings.json` file which is no longer open, meaning I'll need to reload the window to clear them. If vscode can't clear up it's own problems, how can it reasonably expect extensions to do it?",,,,,,Anecdotal,comment,,,,,,,,2019-02-26,github/Gruntfuggly,https://github.com/microsoft/vscode/issues/66982#issuecomment-467378498,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"Any update on this one? It appears that users say we need a clear button, but @sandy081 says ""we need to take the right path"". What is the right path and when could we get this released?",,,,,,Anecdotal,comment,,,,,,,,2019-03-04,github/adam-ah,https://github.com/microsoft/vscode/issues/66982#issuecomment-469216882,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"Right path is to introduce an API for problems removal and let the extensions to adopt to it. As of release, not yet planned.",,,,,,Anecdotal,comment,,,,,,,,2019-03-05,github/sandy081,https://github.com/microsoft/vscode/issues/66982#issuecomment-469727535,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"Nothing wrong with an API, but it doesn't make sense to not have a Clear button. I think as users we are concerned with practical aspects of usage, i.e. having a window not cluttered with useless junk, rather than semantic correctness on the part of extension authors we have no control over.",,,,,,Anecdotal,comment,,,,,,,,2019-03-05,github/meshula,https://github.com/microsoft/vscode/issues/66982#issuecomment-469791838,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"Can't wait for appropriate API to come. For now, I've implemented a whole separate extension to run webpack and show errors in a separate treeview, which is such an overkill...",,,,,,Anecdotal,comment,,,,,,,,2019-03-11,github/0xorial,https://github.com/microsoft/vscode/issues/66982#issuecomment-471501103,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"_(Not sure whether this or #50448 or some other item is the correct place for this comment)_ **_Current workaround: command ""Developer: Reload Window""_** Another use case for such a ""Clear problem(s)"" button or command is this: The extension ""salesforce.salesforcedx-vscode"" enables a command and a context-menu command ""SFDX: Deploy This Source to Org"". You can use the command from the Explorer window/pane without even having a file open. If the deployment fails, a ""Problem"" line will be created…",,,,,,Anecdotal,comment,,,,,,,,2019-06-12,github/jon-freed,https://github.com/microsoft/vscode/issues/66982#issuecomment-501336687,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"@jon-freed my guess is that ""Developer: Reload Window"" is akin to you exiting from VSCode and restarting it, so I'm not surprised it clears the problems. I suggest you lobby the developers of ""salesforce.salesforcedx-vscode"" extension to get them to add an extra command ""SFDX: Clear Problems"". It's their extension that owns the Problem entries you want rid of.",,,,,,Anecdotal,comment,,,,,,,,2019-06-12,github/gjsjohnmurray,https://github.com/microsoft/vscode/issues/66982#issuecomment-501343354,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"@gjsjohnmurray, we already have been through this with the conclusion that it's not feasible to fix every developer's plugins, but it is reasonable to fix VSCode.",,,,,,Anecdotal,comment,,,,,,,,2019-06-12,github/adam-ah,https://github.com/microsoft/vscode/issues/66982#issuecomment-501468482,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"@adam-ah as I understand what @sandy081 is proposing the VSCode team does (I'm not part of that team), extensions might still have to be updated to consent to having their problem items deleted wholesale by the workbench when the user clicks the button.",,,,,,Anecdotal,comment,,,,,,,,2019-06-13,github/gjsjohnmurray,https://github.com/microsoft/vscode/issues/66982#issuecomment-501708911,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"What if you just ask the user for consent? :) I mean the user's agency is to attempt to clear useless messages, irrespective of whether some extension is implemented correctly. This issue has driven my cmake dev/iteration cycles outside of vscode. Happily VS2019's cmake integration did show up in time to help out on that front, but it doesn't really solve the problem.",,,,,,Anecdotal,comment,,,,,,,,2019-06-13,github/meshula,https://github.com/microsoft/vscode/issues/66982#issuecomment-501794848,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"I get this every time I switch between branches, moreover, switching creates more problems as the files from the old branch don't exist.",,,,,,Anecdotal,comment,,,,,,,,2019-07-23,github/eliahuhorwitz,https://github.com/microsoft/vscode/issues/66982#issuecomment-514326781,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"@sandy081: To possibly cut through the issue: The ""Clear"" button we (all) want (and which is there everywhere, in every tool, basically, but I really don't think I need to make the case stronger for this :) ) would not delete ""the problems"" themselves, only those unwanted *messages*, *about* the problems! When clicking that ""Clear"" button, we don't actually want to delete ""the problems themselves"". In our actual ""problem model"", we know that problems will not magically disappear that way, all w…",,,,,,Anecdotal,comment,,,,,,,,2019-08-05,github/xparq,https://github.com/microsoft/vscode/issues/66982#issuecomment-518332498,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"> @adam-ah as I understand what @sandy081 is proposing the VSCode team does (I'm not part of that team), extensions might still have to be updated to consent to having their problem items deleted wholesale by the workbench when the user clicks the button. but we're not asking for it to magically clear the problem. All we want is a way to declutter the problems list.",,,,,,Anecdotal,comment,,,,,,,,2019-09-06,github/mttindustries,https://github.com/microsoft/vscode/issues/66982#issuecomment-528675799,repo: microsoft/vscode | issue: Clear all problems in the 'Problems' pane with a button | keyword: gotcha
"[GHCP] - Create a quick way to skip to previous checkpoint in the chat <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> It gets tedious to scroll through all the interactions on the chat, wen you provide a way to jump to previous checkpoints quickly?",,,,,,Anecdotal,issue,,,,,,,,2025-08-06,github/amithegde,https://github.com/microsoft/vscode/issues/259974,repo: microsoft/vscode | keyword: gotcha | state: open
"Thanks for creating this issue! We figured it's missing some basic information or in some other way doesn't follow our [issue reporting guidelines](https://aka.ms/vscodeissuereporting). Please take the time to review these and update the issue. For Copilot Issues, be sure to visit our [Copilot-specific guidelines](https://github.com/microsoft/vscode/wiki/Copilot-Issues) page for details on the necessary information. Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2025-08-06,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/259974#issuecomment-3157496805,repo: microsoft/vscode | issue: [GHCP] - Create a quick way to skip to previous checkpoint in the chat | keyword: gotcha
"<img width=""227"" height=""77"" alt=""Image"" src=""https://github.com/user-attachments/assets/ed7abb69-afa8-456e-b716-592f2ded7947"" /> been in insiders for the last 2 weeks already :))",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/justschen,https://github.com/microsoft/vscode/issues/259974#issuecomment-3162023170,repo: microsoft/vscode | issue: [GHCP] - Create a quick way to skip to previous checkpoint in the chat | keyword: gotcha
"@justschen - May be I could have worded it better, I was not asking about restring to previous checkpoint. When I have multiple prompts executed in one chat and there are lot of changes, and if I wnat to review what was done in the previous step, there will be lot of scrolling and some times we would miss context of what was done in what order. If we can scroll to each checkpoint quickly we can start reveiwing the chagnes done top down.",,,,,,Anecdotal,comment,,,,,,,,2025-08-07,github/amithegde,https://github.com/microsoft/vscode/issues/259974#issuecomment-3162121600,repo: microsoft/vscode | issue: [GHCP] - Create a quick way to skip to previous checkpoint in the chat | keyword: gotcha
gotcha! sorry for the misunderstanding. i think this is something we can work into the menu like we showed above (with the restore). we'll likely have it hidden by default since we think this toolbar is getting quite busy),,,,,,Anecdotal,comment,,,,,,,,2025-08-08,github/justschen,https://github.com/microsoft/vscode/issues/259974#issuecomment-3169204269,repo: microsoft/vscode | issue: [GHCP] - Create a quick way to skip to previous checkpoint in the chat | keyword: gotcha
"Amusingly incorrect information provided by GitHub Copilot Type: <b>Bug</b> @workspace /explain invalid identifier Workspace The error ""invalid identifier"" is likely caused by the line: In Julia, you need to explicitly use the multiplication operator * between numbers and variables. So 2ub is invalid; it should be 2 * ub. Here's the corrected line: Gotcha: Julia does not allow implicit multiplication between numbers and variables (unlike some math notation). Always use * for multiplication. Let…",,,,,,Anecdotal,issue,,,,,,,,2025-08-05,github/pvc,https://github.com/microsoft/vscode/issues/259774,repo: microsoft/vscode | keyword: gotcha | state: open
"Feature Request: Enable/disable extensions from config file - VSCode Version: 1.18.1 - OS Version: Windows 10 FU ### Explain: There are certain extensions that play well together, and it would be useful to be able to set a config file to enable and disable certain extensions in that workspace. This would be a config file, like the extensions recommendations, but with a series of parameters that would allow to enable and disable certain extensions. This would be like a config file for the ""[Dis]…",,,,,,Anecdotal,issue,,,,,,,,2017-12-15,github/michaeljota,https://github.com/microsoft/vscode/issues/40239,repo: microsoft/vscode | keyword: gotcha | state: open
"We can re-use the existing extensions.json file for this. Currently the json file looks like this: ``` { // See https://go.microsoft.com/fwlink/?LinkId=827846 // for the documentation about the extensions.json format ""recommendations"": [ ""eg2.tslint"", ""dbaeumer.vscode-eslint"", ""msjsdiag.debugger-for-chrome"" ] } ``` We could have new entries in this json file like ``` { ""disabled"": [ ""eg2.tslint"", ""dbaeumer.vscode-eslint"", ""msjsdiag.debugger-for-chrome"" ] } ``` All installed extensions would be …",,,,,,Anecdotal,comment,,,,,,,,2018-06-08,github/ramya-rao-a,https://github.com/microsoft/vscode/issues/40239#issuecomment-395830128,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
@ramya-rao-a Extensions recommendation file is meant to be shared (in team). Disabling and enabling extensions is user specific. Merging these two is not a good idea I guess.,,,,,,Anecdotal,comment,,,,,,,,2018-06-11,github/sandy081,https://github.com/microsoft/vscode/issues/40239#issuecomment-396173748,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"This could be merged with #48743, in that we can prompt a user to enable and disabled extensions which have been marked as recommended, and prompt the user to disable any enabled extensions marked as unwanted. This could be saved per workspace. The control would still be at the hands of the user to accept/reject/permanently ignore those prompts. It could end up with a similar feel to the existing prompt to install recommended extensions, where the team suggests the user do something, but the us…",,,,,,Anecdotal,comment,,,,,,,,2018-06-14,github/JacksonKearl,https://github.com/microsoft/vscode/issues/40239#issuecomment-397470014,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"> It could end up with a similar feel to the existing prompt to install recommended extensions, where the team suggests the user do something, but the user is at liberty to ignore those suggestions. I think this could be useful, as in large team projects, this would allow to have a different but consisten configuration across all the projects inside an organization.",,,,,,Anecdotal,comment,,,,,,,,2018-06-16,github/michaeljota,https://github.com/microsoft/vscode/issues/40239#issuecomment-397815558,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"I would personally prefer to have a whitelist, not a blacklist, of extensions for a particular workspace. The reason is I might add extensions to Code later and I don't want to go to every workspace and explicitly disable that extension. On top of that, if some extension is disabled and I don't have it installed, no action is required :) I would _really_ like to see this feature implemented. My VS Code has tons of extensions, but some projects use only a small slice of those, so I don't see a r…",,,,,,Anecdotal,comment,,,,,,,,2018-07-09,github/jankalfus,https://github.com/microsoft/vscode/issues/40239#issuecomment-403378144,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"@jankalfus I read somewhere that VSCode only loads the extensions that it needs, so having then installed and enable should not slow down your editor if you are not using it, but maybe this can be clarify by the team.",,,,,,Anecdotal,comment,,,,,,,,2018-07-09,github/michaeljota,https://github.com/microsoft/vscode/issues/40239#issuecomment-403507778,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"@michaeljota I would also expect it to work like that, but I remember the C# extension complaining on every VS Code start that it needs to download some files for code completion or something. It didn't matter which project I opened (plain JavaScript). This might have been fixed though, I haven't been using Code for about 6 months, just got back to it a few days ago :)",,,,,,Anecdotal,comment,,,,,,,,2018-07-09,github/jankalfus,https://github.com/microsoft/vscode/issues/40239#issuecomment-403510127,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"@jankalfus Well, yeah, I remember that. But I think that's only the first time it updates or something like that. Like I said, maybe the team can explain a little bit about how/when the extensions are actually being used.",,,,,,Anecdotal,comment,,,,,,,,2018-07-09,github/michaeljota,https://github.com/microsoft/vscode/issues/40239#issuecomment-403512102,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"> I read somewhere that VSCode only loads the extensions that it needs, so having then installed and enable should not slow down your editor if you are not using it, but maybe this can be clarify by the team. Each extension declares when it should be activated by VS Code. See [Activation Events](https://code.visualstudio.com/docs/extensionAPI/activation-events)",,,,,,Anecdotal,comment,,,,,,,,2018-07-09,github/ramya-rao-a,https://github.com/microsoft/vscode/issues/40239#issuecomment-403564545,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
We already support this feature in Extensions view. You can go to Installed Extensions view in Extensions viewlet and use `Disable (Workspace)` action under gear icon to configure extensions to be enabled for the given workspace. ![image](https://user-images.githubusercontent.com/10746682/42810201-a5980456-89b7-11e8-995c-1b283a51fe88.png),,,,,,Anecdotal,comment,,,,,,,,2018-07-17,github/sandy081,https://github.com/microsoft/vscode/issues/40239#issuecomment-405525987,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"I know you can disable an extension in a Workspace, what I'm asking is a file to do this automatically.",,,,,,Anecdotal,comment,,,,,,,,2018-07-17,github/michaeljota,https://github.com/microsoft/vscode/issues/40239#issuecomment-405654638,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
From @FancyBanana Currently it seems that information about which extension is enabled/disabled is stored globally. I propose that workspace enabled/disabled state should be stored in .vscode folder. This way the configuration will survive moving/copying project folder to another location.,,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/sandy081,https://github.com/microsoft/vscode/issues/40239#issuecomment-407427057,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"@sandy081 No, my idea is pretty much creating another .json config file inside .vscode folder that overrides enabled/disabled state of extensions. Also a good point form @burtek: > Please keep in mind, that if implemented, the state should be kept in a separate file that could be explicitly ignored within VCS, so that it won't be shared between developers working on the same project. Especially, it should not be put in extensions.json, as this file may contain extensions recommendations that ar…",,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/FancyBanana,https://github.com/microsoft/vscode/issues/40239#issuecomment-407433668,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
@FancyBanana creating a file under `.vscode` folder will have side affects like @brutek mentioned.,,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/sandy081,https://github.com/microsoft/vscode/issues/40239#issuecomment-407434916,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"@sandy081 I have seen the same feature requested many times. It seems to be something people (including myself) care about. The answer that is often given is that we should just manually enable/disable extensions on a per workspace basis, but this quickly gets tedious for developers working on many projects. I understand that there are limitations to what additions we can make to the vscode architecture (even though I don't know the nature and extent of these limitations), therefore I would lik…",,,,,,Anecdotal,comment,,,,,,,,2018-10-09,github/JordyScript,https://github.com/microsoft/vscode/issues/40239#issuecomment-428178885,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"> @FancyBanana I think your request is for synchronising workspaces? I'd love this feature implemented and for me it would definitely be to sync workspaces: I use multiple machines for my work, I can already sync installed extensions and a number of config settings using dedicated extensions (e.g. shan.code-settings-sync) but if I want to disable some extensions in specific workspaces then I have to manually replicate the configuration across all machines",,,,,,Anecdotal,comment,,,,,,,,2018-10-10,github/carlocardella,https://github.com/microsoft/vscode/issues/40239#issuecomment-428438851,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"@JordyScript Your solution sounds like a good compromise, but there's couple of inconveniences i can see: * I personally have ~10 extensions active all the time and i only manage at most 5 per workspace * Themes are counted as extentions Those amount to the fact that `extentions.json` will have a lot of boilerplate code.",,,,,,Anecdotal,comment,,,,,,,,2018-10-10,github/FancyBanana,https://github.com/microsoft/vscode/issues/40239#issuecomment-428554771,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"@FancyBanana You raise good points. I agree that the `extensions.json` file should not be littered with user specific preferences unrelated to the project, like themes or general utilities, rather than project specific preferences, since the original aim of this file was to share between team members. You don't wanna end up with a list of recommendations, most of which other users will want to ignore. What we need then, in addition to those aforementioned commands, is a global whitelist of exte…",,,,,,Anecdotal,comment,,,,,,,,2018-10-11,github/JordyScript,https://github.com/microsoft/vscode/issues/40239#issuecomment-428855241,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"I am having issues where my environment is not acting 'exactly' the same way as my co-workers is. I would love to have a ""disable ALL my extensions and settings"" and ""install all the extensions and settings my coworker"" has (or in this case, the .vscode/settings.json). even if it's temporary. Because something in my setup just isn't right and I don't know what it is, because I had VSCode a long time before we started this project and obviously has a bunch of extensions and settings that are in …",,,,,,Anecdotal,comment,,,,,,,,2019-01-10,github/WORMSS,https://github.com/microsoft/vscode/issues/40239#issuecomment-453048596,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
@WORMSS you can disable all installed extensions temporarily. There is a command to do that. Also you can point to different users data directory and extensions directory if you want to run temporarily without existing extensions/settings/state. For that you can use `--user-data-directory` and `--extensions-dir` arguments in the command line.,,,,,,Anecdotal,comment,,,,,,,,2019-01-10,github/sandy081,https://github.com/microsoft/vscode/issues/40239#issuecomment-453129388,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"I doubt I could do `--extensions-dir=""\\vpn\external-machine\ignore-their-os-just-give-me-there-vscode-folder\""` But I will give the secondary user directory thing a go, as I have somehow destroyed vs code to the point that everything that was cool about it (the quick fix, the renaming variables, the auto import) have all stopped working and I can't get them to work again.",,,,,,Anecdotal,comment,,,,,,,,2019-01-10,github/WORMSS,https://github.com/microsoft/vscode/issues/40239#issuecomment-453131958,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
I need a way that allows me to quickly disable/enable batches of extensions when there is a problem with extension interference and I need to debug various settings and/or find which extensions are responsible for the wrong observable behaviour. Disabling/Enabling all extensions isn't an option as it also enables all extensions that were previously disabled and are still meant to be.,,,,,,Anecdotal,comment,,,,,,,,2019-03-16,github/ackvf,https://github.com/microsoft/vscode/issues/40239#issuecomment-473512211,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"*There is another use case: **auto-enable extensions per session**. Since my [other issue](https://github.com/Microsoft/vscode/issues/72255) was closed:* We develop apps in node, asp.net, and python. We have extensions for each platform, so my vscode has almost 50 extensions, and some conflict with each other. Switching between projects is challenging, as I need to disable/enable various extensions. It would be nice to have something similar to [`.vscode/extensions.json`](https://code.visualstu…",,,,,,Anecdotal,comment,,,,,,,,2019-04-25,github/lonix1,https://github.com/microsoft/vscode/issues/40239#issuecomment-486635720,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"In my case I would love to have a file or section in extension.json that _is shared_ through git because it would help others in our team as well. Let's say someone new starts to work with your project in your company and installs all the recommendations but also has similar plugins already installed in his Code installation (linter or formatters that work without configurations). Now this person would have problems, will format things different, need to reconfigure his default formatter or ...…",,,,,,Anecdotal,comment,,,,,,,,2019-06-29,github/muuvmuuv,https://github.com/microsoft/vscode/issues/40239#issuecomment-506945058,repo: microsoft/vscode | issue: Feature Request: Enable/disable extensions from config file | keyword: gotcha
"Feature Request: Support for private marketplace/gallery We have created several VSIX extension that have no use to anybody else except our company. We would like to host our own private extension gallery and have an ability to specify alternative extension gallery paths (like ""Additional Extension Galleries"" in Visual Studio 2015). - VSCode Version: 1.10.1 - OS Version: Windows 10",,,,,,Anecdotal,issue,,,,,,,,2017-03-02,github/levonmamikonyan,https://github.com/microsoft/vscode/issues/21839,repo: microsoft/vscode | keyword: gotcha | state: open
"Hi, Currently we don't have a way to do this but it's not the first time we have heard this request so adding the correct label. We don't have this in our current backlog but this will help us keep track of it. Thanks Sean",,,,,,Anecdotal,comment,,,,,,,,2017-03-07,github/seanmcbreen,https://github.com/microsoft/vscode/issues/21839#issuecomment-284883869,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"This is a feature that we would welcome very, very much as well, as it's kind of time consuming and annoying to have to build and forward the vsix file every time you make changes :-)",,,,,,Anecdotal,comment,,,,,,,,2017-06-13,github/hilleer,https://github.com/microsoft/vscode/issues/21839#issuecomment-308092527,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
So viewing the code don't think i'll have time anytime soon to submit pull request. https://github.com/Microsoft/vscode/blob/67cd9258fd0ed429ddc626d488d48bd65c2f2283/build/lib/extensions.js#L48 https://github.com/Microsoft/vscode/blob/67cd9258fd0ed429ddc626d488d48bd65c2f2283/build/lib/extensions.js#L67 https://github.com/Microsoft/vscode/blob/67cd9258fd0ed429ddc626d488d48bd65c2f2283/build/lib/extensions.js#L75 These appear to be the main lines used for getting extensions from the market place. …,,,,,,Anecdotal,comment,,,,,,,,2017-11-28,github/ibigpapa,https://github.com/microsoft/vscode/issues/21839#issuecomment-347619243,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"Is it possible to publish extensions on the marketplace and have them not appear in search? I'm thinking for cases where the extension is not really secret, just not generally useful outside a company.",,,,,,Anecdotal,comment,,,,,,,,2018-02-26,github/adeolemon,https://github.com/microsoft/vscode/issues/21839#issuecomment-368598921,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
i am fine with the ability to just copy/paste the addon in the extension folder.... the community could develop an own gallery already,,,,,,Anecdotal,comment,,,,,,,,2018-03-20,github/Luraktinus,https://github.com/microsoft/vscode/issues/21839#issuecomment-374647856,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"@Luraktinus so if you have a private extension that many employees are using, flow could be as following; 1. Distribute it to employees. 2. Employees all have to install it manually. This, to me at least, includes a lot of time wasted, compared to just distributing it to something like the marketplace.",,,,,,Anecdotal,comment,,,,,,,,2018-03-21,github/hilleer,https://github.com/microsoft/vscode/issues/21839#issuecomment-374861219,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
@hilleer I mean that the community could do a plug-in to replace the functionality of the gallery.,,,,,,Anecdotal,comment,,,,,,,,2018-03-21,github/Luraktinus,https://github.com/microsoft/vscode/issues/21839#issuecomment-375040675,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"As a stop gap we've setup an in-house webserver and hosted all extensions there. It also exposed an API endpoint to return latest number version for a given extension. Then for every extension we had a timer to ping service every minute, check the version and compare with the one installed. So if a new version was detected it would prompt to upgrade and then from the it was just a bunch of chained promises (show a prompt, on OK download an extension, show a prompt to restart, restart). Then the…",,,,,,Anecdotal,comment,,,,,,,,2018-03-21,github/levonmamikonyan,https://github.com/microsoft/vscode/issues/21839#issuecomment-375047098,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"Yeah. I have implement one of those custom plugin galleries before for another extensible product I worked on. The plugins were managed in a SharePoint document library. It dealt with the versioning, exposed a RESTful interface, authentication, possibly user authorization. It worked. But more and more enterprises move to O365. where it is suddenly much more difficult for a desktop application to interact with. So if you tried to implement this custom extension gallery based on any cloud hosted …",,,,,,Anecdotal,comment,,,,,,,,2018-03-22,github/jan-dolejsi,https://github.com/microsoft/vscode/issues/21839#issuecomment-375451247,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"Hi, Suggestion, I think most of people here don't need a complete marketplace. I think what we need first is a command that install an extension from a trusted url.",,,,,,Anecdotal,comment,,,,,,,,2018-11-15,github/llgcode,https://github.com/microsoft/vscode/issues/21839#issuecomment-439088187,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"Besides customized extensions, the private marketplace should be able to select subset of public extensions into it. That way we have a complete required extensions in one place. Of cos the public extensions are just a proxied uri.",,,,,,Anecdotal,comment,,,,,,,,2019-01-11,github/naivefun,https://github.com/microsoft/vscode/issues/21839#issuecomment-453371051,repo: microsoft/vscode | issue: Feature Request: Support for private marketplace/gallery | keyword: gotcha
"Exclude all files except for... The files exclude allows you to set `true/false` values, but it doesn't seem to take them completely into account. For example, I would like to hide **everything** except for the scripts folder. You might then assume that this would do this: ``` { ""files.exclude"": { ""**/*"": true, ""**/Scripts"": false } } ``` It does not do that, it just hides everything. In order to achieve this, you must list every file and directory except for the **Scripts** directory, and who …",,,,,,Anecdotal,issue,,,,,,,,2015-12-01,github/TheColorRed,https://github.com/microsoft/vscode/issues/869,repo: microsoft/vscode | keyword: gotcha | state: open
"The comments above the `files.exclude` says `Configure glob patterns for excluding files and folders.`. the `glob` can use `!` to exclude files and folders(which is not implemented by vscode now). for example: ``` js { // Configure glob patterns for excluding files and folders. ""files.exclude"": { ""*.js"": true, ""!gulpfile.js"": true } } ```",,,,,,Anecdotal,comment,,,,,,,,2015-12-02,github/plantain-00,https://github.com/microsoft/vscode/issues/869#issuecomment-161205895,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
:+1: I also want negated glob patterns since I use `Jakefile.js` to describe Jake tasks for my TypeScript project.,,,,,,Anecdotal,comment,,,,,,,,2016-01-30,github/xfoxfu,https://github.com/microsoft/vscode/issues/869#issuecomment-177166984,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
":+1: I need negated glob files as we store our many services in `node_modules` under the same repo. We hide `node_modules` because it slows down the editor, and clutters the workspace. But we have to use directory symlinks so we can edit the specific services in another folder. If we could exclude these folders from being ignored, we could remove the symlinks and significantly reduce the complexity of our project. (Another issue is, debugging node in a symlinked folder doesn't work in vscode, t…",,,,,,Anecdotal,comment,,,,,,,,2016-02-07,github/JAForbes,https://github.com/microsoft/vscode/issues/869#issuecomment-181137453,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"Yes, we need negated glob exclusions. In Node, the built-in place to put application-wide modules is in a node_modules folder. You would want to be able to exclude node_modules except for your project's modules under e.g. node_modules/_local so that you can easily navigate to your own modules without also including all the imported ones. Edit: this glob already works for the scenario above: ``` JSON { ""search.exclude"": { ""**/node_modules"": false, ""**/node_modules/!(.local)"": true, ""**/bower_com…",,,,,,Anecdotal,comment,,,,,,,,2016-03-17,github/AdamAndersonFalafelSoftware,https://github.com/microsoft/vscode/issues/869#issuecomment-197895198,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
Would this feature allow me to exclude *_/_.css but not *_/_.cssx.css? Can anyone think of a way this could be done now?,,,,,,Anecdotal,comment,,,,,,,,2016-04-03,github/skyaddict,https://github.com/microsoft/vscode/issues/869#issuecomment-205052014,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"Sorry to bother, but I have tried many derivations of the following, and I still can't seem to find the secret sauce. ""**/Css"": false, ""**/Css/*!(.cssx).css"":true ""**/Css"": false, ""**/Css/!(*.cssx.css)"":true",,,,,,Anecdotal,comment,,,,,,,,2016-04-04,github/skyaddict,https://github.com/microsoft/vscode/issues/869#issuecomment-205520643,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"@JAForbes, @skyaddict: I was about to write a reply saying that it already works, but then a mystery was revealed. I can confirm that the search.excludes setting above works for excluding all subfolders of node_modules except for a folder named .local. That is 100% definitely working. However, I was not able to get the same set of patterns to work on a folder other than node_modules, or on individual files. So this issue definitely still needs attention.",,,,,,Anecdotal,comment,,,,,,,,2016-04-05,github/AdamAndersonFalafelSoftware,https://github.com/microsoft/vscode/issues/869#issuecomment-205868592,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"So right now, vscode is not supporting extended globbing for their exclude options. Can someone briefly explain what the holdup is?",,,,,,Anecdotal,comment,,,,,,,,2016-05-26,github/CreepGin,https://github.com/microsoft/vscode/issues/869#issuecomment-221745653,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"I won't say it is a deal breaker but getting annoying not able to do this. In angular 2 project we usually exclude all js file but still want to see a few js setting files, like webpack.config.js, systemjs.config.js, etc.",,,,,,Anecdotal,comment,,,,,,,,2016-06-27,github/J-Siu,https://github.com/microsoft/vscode/issues/869#issuecomment-228827208,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"Aw man, I'd sure love to see this working! ``` ""files.exclude"": { ""node_modules/*"": true, ""!node_modules/susa"": true, } ``` Or maybe this: ``` ""files.exclude"": { ""node_modules/*"": true, ""node_modules/susa"": false, } ``` Not sure if `false` could be equivalent to prefixing with ""!"". Maybe.",,,,,,Anecdotal,comment,,,,,,,,2016-07-30,github/chase-moskal,https://github.com/microsoft/vscode/issues/869#issuecomment-236382298,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
always having Sublime open so I can search specific files that VSC won't let me is quite painful. A negative pattern here sounds rather straight-forward.,,,,,,Anecdotal,comment,,,,,,,,2016-09-04,github/bladnman,https://github.com/microsoft/vscode/issues/869#issuecomment-244609097,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"i wanted to hide all _.js-files if there is an equal *.ts file. I just added ""__/_.js"": { ""when"": ""$(basename).ts""}, which excludes all js-files except js-files like gulpfile.js etc",,,,,,Anecdotal,comment,,,,,,,,2016-10-24,github/TobiasKoller,https://github.com/microsoft/vscode/issues/869#issuecomment-255660177,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"@TobiasKoller you are a genius, sir, and I thank you! I only needed to modify it slightly to get it to work in my project: ``` ""**/*.js"": { ""when"": ""$(basename).ts"" }, ```",,,,,,Anecdotal,comment,,,,,,,,2016-10-28,github/RandScullard,https://github.com/microsoft/vscode/issues/869#issuecomment-256918658,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"yes negating pattern would be very welcome, exactly because of the use case described several times above (node_modules folder with private libraries that need to be accessable)",,,,,,Anecdotal,comment,,,,,,,,2016-11-07,github/Zjaaspoer,https://github.com/microsoft/vscode/issues/869#issuecomment-258805962,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"I created a work around, in my case I want to hide all node_modules except folders starting with ""ap"" ``` ""search.exclude"": { ""**/node_modules"": false, ""**/node_modules/.*"": true, // hide all folders that doesn't start with letter 'a' ""**/node_modules/[bcdefghijklmnopqrstuvwxyz]*"": true, // hide all folders that doesn't start with 'ap' ""**/node_modules/a[abcdefghijklmnoqrstuvwxyz]*"": true } ``` ``` ""files.exclude"": { ""**/node_modules"": false, ""**/node_modules/.*"": true, // hide all folders that…",,,,,,Anecdotal,comment,,,,,,,,2016-11-25,github/it6,https://github.com/microsoft/vscode/issues/869#issuecomment-263006643,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"I am not understanding how a configuration like this: ```json ""files.exclude"": { ""node_modules/*"": true, ""!node_modules/susa"": true, } ``` or this: ```json ""files.exclude"": { ""*.js"": true, ""!gulpfile.js"": true } ``` Would make any sense or is even readable. What you are basically expressing is to (case 1) ""exclude everything that is inside `node_modules` folder and also everything which is not `node_modules/susa`"" and (case 2) ""exclude every JS file and every file that is not `gulpfile.js`"". Ho…",,,,,,Anecdotal,comment,,,,,,,,2017-01-21,github/bpasero,https://github.com/microsoft/vscode/issues/869#issuecomment-274273908,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"Yes, to allow more specific items to override less specific items is what I thought the behavior would be, I spent hours until I gave up, and now found it was impossible. I was thinking this would work: ```json { ""search.exclude"": { ""**/system"": true, ""**/system/**/*.ps*"":false } } ``` Where everything in system is ignore except those files that are .ps* (ie. ps1, psm1, etc...) I hope this is supported in the near term. Thanks guys-Eric",,,,,,Anecdotal,comment,,,,,,,,2017-01-30,github/erichiller,https://github.com/microsoft/vscode/issues/869#issuecomment-276221831,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"@bpasero I don't know about you, but my ruleset is limited to 5-10 lines. So ""heavily optimizing when we traverse"" seems like a waste as it takes away from the configuration possibilities.",,,,,,Anecdotal,comment,,,,,,,,2017-01-31,github/csholmq,https://github.com/microsoft/vscode/issues/869#issuecomment-276301176,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"Having users on my team accidentally edit something because it's json and everywhere else we're editing files by hand, except this 1 or 2 files that are generated as part of the build is very bad. It would be valuable to be able to hide these files. The work around is of course to place the files in specific folders, that the exclude pattern doesn't match, but that's not always possible, or smart. Is there anywhere I can go to cast my (+1) vote for this as a valuable feature? txs, Alan",,,,,,Anecdotal,comment,,,,,,,,2017-02-02,github/goblinfactory,https://github.com/microsoft/vscode/issues/869#issuecomment-277089044,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"In the example that @bpasero mentioned (where the user wants to exclude all of `node_modules` **except** for `node_modules/susa`), there might be a way to split the difference and get the benefit of heavy optimization in most cases, while still allowing the ""show `node_modules/susa`"" use case. Let's look at a sample case where we want to exclude the entire `output` directory, and all of `node_modules` **except** for `node_modules/susa`: ```json ""files.exclude"": { ""node_modules"": true, ""node_mod…",,,,,,Anecdotal,comment,,,,,,,,2017-02-09,github/rmunn,https://github.com/microsoft/vscode/issues/869#issuecomment-278562565,repo: microsoft/vscode | issue: Exclude all files except for... | keyword: gotcha
"Provide a picker of opened editors excluding duplicates <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> TLDR; I would like to have the ability to invoke a command to open a searchable list of all of the open files in a given window of VSCode, de-duplicated, regardless of what ""gro…",,,,,,Anecdotal,issue,,,,,,,,2021-07-16,github/macintacos,https://github.com/microsoft/vscode/issues/128874,repo: microsoft/vscode | keyword: gotcha | state: open
"(Experimental duplicate detection) Thanks for submitting this issue. Please also check if it is already covered by an existing one, like: - [Double clicking a result in a Search Editor opens a new editor when one already exists (#126594)](https://www.github.com/microsoft/vscode/issues/126594) <!-- score: 0.491 --> - [Change focus between different groups (#127928)](https://www.github.com/microsoft/vscode/issues/127928) <!-- score: 0.456 --> - [Explore ways to not pollute editor groups with term…",,,,,,Anecdotal,comment,,,,,,,,2021-07-16,github/vscodebot[bot],https://github.com/microsoft/vscode/issues/128874#issuecomment-881688311,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"I couldn't find an issue that described what I'm looking for, and none of those issue appear to be the same either.",,,,,,Anecdotal,comment,,,,,,,,2021-07-16,github/macintacos,https://github.com/microsoft/vscode/issues/128874#issuecomment-881690706,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"Just curious, is this setting disabled: `Workbench >Editor: Reveal if Open`. The default is disabled. When I <kbd>Ctrl</kbd>+<kbd>P</kbd> and select a file already opened in another editor group. It opens another copy in the current group, it does not reveal the same file in some other group.",,,,,,Anecdotal,comment,,,,,,,,2021-07-17,github/ArturoDent,https://github.com/microsoft/vscode/issues/128874#issuecomment-881786883,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"@ArturoDent thanks for the pointer! `ctrl+p` is just the generic file picker though - I want to see a list of only the files that are currently open, not search through all of the files in my project (listed by order of recency). Essentially, I want a de-duplicated list of open files from the ""View: Show All Editors By Most Recently Used"" view, that allows me to open any of the files in that list in the editor that currently has focus. This currently doesn't seem to be possible. EDIT: And to cl…",,,,,,Anecdotal,comment,,,,,,,,2021-07-19,github/macintacos,https://github.com/microsoft/vscode/issues/128874#issuecomment-882759160,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
![image](https://user-images.githubusercontent.com/900690/127818830-3930ce58-fbb5-44ae-9cee-3060a373bccc.png),,,,,,Anecdotal,comment,,,,,,,,2021-08-02,github/bpasero,https://github.com/microsoft/vscode/issues/128874#issuecomment-890780819,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"I'm a little confused about why this was closed. @bpasero The screenshot you provided proves my point doesn't it? It shows the same file, duplicated, in the picker, and I want an option to not show the file duplicated there. I just want to see a list of all the current files I have open, regardless of what group they're in, and be able to open the file I choose in the group I'm currently in. Asking this question in Stack Overflow won't really get me anywhere because as far as I know, this doesn…",,,,,,Anecdotal,comment,,,,,,,,2021-08-04,github/macintacos,https://github.com/microsoft/vscode/issues/128874#issuecomment-892598355,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
Isn’t the deduplication covered by ![0E695993-489C-40BB-9D4B-7BECE07F2F73](https://user-images.githubusercontent.com/2644648/135923501-5bc9f0f0-34e6-4637-91a8-c67935f7c226.jpeg) Or am I missing something?,,,,,,Anecdotal,comment,,,,,,,,2021-10-04,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/128874#issuecomment-933847416,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"@TylerLeonhardt I think that only shows you all of the ""active"" tabs in the group you're currently in? I want to see all of the tabs in all editor groups, and then open the file that I select in the current group that I'm in.",,,,,,Anecdotal,comment,,,,,,,,2021-10-04,github/macintacos,https://github.com/microsoft/vscode/issues/128874#issuecomment-933853097,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"@macintacos gotcha. And `cmd/ctrl+P` doesn't work in this scenario because you only wanna look through open editors and not files in your workspace? I ask this because `cmd/ctrl+P` seems to have the ""open this in the current group"" behavior that you're looking for... but the ""this"" is not quite right.",,,,,,Anecdotal,comment,,,,,,,,2021-10-04,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/128874#issuecomment-933921877,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"Yep, exactly! There's no picker that I know of that'll allow me to look through just a list of the files I currently have open (regardless of group) and open one of those files in the current group. Having that available (even if it were one of those `edt xyz` combos) would be great.",,,,,,Anecdotal,comment,,,,,,,,2021-10-05,github/macintacos,https://github.com/microsoft/vscode/issues/128874#issuecomment-934057384,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
"For onlookers - I was tired of waiting for a built-in method of doing this, so I made an extension for it instead: https://marketplace.visualstudio.com/items?itemName=excessive-dev.buffers Still believe that this should be native functionality, so I will leave this open.",,,,,,Anecdotal,comment,,,,,,,,2025-03-26,github/macintacos,https://github.com/microsoft/vscode/issues/128874#issuecomment-2752829657,repo: microsoft/vscode | issue: Provide a picker of opened editors excluding duplicates | keyword: gotcha
[Remote-SSH Bug]: `rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host` ### Is there an existing issue for this bug? - [x] I have searched the existing issues ### Required Troubleshooting Steps - [x] I have followed these troubleshooting steps - [x] I have tried both values of the `remote.SSH.useLocalServer` setting [(more info here)](https://github.com/microsoft/vscode-remote-release/wiki/Remote-SSH-troubleshooting#troubleshooting-steps) ### Connec…,,,,,,Anecdotal,issue,,,,,,,,2024-12-03,github/nicola-lunghi,https://github.com/microsoft/vscode/issues/236403,repo: microsoft/vscode | keyword: gotcha | state: open
"It seems like from both in my testing and from your logs, the 'terminal shell path' is `cmd.exe`, not powershell? In your log, i'm not seeing any reference to `powershell` or `pwsh` - is this the right log you've copied in? If you were to copy the command into the shell Remote - SSH is resolving, do you still see an issue? ``` [12:07:56.645] Running script with connection command: ""C:\Program Files\OpenSSH\ssh.exe"" -D 51543 gpuclass sh [12:07:56.648] Generated SSH command: 'type ""C:\Users\nicol…",,,,,,Anecdotal,comment,,,,,,,,2024-12-10,github/joshspicer,https://github.com/microsoft/vscode/issues/236403#issuecomment-2549461519,repo: microsoft/vscode | issue: [Remote-SSH Bug]: `rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host` | keyword: gotcha
hi the issue happens if you have power shell as shell vscode tries to execute the command above to open ports but without ampersand the commands fails (it also doesn't print the stderr on the log) and vscode remain stuck waiting for the port to be opened I've tested setting the shell both as powershell and cmd and the command for opening ports is the same. it works in cmd.exe but fails in powershell. as i said in the ticket the generated command for powershell is wrong and fails without the & a…,,,,,,Anecdotal,comment,,,,,,,,2024-12-13,github/nicola-lunghi,https://github.com/microsoft/vscode/issues/236403#issuecomment-2549461524,repo: microsoft/vscode | issue: [Remote-SSH Bug]: `rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host` | keyword: gotcha
"can you verify in powershell that the generated ssh command to open ports works in powershell? this was working until not long ago 1. create test.sh ``` #!/bin/sh hostname ``` 2. launch in powershell ``` type "".\test.sh"" | ""C:\Program Files\OpenSSH\ssh.exe"" -D 60261 myhost sh' ``` it fails on my host as powershell don't pass the arguments as parameters of the command it works in powershell putting an & after the | ``` type "".\test.sh"" | & ""C:\Program Files\OpenSSH\ssh.exe"" -D 60261 myhost sh' `…",,,,,,Anecdotal,comment,,,,,,,,2024-12-13,github/nicola-lunghi,https://github.com/microsoft/vscode/issues/236403#issuecomment-2549461530,repo: microsoft/vscode | issue: [Remote-SSH Bug]: `rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host` | keyword: gotcha
"Gotcha, the same thing happens for me if I copy that command into powershell. From what I can tell from your logs, this command is _not_ being run in powershell, but in `C:\WINDOWS\System32\cmd.exe`: ``` [12:07:56.648] Generated SSH command: 'type ""C:\Users\nicolal\AppData\Local\Temp\vscode-linux-multi-line-command-gpuclass-198890716.sh"" | ""C:\Program Files\OpenSSH\ssh.exe"" -D 51543 gpuclass sh' [12:07:56.649] Using connect timeout of 17 seconds [12:07:56.650] Terminal shell path: C:\WINDOWS\Sy…",,,,,,Anecdotal,comment,,,,,,,,2024-12-13,github/joshspicer,https://github.com/microsoft/vscode/issues/236403#issuecomment-2549461538,repo: microsoft/vscode | issue: [Remote-SSH Bug]: `rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host` | keyword: gotcha
"@connor4312, do you have any suggestions on what to do for ``` [12:08:19.419] [server] rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host [12:08:19.419] [server] stack trace: CodeExpectedError: Could not find pty 7 on pty host [12:08:19.419] [server] at I.W (file:///home/lunghi/.vscode-server-insiders/cli/servers/Insiders-2ed1e9b48c8f55e1b92322a992c6c12b1e86e444/server/out/vs/platform/terminal/node/ptyHostMain.js:48:12233) [12:08:19.419] [server] a…",,,,,,Anecdotal,comment,,,,,,,,2024-12-13,github/joshspicer,https://github.com/microsoft/vscode/issues/236403#issuecomment-2549461547,repo: microsoft/vscode | issue: [Remote-SSH Bug]: `rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host` | keyword: gotcha
I am sorry @joshspicer maybe I was not clear The log I've attached by mistake is the one from when the command works -> If I select cmd.exe as my shell everything works fine. In powershell (the default shell) the issue is that the command is the same as the one in the cmd shell -> and it fails. the extension should use a different command in powershell. I don't know how to implement this otherwise I'll send a fix myself,,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/nicola-lunghi,https://github.com/microsoft/vscode/issues/236403#issuecomment-2587552647,repo: microsoft/vscode | issue: [Remote-SSH Bug]: `rejected promise not handled within 1 second: CodeExpectedError: Could not find pty 7 on pty host` | keyword: gotcha
"Skip re-requesting implicit code actions if diagnostics around the cursor have not changed https://github.com/microsoft/vscode/blob/a0185ee7cbcceda421361a2af44989dd40916a51/src/vs/editor/contrib/codeAction/browser/codeActionModel.ts#L57 I believe the implicit code actions are re-requested whenever diagnostics in the file change. Instead I proposed that we only re-request code actions if the diagnostics on the cursor's currently line change. For example, if I'm one line 100 and the diagnostics a…",,,,,,Anecdotal,issue,,,,,,,,2024-06-12,github/mjbvz,https://github.com/microsoft/vscode/issues/215340,repo: microsoft/vscode | keyword: gotcha | state: open
Also I'm not 100% sure this is correct but `_onMarkerChanges` should perhaps check that the cursor is not whitespace enclosed before requesting the diagnostics. I just noticed that we do that in some cases but not others,,,,,,Anecdotal,comment,,,,,,,,2024-06-12,github/mjbvz,https://github.com/microsoft/vscode/issues/215340#issuecomment-2163724345,repo: microsoft/vscode | issue: Skip re-requesting implicit code actions if diagnostics around the cursor have not changed | keyword: gotcha
"gotcha! some points/questions: - atm, code actions are retriggered any time the cursor changes as well. - is there a case where diagnostics change elsewhere and the current cursor and diagnostics on that line don't change and nothing is typed (so cursor auto triggers don't happen)? I don't think I know of a good example right now where this happens. - I see the `autoTrigger` happening from `onMarkersChanged` mostly when something is typed. in these cases (ie, if I type inside a string - no new …",,,,,,Anecdotal,comment,,,,,,,,2024-06-13,github/justschen,https://github.com/microsoft/vscode/issues/215340#issuecomment-2166933011,repo: microsoft/vscode | issue: Skip re-requesting implicit code actions if diagnostics around the cursor have not changed | keyword: gotcha
"Good points. Adding a few thoughts: 1. Yes that's used for the lightbulb widget but worth exploring if we're firing too often here too 1. Possible today but seems kind of suspect if an extension/language is actually doing it. I'd say we shouldn't go out of our way to support it If needed, we could always add a new event to the API called something like `CodeActionProvider.didChangeCodeActions` that an extension could fire to signal that code actions should be explicitly re-requested. But I woul…",,,,,,Anecdotal,comment,,,,,,,,2024-06-27,github/mjbvz,https://github.com/microsoft/vscode/issues/215340#issuecomment-2195319268,repo: microsoft/vscode | issue: Skip re-requesting implicit code actions if diagnostics around the cursor have not changed | keyword: gotcha
Please give extensions access to native AST tokens (At least partially) <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> This feature request is very similar to this: https://github.com/microsoft/vscode/issues/131062 **But now I want to reintroduce it with very updated and very car…,,,,,,Anecdotal,issue,,,,,,,,2023-03-17,github/leodevbro,https://github.com/microsoft/vscode/issues/177452,repo: microsoft/vscode | keyword: gotcha | state: open
"Just use Neovim - you can do exactly that - inspect that Treesitter AST of any language. Until vs code implements / starts using TreeSitter, they probably just have a rough custom parser for brackets and stuff",,,,,,Anecdotal,comment,,,,,,,,2023-03-19,github/hacker-DOM,https://github.com/microsoft/vscode/issues/177452#issuecomment-1475149637,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"@hacker-DOM > Just use Neovim - you can do exactly that - inspect that Treesitter AST of any language. Until vs code implements / starts using TreeSitter, they probably just have a rough custom parser for brackets and stuff > > Vs Code is not meant for power users, and you will struggle too much to customize it like this This is hardly how you get a point across to someone. He's trying to improve the project A vs you're telling him to switch to the project B because reasons (that you have). Wha…",,,,,,Anecdotal,comment,,,,,,,,2023-03-19,github/ccelik97,https://github.com/microsoft/vscode/issues/177452#issuecomment-1475357190,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
Seems like this would also help extensions like [Bracketeer](https://marketplace.visualstudio.com/items?itemName=pustelto.bracketeer) which has to include and use Prism.js.,,,,,,Anecdotal,comment,,,,,,,,2023-03-19,github/eddyg,https://github.com/microsoft/vscode/issues/177452#issuecomment-1475378672,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"> Vs Code is not meant for power users, and you will struggle too much to customize it like this What a weird taken. I think you need to stick to Vim and let _power users_ discuss their tool.",,,,,,Anecdotal,comment,,,,,,,,2023-03-20,github/thoroc,https://github.com/microsoft/vscode/issues/177452#issuecomment-1475694459,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"<!-- 6d457af9-96bd-47a8-a0e8-ecf120dfffc1 --> This feature request is now a candidate for our backlog. The community has 60 days to [upvote](https://github.com/microsoft/vscode/wiki/Issues-Triaging#up-voting-a-feature-request) the issue. If it receives 20 upvotes we will move it to our backlog. If not, we will close it. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2023-12-04,github/vscodenpa,https://github.com/microsoft/vscode/issues/177452#issuecomment-1838728340,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"<!-- 9078ab2c-c9e0-7adb-d31b-1f23430222f4 --> :slightly_smiling_face: This feature request received a sufficient number of community upvotes and we moved it to our backlog. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/vscode-issue-lifecycle). Happy Coding!",,,,,,Anecdotal,comment,,,,,,,,2023-12-05,github/vscodenpa,https://github.com/microsoft/vscode/issues/177452#issuecomment-1839894581,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"Incremental parsing is made challenging by the expensive nature of tokenization and the high likelihood of concurrent passes while editing on the fly. If there was a way to ~~make tokenization blocking~~ reliably sync with documents, incremental updates would be much easier for a userland library 😅 I figured out Textmate token queries and caching in a library I wrote. If this interests you, the package lives at @vsce-toolroom",,,,,,Anecdotal,comment,,,,,,,,2024-11-26,github/zm-cttae,https://github.com/microsoft/vscode/issues/177452#issuecomment-2502085990,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"@zm-cttae, Wow, I am testing it now, and it really seems tokenizing documents and providing such tokens: ```typescript import TextmateLanguageService from 'vscode-textmate-languageservice'; import { TextmateToken, TokenizerService, } from 'vscode-textmate-languageservice/dist/types/services/tokenizer'; // basic example for tokenization export async function activate(context: vscode.ExtensionContext) { const textmateService = new TextmateLanguageService('typescript', context); const textmateToke…",,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/leodevbro,https://github.com/microsoft/vscode/issues/177452#issuecomment-2505090175,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"1. No is correct, the library will do it as expected 2. Yes, unmodified dependencies 3. Yes, no _config_ needed for that interface 4. Every gotcha around performance still exists. You would probably need to bail out documents at 1k lines. To work as a language service, the package relies on existing optimisations that VS Code makes for showing document outlines etc.",,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/zm-cttae,https://github.com/microsoft/vscode/issues/177452#issuecomment-2506489521,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"@zm-cttae, cool, thanks. Just one more question about indentation based languages, for example Python: I have this Python code: ```python def myFn(): print(1) print(2) ``` <br /> and I get these tokens: ```typescript import { TextmateToken } from 'vscode-textmate-languageservice/dist/types/services/tokenizer'; const fetchedTokens: TextmateToken[] = [ { text: 'def', level: 0, line: 0, startIndex: 0, endIndex: 3, type: 'storage.type.function.python', scopes: ['source.python', 'meta.function.pytho…",,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/leodevbro,https://github.com/microsoft/vscode/issues/177452#issuecomment-2506592969,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"By iterating across and filtering for a `startIndex` of 0 with the type as `source.python`, you should be able to set up a custom folding compute. This also benefits from the indentation being simple and not dependent on the lines before. The level prop is a precursor to folding which gets block indentation level if those selectors are preconfigured in the extension. However these are limited to languages with IF and END (indent _and_ dedent). Hope this makes enough sense 🤞",,,,,,Anecdotal,comment,,,,,,,,2024-12-01,github/zm-cttae,https://github.com/microsoft/vscode/issues/177452#issuecomment-2510298140,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
"@zm-cttae, thanks, I would write some followup thoughts: > By iterating across and filtering for a startIndex of 0 with the type as source.python, you should be able to set up a custom folding compute. This also benefits from the indentation being simple and not dependent on the lines before. I don't think that analyzing indent/dedent tokens is so trivial. because there may be many kinds of edge cases, for example: ```python def doit(): print(0) a = { ""car"": 1, ""cat"": 2, } print(a) doit() ``` I…",,,,,,Anecdotal,comment,,,,,,,,2024-12-03,github/leodevbro,https://github.com/microsoft/vscode/issues/177452#issuecomment-2515309728,repo: microsoft/vscode | issue: Please give extensions access to native AST tokens (At least partially) | keyword: gotcha
VS Code fails to open files from relative paths <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudi…,,,,,,Anecdotal,issue,,,,,,,,2021-12-28,github/johnmcfarlane,https://github.com/microsoft/vscode/issues/139845,repo: microsoft/vscode | keyword: gotcha | state: open
#133438 is a feature request about ordering of quick-open files based on *relative path of file in focus* in the editor. This issue is a bug about failure to normalise paths with *relative directories* in them (i.e. `.` and `..`).,,,,,,Anecdotal,comment,,,,,,,,2021-12-28,github/johnmcfarlane,https://github.com/microsoft/vscode/issues/139845#issuecomment-1002140350,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"Right, and I think this is more usual to happen when opening links from the integrated terminal, so adding Daniel. I think before opening quick pick, maybe we should normalize paths if possible?",,,,,,Anecdotal,comment,,,,,,,,2021-12-28,github/bpasero,https://github.com/microsoft/vscode/issues/139845#issuecomment-1002142013,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"An example might help. Consider two files: ```c++ // repo-dir/sub-dir1/file1.h #error ``` ```c++ // repo-dir/sub-dir2/file2.cpp #include ""../sub-dir1/file1.h"" ``` At least two problems arise when VS Code is confronted with this structure: 1. ""Go to File..."" facility fails when `../sub-dir1/file1.h` (or, say, `sub-dir2/../sub-dir1/file1.h:2:2`) is entered because it does not attempt file path normalisation. (Here's [an example](https://docs.python.org/3/library/os.path.html#os.path.normpath) of …",,,,,,Anecdotal,comment,,,,,,,,2021-12-28,github/johnmcfarlane,https://github.com/microsoft/vscode/issues/139845#issuecomment-1002146193,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"> I think before opening quick pick, maybe we should normalize paths if possible? @bpasero I wouldn't like to say whether there are any gotchas here. You might want to try twice: once with the naked path and if unsuccessful, then try normalised. I don't know if this is more or less messy though.",,,,,,Anecdotal,comment,,,,,,,,2021-12-28,github/johnmcfarlane,https://github.com/microsoft/vscode/issues/139845#issuecomment-1002147120,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"But if we were to resolve a path like `../sub-dir1/file1.h` we need something to resolve it against. Best we can probably do is to take the workspace root in this case, though with multi-root workspaces you can end up having many. I think for paths like `foo/../bar.txt` the solution is quite straight forward.",,,,,,Anecdotal,comment,,,,,,,,2021-12-28,github/bpasero,https://github.com/microsoft/vscode/issues/139845#issuecomment-1002149793,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"I think eating all leading relative dirs here would produce decent results. In this case, sub-dir1/file1.h. And I'm not sure it's the common case anyway. On Tue 28 Dec 2021, 15:08 Benjamin Pasero, ***@***.***> wrote: > But if we were to resolve a path like ../sub-dir1/file1.h we need > something to resolve it against. Best we can probably do is to take the > workspace root in this case, though with multi-root workspaces you can end > up having many. > > — > Reply to this email directly, view it…",,,,,,Anecdotal,comment,,,,,,,,2021-12-28,github/johnmcfarlane,https://github.com/microsoft/vscode/issues/139845#issuecomment-1002157035,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"No terminal issue here, I created a similar issue in the past but we now workaround it by just removing the relative prefix: https://github.com/Microsoft/vscode/blob/b3b82c054077df8128e4af45bac1b019db833f69/src/vs/workbench/contrib/terminal/browser/links/terminalWordLinkProvider.ts#L138-L140 It might make sense to roll that into go to file, but I don't know if there are other implications with that",,,,,,Anecdotal,comment,,,,,,,,2022-01-04,github/Tyriar,https://github.com/microsoft/vscode/issues/139845#issuecomment-1005095350,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"Note that they are always an indication of an incomplete path, i.e. one in which a directory name followed by a `..` was sliced down the middle. Hence it should be safe to discount the `..` as unhelpful in guessing the intended ultimate file or directory. Only if that assumption is somehow false would eating `..` cause a regression.",,,,,,Anecdotal,comment,,,,,,,,2022-01-18,github/johnmcfarlane,https://github.com/microsoft/vscode/issues/139845#issuecomment-1015205598,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"This is a relatively big problem for Rust: when rustc prints an error, it is usually relative to Cargo's workspace root, and cargo's workspace root is quite often not the same as Vs Code workspace root. A nice way to solve this would be some kind of an API for extensions to resolve paths -- at least in the case of cargo, correct resolution of realtive paths requires language-specific knowledge which is available in the extension. Actually, I think I've solved that: problem matchers support vari…",,,,,,Anecdotal,comment,,,,,,,,2022-10-08,github/matklad,https://github.com/microsoft/vscode/issues/139845#issuecomment-1272373972,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
This seem to must be solved by checking for files that ended with relative pattern excluding any prefixed '../' because that would be too tricky to know current directory of a script/application during a line output.,,,,,,Anecdotal,comment,,,,,,,,2023-10-23,github/SergMariaDB,https://github.com/microsoft/vscode/issues/139845#issuecomment-1774846992,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"We already do some query normalization here: https://github.com/microsoft/vscode/blob/34e1f76c491c37fe33f285ab6508b9ea3d235cec/src/vs/base/common/fuzzyScorer.ts#L894-L899 So maybe a logic to drop `..` and `.` could be added there. I wonder if a `path.normalize` would suffice, that should take care of it. The method is used in other contexts though.",,,,,,Anecdotal,comment,,,,,,,,2024-04-25,github/bpasero,https://github.com/microsoft/vscode/issues/139845#issuecomment-2077023737,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"To be clear, this didn't used to be a problem. I'm not sure when it got introduced though. My use case is when trying to click paths in the integrated terminal. My build runs from a sub folder, so any time it reports issues with source code, it's all prefixed with a few parent folder paths (../..). Has there been any progress?",,,,,,Anecdotal,comment,,,,,,,,2024-07-23,github/stangelandm1,https://github.com/microsoft/vscode/issues/139845#issuecomment-2245568414,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"Hi. I have the same issue while running some tests in rust projects. It outputs some paths to files in a relative format like `./src/tests/yourtest.rs:50` And VS code failing to open this file even if this path is relative to the root folder of the VS project. It just output search bar with the relative URI. After manual prefix ""./"" removal VSCode is able to open file",,,,,,Anecdotal,comment,,,,,,,,2024-08-13,github/vladlabs,https://github.com/microsoft/vscode/issues/139845#issuecomment-2286073693,repo: microsoft/vscode | issue: VS Code fails to open files from relative paths | keyword: gotcha
"Notebook UI heading tweaks I recently raised this https://github.com/microsoft/vscode/pull/188117 which got reverted as my changed introduced a heading border that was reaching into the scroll bar. This is a second attempt to improve the UI for notebooks, the additional tweak I made to fix the the problem that caused the revert was adding ```css width: calc(100% - 2px); ``` to ```css hr, h1, h2 { border-bottom: 1px solid var(--vscode-notebook-cellBorderColor); width: calc(100% - 2px); } ``` @da…",,,,,,Anecdotal,issue,,,,,,,,2023-08-11,github/christian-bromann,https://github.com/microsoft/vscode/pull/190291,repo: microsoft/vscode | keyword: gotcha | state: open
"Experiment: PGO for desktop application > From [Profile Guided Optimization](https://clang.llvm.org/docs/UsersManual.html#id48) > > Profile information enables better optimization. For example, knowing that a branch is taken very frequently helps the compiler make better decisions when ordering basic blocks. Knowing that a function foo is called more frequently than another function bar helps the inliner. Optimization levels -O2 and above are recommended for use of profile guided optimization. …",,,,,,Anecdotal,issue,,,,,,,,2023-01-10,github/deepak1556,https://github.com/microsoft/vscode/issues/170931,repo: microsoft/vscode | keyword: gotcha | state: open
"Couple of gotchas: 1) Prebuilt profiling runtime binaries `(libclang_rt.profile-<arch>.a)` are not available for Linux arm64, Linux armhf and Windows arm64 from the chromium source tree. Although it is possible to build them from source, it will take considerable changes to the MS Electron build pipeline which is outside the scope of current phase for this experiment. We will skip instrumenting the corresponding VSCode builds for sake of simplicity. 2) Profiles are stored for each process from …",,,,,,Anecdotal,comment,,,,,,,,2023-01-12,github/deepak1556,https://github.com/microsoft/vscode/issues/170931#issuecomment-1380209006,repo: microsoft/vscode | issue: Experiment: PGO for desktop application | keyword: gotcha
- [x] Backport latest changes based on https://bugs.chromium.org/p/chromium/issues/detail?id=1071664 and https://bugs.chromium.org/p/chromium/issues/detail?id=1242138 into Electron shutdown code path to properly dump profile data on shutdown.,,,,,,Anecdotal,comment,,,,,,,,2023-01-12,github/deepak1556,https://github.com/microsoft/vscode/issues/170931#issuecomment-1380219685,repo: microsoft/vscode | issue: Experiment: PGO for desktop application | keyword: gotcha
"Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion I'm unable to reproduce this, but a user was able to provide an LSP log that makes it seem like a VS Code issue. If not, I think it at least needs some direction to help debug. Here's what's happening: - The user types `foo(` - The `(` triggers code completion (because it's a trigger character) but also causes a `)` to be inserted automatically (aut…",,,,,,Anecdotal,issue,,,,,,,,2021-09-28,github/DanTup,https://github.com/microsoft/vscode/issues/134013,repo: microsoft/vscode | keyword: gotcha | state: open
"@jrieken I was also unable to reproduce (either in a simple sample that mimicked the ordering above, or the real extension), but @s-katoh seems to be able to trigger it reliably. Is there anything they can do help diagnose it? From the logs and animated GIFs, it's clear the issue is occurring, but I don't think the extension can do anything to log more useful information. Is there a way to get VS Code to log info about the way it's adjusting the range for completions?",,,,,,Anecdotal,comment,,,,,,,,2021-10-04,github/DanTup,https://github.com/microsoft/vscode/issues/134013#issuecomment-933300950,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"@jrieken this is tagged needs-more-info, but I don't know how I can provide more info if I can't reproduce it reliably. Is there something that can be enabled in VS Code to collect anything that will help track this down?",,,,,,Anecdotal,comment,,,,,,,,2021-10-27,github/DanTup,https://github.com/microsoft/vscode/issues/134013#issuecomment-952899188,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"I'm able to reproduce this reliably by setting `""editor.autoClosingBrackets"": ""never""`, **quickly** typing the opening and closing parentheses in a Flutter project (haven't tested anywhere else) and triggering an autocomplete: https://user-images.githubusercontent.com/87761804/139071982-13d434a9-eddd-48b7-9e5d-b9ce78bf9317.mov It seems to only happen when I manually type the closing parentheses, not when VSCode autocompletes it for me, hence why I had to disable auto closing brackets.",,,,,,Anecdotal,comment,,,,,,,,2021-10-27,github/ghost,https://github.com/microsoft/vscode/issues/134013#issuecomment-952911672,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"@SuporteSysrs01 aha! I can reproduce this now with that setting disabled. @jrieken here's my repro: https://github.com/DanTup/vscode-repro-134013 It's just a simple extension that always activates and contributes a completion provider that contains ""barbarbarbar"" and auto-triggers on `(`. To reproduce, I open a blank file (in a workspace with `""editor.autoClosingBrackets"": ""never""`) and I do the following: - type `f` - type `o` - type `o` - type `(` - type `)` - press `<left cursor>` - wait for…",,,,,,Anecdotal,comment,,,,,,,,2021-10-27,github/DanTup,https://github.com/microsoft/vscode/issues/134013#issuecomment-953004244,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
👏 thanks for clarifying and for adding the missing information. I need to debug into this but the problems seems to happen because suggest isn't cancelled when typing `)` or when arrowing back (left) by one character,,,,,,Anecdotal,comment,,,,,,,,2021-10-27,github/jrieken,https://github.com/microsoft/vscode/issues/134013#issuecomment-953042505,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
This is what's happening * typing `(` triggers suggest * now `)` is typed * the cursor is moved back and suggest is not cancelled * we now apply the logic that runs when text after the cursor has been typed (while suggest is active) and that removes the newly added text,,,,,,Anecdotal,comment,,,,,,,,2021-10-27,github/jrieken,https://github.com/microsoft/vscode/issues/134013#issuecomment-953050849,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"Gotcha. It doesn't seem like completely unreasonable behaviour if I had typed `b` instead of `)`, but it does seem odd here. I think cancelling when moving left makes most sense, but I don't know if there are any other implications of doing so (for anyone with the workflow above, they'll need to re-invoke completion but it seems like that's probably unavoidable).",,,,,,Anecdotal,comment,,,,,,,,2021-10-27,github/DanTup,https://github.com/microsoft/vscode/issues/134013#issuecomment-953055534,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"Also, if you wait for the suggestions to open when you type `(`, adding the `)` already cancels the suggestions, making you have to re-invoke the completion anyways. So this issue only happens if you type the `)` quickly.",,,,,,Anecdotal,comment,,,,,,,,2021-10-27,github/ghost,https://github.com/microsoft/vscode/issues/134013#issuecomment-953067742,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
Fixing this will conflict https://github.com/microsoft/vscode/issues/26012 - basically the unwanted behaviour here is the wanted behaviour for #26012,,,,,,Anecdotal,comment,,,,,,,,2021-11-01,github/jrieken,https://github.com/microsoft/vscode/issues/134013#issuecomment-956099670,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"Oof :-) Is it possible the `)` could only be eaten if it had been auto-inserted by the `(`. Eg, if the user typed it, leave it as-is? (or, if you just go with cancelling the suggest when you move the cursor, wouldn't that solve the issue by making it not possible to not trigger this, while still allowing #26012 to work as it currently does?)",,,,,,Anecdotal,comment,,,,,,,,2021-11-01,github/DanTup,https://github.com/microsoft/vscode/issues/134013#issuecomment-956139006,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"> if you just go with cancelling the suggest when you move the cursor, That kinda conflicts with https://github.com/microsoft/vscode/issues/3295... 🤯 > Is it possible the ) could only be eaten if it had been auto-inserted by the (. Eg, if the user typed it, leave it as-is? Yeah, that's what I am currently considering but it needs more thinking",,,,,,Anecdotal,comment,,,,,,,,2021-11-01,github/jrieken,https://github.com/microsoft/vscode/issues/134013#issuecomment-956152152,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"hello, i have the same issue. Do you know how to fix it? The Github copilot auto complete doesn't put closing brackets and quotes...",,,,,,Anecdotal,comment,,,,,,,,2022-11-20,github/Rameray1,https://github.com/microsoft/vscode/issues/134013#issuecomment-1321206649,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
"I have this issue for HTML especially in angular templates, where autocomplete eats up ""and > chars.",,,,,,Anecdotal,comment,,,,,,,,2023-05-10,github/danieloppenlander,https://github.com/microsoft/vscode/issues/134013#issuecomment-1542444472,repo: microsoft/vscode | issue: Code completion unexpectedly consumes closing paren (from auto-closing-brackets) that was inserted automatically when `(` triggered code completion | keyword: gotcha
[UI/UX] problem with disassembly page. <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/ins…,,,,,,Anecdotal,issue,,,,,,,,2021-08-25,github/WardenGnaw,https://github.com/microsoft/vscode/issues/131655,repo: microsoft/vscode | keyword: gotcha | state: open
"I don't think this should happen. The leftmost column if effectively the ""gutter"" and is where breakpoint lines and indicators are shown. Having the background apply to that region would introduce contrast issues (both the line background and stack frame indicator are, by default, yellow)",,,,,,Anecdotal,comment,,,,,,,,2023-09-07,github/connor4312,https://github.com/microsoft/vscode/issues/131655#issuecomment-1710642436,repo: microsoft/vscode | issue: [UI/UX] problem with disassembly page. | keyword: gotcha
[remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders b…,,,,,,Anecdotal,issue,,,,,,,,2021-06-30,github/ADustyOldMuffin,https://github.com/microsoft/vscode/issues/127587,repo: microsoft/vscode | keyword: gotcha | state: open
If I understand you correctly: we do not allow to open the same folder in two windows. There is a long standing vscode issue which you can find. And I am closing this as a duplicate of that one fyi @chrmarti for dev containers,,,,,,Anecdotal,comment,,,,,,,,2021-06-30,github/isidorn,https://github.com/microsoft/vscode/issues/127587#issuecomment-871181463,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"> If I understand you correctly: we do not allow to open the same folder in two windows. @isidorn Yes and this is what I'm saying happens, I can have a dev container open but then I try and click open in code with a file or even the same folder as the dev container it will open up a new window outside the dev container.",,,,,,Anecdotal,comment,,,,,,,,2021-06-30,github/ADustyOldMuffin,https://github.com/microsoft/vscode/issues/127587#issuecomment-871431587,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"See the behavior below, I know that since it's running in a container the file system is ""different"" so I don't know if that makes a difference. I just wanted to confirm if this works as expected or if this is a bug. ![vscode-behavior](https://user-images.githubusercontent.com/41391321/123974535-47e38100-d982-11eb-8c33-4db9821ad35e.gif)",,,,,,Anecdotal,comment,,,,,,,,2021-06-30,github/ADustyOldMuffin,https://github.com/microsoft/vscode/issues/127587#issuecomment-871435812,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"That's expect, the same files/folders have URIs inside the container that are different from the URIs on the local filesystem. For VS Code it looks like different files/folders.",,,,,,Anecdotal,comment,,,,,,,,2021-06-30,github/chrmarti,https://github.com/microsoft/vscode/issues/127587#issuecomment-871660400,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"@chrmarti would you be able to link us to the other issue. From what you explain of the other issue, I don't think this is a duplicate. I think this could be remedied by detecting the URLs and matching them up and opening it in the correct window? It is quite annoying when you're working on a project in a devcontainer and this happens. This is also the case if I have only one window of vscode with /folder open in a devcontainer and I open /folder/file1, it will open a brand new window and open …",,,,,,Anecdotal,comment,,,,,,,,2021-08-04,github/Soneji,https://github.com/microsoft/vscode/issues/127587#issuecomment-892894365,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"There is currently no way for VS Code to find out if the same file can be opened in an existing window just with a different URI. There is now a way for remote resolvers to tell VS Code what the canonical URI of a given URI is, but that's the reverse mapping. @bpasero for your consideration.",,,,,,Anecdotal,comment,,,,,,,,2021-08-10,github/chrmarti,https://github.com/microsoft/vscode/issues/127587#issuecomment-896027854,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"E.g., Remote-Containers and Remote-WSL. Both can open some local files as ""remote"" files because they are mounted into the remote filesystem.",,,,,,Anecdotal,comment,,,,,,,,2021-08-10,github/chrmarti,https://github.com/microsoft/vscode/issues/127587#issuecomment-896281610,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"I am not sure I fully understand: you are in a remote window and want to open local files? I think it is ""by design"" that a window with ""remote authority"" cannot open any local files, assigning to @aeschli who introduced this concept.",,,,,,Anecdotal,comment,,,,,,,,2021-08-11,github/bpasero,https://github.com/microsoft/vscode/issues/127587#issuecomment-896517659,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"I think you misunderstand. Let me write a flow for you to replicate/understand the issue: Setup: - You open a project that has a `.devcontainer` folder, and vscode asks you to ""reopen in devcontainer"", so you open the devcontainer. - You now have one vscode window of a project in a devcontainer. Reproducing: - You navigate to another application, such as file explorer or GitHub desktop and find a file in the project you're working on, which exists in the devcontainer. - You right click on the f…",,,,,,Anecdotal,comment,,,,,,,,2021-08-11,github/Soneji,https://github.com/microsoft/vscode/issues/127587#issuecomment-896880482,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"Thanks, this is very unlikely to happen because I doubt we have this kind of knowledge when opening a file, but anyway leaving open as feature request.",,,,,,Anecdotal,comment,,,,,,,,2021-08-11,github/bpasero,https://github.com/microsoft/vscode/issues/127587#issuecomment-896898551,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
@ADustyOldMuffin would you be able to update the original post with my description [here](https://github.com/microsoft/vscode/issues/127587#issuecomment-896880482) Let's hope we can get 20 upvotes,,,,,,Anecdotal,comment,,,,,,,,2021-08-13,github/Soneji,https://github.com/microsoft/vscode/issues/127587#issuecomment-898365421,repo: microsoft/vscode | issue: [remote] Prefer to open a file in an existing window even when that window is connected to a remote with that file opened | keyword: gotcha
"MCP: Make it easier to restart servers during local development When working on local servers, it's easy to just run a watch command to get an updated build. But then to get VS Code to restart the server requires going into the command list servers, clicking into the server, and restarting there, which is very cumbersome. Alternatively, you need to have the mpc.json open and click restart there (not something I have opened during local development). How might we simplify the restart for these q…",,,,,,Anecdotal,issue,,,,,,,,2025-03-28,github/digitarald,https://github.com/microsoft/vscode/issues/245018,repo: microsoft/vscode | keyword: gotcha | state: closed
"Hm, well, VS Code has very advanced file watching capability. We could have some `restartOnChanged` pattern or list of patterns in the mcp config that would automatically restart the MCP server when they're updated. BYO nodemon.",,,,,,Anecdotal,comment,,,,,,,,2025-03-29,github/connor4312,https://github.com/microsoft/vscode/issues/245018#issuecomment-2763408089,repo: microsoft/vscode | issue: MCP: Make it easier to restart servers during local development | keyword: gotcha
"Feedback from a dev where restart (aka cache clearning) isn't obvious: > The main developer gotcha for me has been tool cache clearing, will there be an easier way in the future to explicitly bust the cache? Right now I've been renaming functions randomly to be on the safe side. I think VS Code can be a really nice dev environment for MCP servers, better than Claude, just needs a couple more controls like cache clearing.",,,,,,Anecdotal,comment,,,,,,,,2025-04-01,github/digitarald,https://github.com/microsoft/vscode/issues/245018#issuecomment-2770326319,repo: microsoft/vscode | issue: MCP: Make it easier to restart servers during local development | keyword: gotcha
"I've been using ""Restart"" in the menu that pops up in my User Settings, but it's never 100% clear to me when it has cleared the cache. Should Restart always clear the cache? There were definitely times when it felt like I didn't, and so I started renaming functions randomly so that I was sure it was busted.",,,,,,Anecdotal,comment,,,,,,,,2025-04-01,github/pamelafox,https://github.com/microsoft/vscode/issues/245018#issuecomment-2770332591,repo: microsoft/vscode | issue: MCP: Make it easier to restart servers during local development | keyword: gotcha
The cache should always be refreshed+updated whenever we connect to the server. Starting or restarting the server explicitly will do that.,,,,,,Anecdotal,comment,,,,,,,,2025-04-01,github/connor4312,https://github.com/microsoft/vscode/issues/245018#issuecomment-2770340240,repo: microsoft/vscode | issue: MCP: Make it easier to restart servers during local development | keyword: gotcha
"Hm, I'm not sure why it felt like it was caching the tools then. It kept talking about argument names that didn't exist anymore.",,,,,,Anecdotal,comment,,,,,,,,2025-04-01,github/pamelafox,https://github.com/microsoft/vscode/issues/245018#issuecomment-2770927159,repo: microsoft/vscode | issue: MCP: Make it easier to restart servers during local development | keyword: gotcha
"I've created a similar UX-oriented feature request issue on #245338 . ### ⚠️ Problem 1: Unintuitive UX to restart MCP Servers I stumbled across an inconvenient issue just now, where i only just noticed that my installed MCP servers were stopped (possibly after restarting VS Code Insiders), which i only just figured out how to start up the MCP server again: 1. Open **Command Palette** 2. Search for and select `MCP: List Servers` 3. Select your MCP server from the installed list 4. Select `Start …",,,,,,Anecdotal,comment,,,,,,,,2025-04-02,github/Sayvai,https://github.com/microsoft/vscode/issues/245018#issuecomment-2772467204,repo: microsoft/vscode | issue: MCP: Make it easier to restart servers during local development | keyword: gotcha
storage: optimize sqlite insert with upsert syntax <!-- Thank you for submitting a Pull Request. Please: * Read our Pull Request guidelines: https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests * Associate an issue with the Pull Request. * Ensure that the code is up-to-date with the `main` branch. * Include a description of the proposed changes and how to test them. --> fixes #260807 cc @bpasero,,,,,,Anecdotal,issue,,,,,,,,2025-08-17,github/tmm1,https://github.com/microsoft/vscode/pull/261999,repo: microsoft/vscode | keyword: gotcha | state: closed
"Allow for transparent / vibrant window theme ![image](https://user-images.githubusercontent.com/5620073/29191214-a775c87e-7e25-11e7-83e1-39eadbce7851.png) Maybe it can be enabled with `{ transparent: true, vibrancy: 'dark' }` ? https://github.com/electron/electron/pull/7898 — Vibrancy PR https://electron.atom.io/docs/api/frameless-window/#transparent-window",,,,,,Anecdotal,issue,,,,,,,,2017-08-10,github/sergeysova,https://github.com/microsoft/vscode/issues/32257,repo: microsoft/vscode | keyword: gotcha | state: closed
"This is amazing. I'm not sure if something like this would be able to achieved on Windows as well (it might just take a lot more effort than MacOS), but it would fit in with the new Fluent Design System.",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-321731886,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"@LestaD do you have a working prototype of what you suggested via `{ transparent: true, vibrancy: 'dark' }` ?",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/bpasero,https://github.com/microsoft/vscode/issues/32257#issuecomment-321771323,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"@LestaD so far I was not able to use the vibrancy effect of Electron, could also be related to the fact that we are not on latest Electron.",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/bpasero,https://github.com/microsoft/vscode/issues/32257#issuecomment-321807498,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
@bpasero I enabled vibrancy in VSCode 1.15 `wnd.setVibrancy('dark')`: ![image](https://user-images.githubusercontent.com/5620073/29230839-68171110-7eed-11e7-8306-741ac79e2112.png) `wnd.setVibrancy('ultra-dark')` ![image](https://user-images.githubusercontent.com/5620073/29230914-ab36e72c-7eed-11e7-897d-3f3640719832.png),,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321912672,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"```js // Open devTools in any vscode window wnds = electron.remote.BrowserWindow.getAllWindows() win = new electron.remote.BrowserWindow({ width: 600, height: 500, frame: false, transparent: true, vibrancy: 'dark', show: false }) // with wnds[0].getURL() find any window with title != ""Code"" source = wnds[1] win.loadURL(source.getURL()) win.show() // next open and undock DevTools win.openDevTools() ``` Next with `Elements` tab add that style before `</body>`: ```html <style> .monaco-shell, .mona…",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321915221,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
## Dark ![image](https://user-images.githubusercontent.com/5620073/29232222-2555b830-7ef3-11e7-8a0a-a75758911e20.png),,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321920519,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
## Ultra Dark ![image](https://user-images.githubusercontent.com/5620073/29232225-2a8ab79c-7ef3-11e7-90b0-6af627318739.png),,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/sergeysova,https://github.com/microsoft/vscode/issues/32257#issuecomment-321920630,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"I tried this on Windows and unfortunately it doesn't work (so Electron's API for this must still be supported on only MacOS). However I did find an npm package named [`electron-vibrancy`](https://github.com/arkenthera/electron-vibrancy) that supports Windows 10 and got the following results: ![image](https://user-images.githubusercontent.com/18223213/29234148-e3a05c2c-7ea9-11e7-95d6-67a73ae6e8b3.png) I had to disable the window frame because the vibrancy effect doesn't play well with it, so if …",,,,,,Anecdotal,comment,,,,,,,,2017-08-11,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-321933035,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"@LestaD followed your steps and cannot make it work, care to open a PR for me to test it out? Do I need to enable something in macOS to see it?",,,,,,Anecdotal,comment,,,,,,,,2017-08-12,github/bpasero,https://github.com/microsoft/vscode/issues/32257#issuecomment-321963984,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"@rianadon that's because it's using the undocumented `SetWindowCompositionAttribute` function in Windows. No you can't have a higher blur radius. BTW what you suggest is missing shadows, and you can't resize it by grabbing the window borders because you used `transparent: true`. Here's an example with Discord: ![](https://files.charlesmilette.net/V400KmE.png) If you look near the Explorer window, you can see the shadow is still there. The window was created with the following options: ```js var…",,,,,,Anecdotal,comment,,,,,,,,2017-09-23,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-331663738,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"@sylveon My experiment was not a suggestion on the way VS Code should implement this; it was only to see if such a vibrancy effect was possible on Windows. I used `electron-vibrancy` as my Electron and Windows API knowledge is quite limited. But as you said it has a few major shortcomings, so, should this be done well, using it wouldn't be a good idea. I tried using options similar to what you suggested to get the effect with shadows, but for some reason the background of the window becomes sol…",,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333356661,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Unfortunately since this is a modification of Discord (a closed-source program), sharing the source code would potentially lead me into trouble. The background is solid black until you call SetWindowCompositionAttribute on it, only after it will become blurred: ![gif](https://user-images.githubusercontent.com/6440374/31055849-41fa7266-a697-11e7-9dcf-51e005d488aa.gif) The program I used in my GIF comes from here: http://glass8.eu/files/SetWindowCompositionAttribute.7z Electron version of my Disc…",,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333382405,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
Gotcha. It turns out I set the opacity of some elements to 80% and the dark color of the blur combined with the opacity made everything look black. Changing the blur color to 0x00000000 did the trick. However I still had to use 80% opacities to color the blur as setting the body background color to something with 0 opacity didn't change anything. Thanks for the help. I'd still have to wait for one of the many Windows custom titlebar issues to reach a consensus to do any more with this though.,,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333392254,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Yeah a custom titlebar is required, because blur doesn't plays well with non-borderless windows: ![image](https://user-images.githubusercontent.com/6440374/31057177-46784fe2-a6ac-11e7-9bf5-058bdbc33e58.png)",,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-333392447,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Since it seems it will take a while for a consensus to be reached on what kind of titlebar VS Code should have, I went with the Metro app style and incorporated the color that's shown on macOS currently (since I was modifying the existing macOS custom titlebar anyways): ![image](https://user-images.githubusercontent.com/18223213/33155010-7f93921e-cfa1-11e7-9013-1552aec3e23e.png) @bpasero if this looks good I could write a PR for the titlebar on Windows. Or would it be better to wait for one of …",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-346511556,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Depending on how node-gyp is complex (I never used it), I could try getting a PR for blur on Windows working after that. BTW @rianadon looks nice :)",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-346517957,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"### Light ![Light theme](https://user-images.githubusercontent.com/6258309/33913127-9b164264-df66-11e7-8fd6-0ad5355d5a4d.png ""Light theme"") <p><details><summary>Colors:</summary> <ul><li>Active title bar: <code>rgba(0, 0, 0, 0.1)</code></li> <li>Activity Bar: <code>rgba(0, 0, 0, 0.4)</code></li> <li>Sidebar, Tab container: <code>transparent</code></li> <li>Inactive tab: <code>rgba(255, 255, 255, 0.25)</code> (not exactly sure how I feel about it though)</li> </ul> </details></p> --- I like wher…",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/easyaspi314,https://github.com/microsoft/vscode/issues/32257#issuecomment-351226214,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
I think this should follow the acrylic material guidelines: https://docs.microsoft.com/en-us/windows/uwp/design/style/acrylic,,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/patrys,https://github.com/microsoft/vscode/issues/32257#issuecomment-358937418,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Unfortunately, the Fluent transparency effect is not available for Win32 apps right now. Insider Build 17063 does have it, and I can use it fine on Terminus, another Electron app: ![](https://charles.getsharex.com/ApplicationFrameHost_caE9E0.png) It also is buggy right now, so I'd wait for it to get more stable before trying anything. The fact it's only available on 17063 or higher means we would need to use the old blur effect on older versions (which is also still available in 17063). So in m…",,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-358965359,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
@sylveon I'm aware that it's currently only officially exposed in the insiders build. I'm not sure it's worth implementing a workaround though as it seems the panel could easily remain solid on machines that don't support the new properties and it's quite possible that by the time this change is released in VS Code the platform API will already hit the stable channel.,,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/patrys,https://github.com/microsoft/vscode/issues/32257#issuecomment-358973532,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Changing the effect type is just [changing the value of an enum](https://pastebin.com/z0G8HUBB), so it isn't really a workaround, just a configuration option. Also nothing is official or an API, the method used to reach this effect is undocumented and will probably remain so. Also Microsoft, if you're reading this, please document this/expose it in a documented API. The potential of it is awesome, and could easily gain a lot of users (AMD themselves are also relying on this undocumented stuff f…",,,,,,Anecdotal,comment,,,,,,,,2018-01-19,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-358981313,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"That fluent effect looks great @sylveon! Both this effect and the pre-17063 use undocumented APIs, so as I see it there shouldn't be much difference between them. It should be easy enough to support both.",,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/rianadon,https://github.com/microsoft/vscode/issues/32257#issuecomment-359146942,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Yeah, it's easy enough to support blur, fluent and regular transparency all at the same time. Just change the value of an enum between `ACCENT_ENABLE_TRANSPARENTGRADIENT` (just transparent), `ACCENT_ENABLE_BLURBEHIND` (old blur effect) and `ACCENT_ENABLE_FLUENT` (fluent effect) when applying the effect. If the user disables it, just apply `ACCENT_DISABLED` to return to normal effect-less behavior. See the pastebin I posted yesterday.",,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-359172922,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"👀 ![](https://files.charlesmilette.net/Code%20-%20OSS_tV3ylZ.png) ![](https://charles.getsharex.com/Code%20-%20OSS_IyRl01.png) ![](https://charles.getsharex.com/Code%20-%20OSS_sb9bNF.png) Now that I've got the base working, having it on macOS shouldn't be an issue. Instead of setting thickFrame to true and changing the composition attribute, set vibrancy and transparent to true. The rest should be completely platform-independent.",,,,,,Anecdotal,comment,,,,,,,,2018-01-20,github/sylveon,https://github.com/microsoft/vscode/issues/32257#issuecomment-359190092,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Windows design guidelines suggest having two panels set to 80% and 60%, would that work here for the action bar and the explorer pane?",,,,,,Anecdotal,comment,,,,,,,,2018-01-21,github/patrys,https://github.com/microsoft/vscode/issues/32257#issuecomment-359245465,repo: microsoft/vscode | issue: Allow for transparent / vibrant window theme | keyword: gotcha
"Extensions not showing and says they load, but I can't see them I recently upgraded from v 1.95.2 to v1.96.4 and as part of the process, my company requires me to uninstall vs code from the server to get rid of older installs (remote:ssh uninstall vs code server from host. Well, we also locally install all extensions, then have to click ""install on server"" to install them on the server. These were not showing up in my extension list after doing that: ![Image](https://github.com/user-attachments…",,,,,,Anecdotal,issue,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966,repo: microsoft/vscode | keyword: gotcha | state: closed
"Additional items showing up in my terminal window: 2025-01-28 08:33:41.142 [warning] Settings pattern ""issueReporter.*"" doesn't match any settings 2025-01-28 08:33:41.143 [warning] Settings pattern ""application.*"" doesn't match any settings 2025-01-28 08:35:10.653 [warning] Settings pattern ""issueReporter.*"" doesn't match any settings 2025-01-28 08:35:10.653 [warning] Settings pattern ""application.*"" doesn't match any settings 2025-01-28 08:35:13.527 [warning] Settings pattern ""issueReporter.*""…",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619194871,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
Installed Argutec: ![Image](https://github.com/user-attachments/assets/eed076d6-3ca7-4f5d-8521-b7c9bf3962c5) window output: 2025-01-28 08:43:54.428 [info] Downloading the 'argutec.argutec-azure-repos' extension locally and install 2025-01-28 08:43:57.428 [info] Downloaded extension: argutec.argutec-azure-repos /C:/Users/bdoyle8/AppData/Roaming/Code/CachedExtensionVSIXs/argutec.argutec-azure-repos-1.2007.15 2025-01-28 08:44:11.402 [info] Successfully installed 'argutec.argutec-azure-repos' exten…,,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619213951,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Also, when I try to go to the link in this error, this is what I get: 2025-01-28 08:52:10.243 [error] [network] #68: https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery - error POST Canceled ![Image](https://github.com/user-attachments/assets/b2dcfb2b-b91b-44e8-988e-d37c0909ae87)",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619235101,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Argutec extension seems to be installed on the WSL side. So it should be visible in the WSL installed extensions section and not in Local installed extensions section. There should be a view under Local Installed section, please check in that view.",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/sandy081,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619559812,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"No, it is not showing up under local -installed. The blue slider under ""extensions"" at the top keeps tracking left to right as if it is trying to do something. Also, there are no recommended extensions: ![Image](https://github.com/user-attachments/assets/2c898b25-df37-40ee-b57e-8f181db1a430)",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619566642,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
I search for argutec and see this: ![Image](https://github.com/user-attachments/assets/911b2612-12f2-4869-b3cc-fc4b7672500c) THen I click on reload window.... and it still does not show: ![Image](https://github.com/user-attachments/assets/2b56df6d-eb4f-4259-94ce-3d46e8f6490a),,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619572734,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
Can you please share following log while you install the extension - Reload the window - Install the extension - Share the log - F1 > Open View... > Remote - F1 > Open View... > Window,,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/sandy081,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619576115,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"WIndow: 2025-01-28 11:04:06.364 [warning] Via 'product.json#extensionEnabledApiProposals' extension 'ms-vscode.vscode-selfhost-test-provider' wants API proposal 'attributableCoverage' but that proposal DOES NOT EXIST. Likely, the proposal has been finalized (check 'vscode.d.ts') or was abandoned. 2025-01-28 11:04:06.364 [warning] Via 'product.json#extensionEnabledApiProposals' extension 'ms-python.python' wants API proposal 'contribIssueReporter' but that proposal DOES NOT EXIST. Likely, the pr…",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619585480,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"remote ssh: [11:05:21.964] Log Level: 2 [11:05:21.994] SSH Resolver called for ""ssh-remote+7b22686f73744e616d65223a22446576303739227d"", attempt 1 [11:05:21.997] remote.SSH.useLocalServer = false [11:05:21.998] remote.SSH.useExecServer = true [11:05:21.998] remote.SSH.showLoginTerminal = false [11:05:21.998] remote.SSH.remotePlatform = {""Develop"":""linux"",""Dev001"":""linux"",""Dev079"":""linux""} [11:05:21.998] remote.SSH.path = undefined [11:05:21.998] remote.SSH.configFile = undefined [11:05:21.998] r…",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619586914,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
Install: (remote-ssh is blank) WINDOW: 2025-01-28 11:07:45.306 [info] Downloading the 'argutec.argutec-azure-repos' extension locally and install 2025-01-28 11:07:56.420 [info] Downloaded extension: argutec.argutec-azure-repos /C:/Users/bdoyle8/AppData/Roaming/Code/CachedExtensionVSIXs/argutec.argutec-azure-repos-1.2007.15 2025-01-28 11:08:05.637 [info] Successfully installed 'argutec.argutec-azure-repos' extension,,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619591987,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
still not showing up as installed locally: ![Image](https://github.com/user-attachments/assets/0ec2d9f7-837e-42b8-8ac9-2919be96c0bc),,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619594505,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
now it shows up twice: window log: 2025-01-28 11:10:11.477 [error] Unable to resolve nonexistent file 'vscode-remote://ssh-remote+7b22686f73744e616d65223a22446576303739227d/home/bdoyle8/.vscode-server/data/User/globalStorage/argutec.argutec-azure-repos': Error: Unable to resolve nonexistent file 'vscode-remote://ssh-remote+7b22686f73744e616d65223a22446576303739227d/home/bdoyle8/.vscode-server/data/User/globalStorage/argutec.argutec-azure-repos' at _ot.resolve (vscode-file://vscode-app/c:/Users/…,,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619600790,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"extension host: 2025-01-28 11:04:08.129 [info] Extension host with pid 9352 started 2025-01-28 11:04:08.129 [info] Skipping acquiring lock for c:\Users\bdoyle8\AppData\Roaming\Code\User\workspaceStorage\c74e397b2de74647d848ed3658f4653c. 2025-01-28 11:04:08.129 [info] $getCanonicalURI invoked for authority (ssh-remote) 2025-01-28 11:04:08.180 [info] ExtensionService#_doActivateExtension ms-vscode-remote.remote-ssh, startup: false, activationEvent: 'onResolveRemoteAuthority:ssh-remote' 2025-01-28…",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619601127,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Also, it does not show any builtins: ![Image](https://github.com/user-attachments/assets/66b4b9ee-5a7b-4790-8c2a-5ceacbdc0993)",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619610931,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Also, I did a refresh and argutec only shows up once now when i search on it. I did not get a screen shot.",,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2619615193,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
I am sorry that I kind of lost here. Can you please explain your set up again? How to reproduce this issue?,,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/sandy081,https://github.com/microsoft/vscode/issues/238966#issuecomment-2639778877,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Sandeep, I have a windows 10 build on my corporate laptop. Everyone at my work that is using v 1.96.4 of VS Code is having this same issue. After upgrading, the extensions tab is continually looking for the extensions. The tab is never updated to show installed extensions. I can search for extensions that are installed and yet, the buttons under the extension when opened show ""reload window"" or ""install"", but these extensions ARE installed. VS Code Help About Version: 1.96.4 (user setup) Commit…",,,,,,Anecdotal,comment,,,,,,,,2025-02-06,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2639848665,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
I updated to the lastest version of vs code and it is still acting the same. ![Image](https://github.com/user-attachments/assets/6c7a7064-7e7e-49cd-8fe4-463ba7956062),,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2643316380,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
I see you are connecting to a remote VS Code server. Can you please open VS Code window that is not connecting to remote VS Code server and let me know if you still see the issue?,,,,,,Anecdotal,comment,,,,,,,,2025-02-11,github/sandy081,https://github.com/microsoft/vscode/issues/238966#issuecomment-2650746870,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"I disconnected from the remote server. I can see the extensions to include recommendations and see the following: ***@***.*** Barbara Doyle Senior Professional Application Designer MS OPS / Buy-In TFAL / DSS T +1.608.684.0236 ***@***.******@***.***> Planned Out of Office: 2/14/25 2/26/25 - 3/3/25 ***@***.*** From: Sandeep Somavarapu ***@***.***> Sent: Tuesday, February 11, 2025 6:58 AM To: microsoft/vscode ***@***.***> Cc: Doyle, Barbara ***@***.***>; Author ***@***.***> Subject: Re: [microsoft…",,,,,,Anecdotal,comment,,,,,,,,2025-02-11,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2650842306,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"I see my email did not make it to update here. I disconnected from the remote server. I have 2 servers that I connect to, one is called devap079 (it is RHEL 7.9), and the other is called devap001 (it is RHEL8). This issue appears when connected to EITHER of these servers. I can see the extensions to include recommendations and see the following: ![Image](https://github.com/user-attachments/assets/42bf9cc2-e20b-41e1-99f5-11667686b741)",,,,,,Anecdotal,comment,,,,,,,,2025-02-11,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2651972005,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"No, the problem is still there and is quite annoying. Barbara Doyle Senior Professional Application Designer MS OPS / Buy-In TFAL / DSS T +1-608-684-0236 ***@***.******@***.***> Planned Out of Office: TBD ***@***.*** From: LiHangyu ***@***.***> Sent: Wednesday, March 5, 2025 3:29 AM To: microsoft/vscode ***@***.***> Cc: Doyle, Barbara ***@***.***>; Author ***@***.***> Subject: Re: [microsoft/vscode] Extensions not showing and says they load, but I can't see them (Issue #238966) CAUTION: This em…",,,,,,Anecdotal,comment,,,,,,,,2025-03-05,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2700921572,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"> I have 2 servers that I connect to, one is called devap079 (it is RHEL 7.9), and the other is called devap001 (it is RHEL8). This issue appears when connected to EITHER of these servers. So, the issue exists only when you connect to remote servers. Now lets focus on the remote server and would like to understand the issue you are seeing here. Are you seeing extensions not running or you are not able to install extensions in remote? Can you please explain the exact problem?",,,,,,Anecdotal,comment,,,,,,,,2025-03-07,github/sandy081,https://github.com/microsoft/vscode/issues/238966#issuecomment-2705885098,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Sandeep, The extensions install, but the extension tab does not accurately reflect that the extension is installed on the server and either shows in that window as not installed or wants me to reload the extension. When I search for extension that I know I have added, it finds that extension but only provides an ""install"" option. On the extensions tab: (Reference screenshot #1) * The blue line across the top of the tab never stops going from left to right, it's as if it is stuck ""loading"". * no…",,,,,,Anecdotal,comment,,,,,,,,2025-03-07,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2706466070,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Adding the screenshots here, because they did not come across in the email above: Screenshot #1: ![Image](https://github.com/user-attachments/assets/9750e31b-ff22-4e58-8c64-d16ba53582a9) Screenshot #2: ![Image](https://github.com/user-attachments/assets/7baa8472-d642-4550-af7f-d924374d5ad4)",,,,,,Anecdotal,comment,,,,,,,,2025-03-07,github/bdoyle8,https://github.com/microsoft/vscode/issues/238966#issuecomment-2706687096,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"> * The blue line across the top of the tab never stops going from left to right, it's as if it is stuck ""loading"". * no recommended extensions show in the recommended area. * locally installed extensions show what is in VS Code. * Server extensions (SSH-Installed) is always empty. Thanks for the info - it seems there are issues loading remote extensions from the local machine. - Set the default log level to trace - F1 > Set Log Level > Trace (Use the double tick action the right of the Trace o…",,,,,,Anecdotal,comment,,,,,,,,2025-03-12,github/sandy081,https://github.com/microsoft/vscode/issues/238966#issuecomment-2717519622,"repo: microsoft/vscode | issue: Extensions not showing and says they load, but I can't see them | keyword: gotcha"
"Option to hide/minimize ""files changed"" section in Copilot chat <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- Please search existing issues to avoid creating duplicates. --> <!-- Describe the feature you'd like. --> Feature Request: Option to hide/minimize ""files changed"" section in Copilot chat Description: The ""files changed"" section that appears above the chat input takes up valu…",,,,,,Anecdotal,issue,,,,,,,,2025-07-29,github/cfvargashz,https://github.com/microsoft/vscode/issues/258484,repo: microsoft/vscode | keyword: gotcha | state: closed
"you can disable each in turn file change with `chat.checkpoints.showFileChanges` but if you're referring to the working set, we're working on making this collapsible as well 👍🏻",,,,,,Anecdotal,comment,,,,,,,,2025-07-29,github/justschen,https://github.com/microsoft/vscode/issues/258484#issuecomment-3133945865,"repo: microsoft/vscode | issue: Option to hide/minimize ""files changed"" section in Copilot chat | keyword: gotcha"
"Hey, thanks for your quick response, I was referring to this section: <img width=""1460"" height=""424"" alt=""Image"" src=""https://github.com/user-attachments/assets/a4be4be6-0414-4610-9fe8-e1c06e2765b3"" /> It would be an awesome improvement!",,,,,,Anecdotal,comment,,,,,,,,2025-07-30,github/cfvargashz,https://github.com/microsoft/vscode/issues/258484#issuecomment-3136773065,"repo: microsoft/vscode | issue: Option to hide/minimize ""files changed"" section in Copilot chat | keyword: gotcha"
fix: try always rendering scrollbar in chat editing file list <!-- Thank you for submitting a Pull Request. Please: * Read our Pull Request guidelines: https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests * Associate an issue with the Pull Request. * Ensure that the code is up-to-date with the `main` branch. * Include a description of the proposed changes and how to test them. -->,,,,,,Anecdotal,issue,,,,,,,,2024-10-31,github/joyceerhl,https://github.com/microsoft/vscode/pull/232768,repo: microsoft/vscode | keyword: gotcha | state: closed
"gotcha! this is a good change, works as expected, not sure why it was never merged in ![Screenshot 2025-06-11 at 9 42 02 PM](https://github.com/user-attachments/assets/90109feb-c902-4258-b2ab-eb73a8ca2f53)",,,,,,Anecdotal,comment,,,,,,,,2025-06-12,github/justschen,https://github.com/microsoft/vscode/pull/232768#issuecomment-2965089787,repo: microsoft/vscode | issue: fix: try always rendering scrollbar in chat editing file list | keyword: gotcha
Line numbers sometimes disappear <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/insiders/…,,,,,,Anecdotal,issue,,,,,,,,2025-05-29,github/kontheocharis,https://github.com/microsoft/vscode/issues/250064,repo: microsoft/vscode | keyword: gotcha | state: closed
"Are there any other instances of this kind of thing happening? I didn't find anything while looking through the issues. It has been happening on my machine for a while. I will try to pin down further what causes it, but one thing that does sometimes is switching the actively focused pane.",,,,,,Anecdotal,comment,,,,,,,,2025-05-29,github/kontheocharis,https://github.com/microsoft/vscode/issues/250064#issuecomment-2920522557,repo: microsoft/vscode | issue: Line numbers sometimes disappear | keyword: gotcha
"Despite doing extension bisect, I am starting to think this *is* an issue with the neovim extension...",,,,,,Anecdotal,comment,,,,,,,,2025-05-29,github/kontheocharis,https://github.com/microsoft/vscode/issues/250064#issuecomment-2920546158,repo: microsoft/vscode | issue: Line numbers sometimes disappear | keyword: gotcha
Issue was caused by an inconsistency between vscode's line number setting and neovim's setting. Setting them both to the same value fixed the issue.,,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/kontheocharis,https://github.com/microsoft/vscode/issues/250064#issuecomment-2920988521,repo: microsoft/vscode | issue: Line numbers sometimes disappear | keyword: gotcha
"I've been dealing with this for ages and never tracked it down beyond ""something to do with neovim"" so thank you! Can I check what the exact issue was please? For me I use relative line numbers and I was configured so that neovim would only enable that when not running under VSCode but perhaps I need to hoist that setting to run everywhere?",,,,,,Anecdotal,comment,,,,,,,,2025-05-30,github/appleton,https://github.com/microsoft/vscode/issues/250064#issuecomment-2922065263,repo: microsoft/vscode | issue: Line numbers sometimes disappear | keyword: gotcha
"@appleton The fix in my case was to add `set number` to my `init.vim` for VSCode. I don't have relative numbers set, but I imagine it would be a similar story there: you should set the option both in `init.vim/lua` and in the VSCode settings.",,,,,,Anecdotal,comment,,,,,,,,2025-06-02,github/kontheocharis,https://github.com/microsoft/vscode/issues/250064#issuecomment-2930411321,repo: microsoft/vscode | issue: Line numbers sometimes disappear | keyword: gotcha
"Gotcha, I’ve done the same and not seen the issue since (though I find it would come and go). Thanks again, it’s been driving me completely nuts!",,,,,,Anecdotal,comment,,,,,,,,2025-06-02,github/appleton,https://github.com/microsoft/vscode/issues/250064#issuecomment-2930421184,repo: microsoft/vscode | issue: Line numbers sometimes disappear | keyword: gotcha
"Inline chat rendering is broken - Open https://github.com/microsoft/vscode/blob/1652688dedca995b2ac5fa5e3a6e5f6288e9e1ce/src/vs/workbench/contrib/chat/common/promptSyntax/service/promptsServiceImpl.ts#L168 in an editor - Open inline chat (Ctrt + i) and ask 'change the regex so that it also support unicode word characters' - Output shows a xml content <img width=""1173"" height=""307"" alt=""Image"" src=""https://github.com/user-attachments/assets/13c512c4-e853-4c41-a3e6-6177ca0b31fb"" /> <details> <sum…",,,,,,Anecdotal,issue,,,,,,,,2025-07-11,github/aeschli,https://github.com/microsoft/vscode/issues/255393,repo: microsoft/vscode | keyword: gotcha | state: closed
another side effect from the katex support work but fixed with https://github.com/microsoft/vscode/pull/255429 !,,,,,,Anecdotal,comment,,,,,,,,2025-07-11,github/justschen,https://github.com/microsoft/vscode/issues/255393#issuecomment-3063128222,repo: microsoft/vscode | issue: Inline chat rendering is broken | keyword: gotcha
UI element selection debt Some feedback from https://github.com/microsoft/vscode/pull/246643 - [x] I find that the complexity of the methods justifies putting them into their own respective service. Native host service is already a bit of a kitchen sink of sorts and was never meant to contain all methods for all use cases. But I feel that `getElementData` specifically is getting large enough to think about having it in its own service. Specifically because it seems to depend on the simple brows…,,,,,,Anecdotal,issue,,,,,,,,2025-04-27,github/bpasero,https://github.com/microsoft/vscode/issues/247499,repo: microsoft/vscode | keyword: gotcha | state: closed
"gotcha! thanks for the feedback! I'll address the listener issues this iteration, and yeah this whole chrome debugger tools thing is super complicated, and agree with the new service. the native host main service was just the easiest place to put it at the moment. maybe naming something along the lines of simpleBrowserDebuggerService or something of the sort 🏎",,,,,,Anecdotal,comment,,,,,,,,2025-04-27,github/justschen,https://github.com/microsoft/vscode/issues/247499#issuecomment-2833102291,repo: microsoft/vscode | issue: UI element selection debt | keyword: gotcha
Image drag and drop Testing #241785 - open https://en.wikipedia.org/wiki/Visitor_pattern#Class_diagram in Edge (Linux) - drag the diagram to the Panel chat window - select Claude 3.5 Sonnet - ask `Can you name the classes in this diagram?` Reply is an error: ![Image](https://github.com/user-attachments/assets/fef60460-51ec-438b-8c16-05dac96c9251) Would be nice if it is more human readable: e.g. Just 'Remote image url is not supported with this model',,,,,,Anecdotal,issue,,,,,,,,2025-02-25,github/aeschli,https://github.com/microsoft/vscode/issues/241837,repo: microsoft/vscode | keyword: gotcha | state: closed
@justschen I think this is on you to prevent the attachment. This error means we're sending stuff to the model when it explicitly states it does not support it.,,,,,,Anecdotal,comment,,,,,,,,2025-02-26,github/lramos15,https://github.com/microsoft/vscode/issues/241837#issuecomment-2685402139,repo: microsoft/vscode | issue: Image drag and drop | keyword: gotcha
"should be fixed. a note that the `fetch` tool doesn't work with urls like: ![Image](https://github.com/user-attachments/assets/279e3c00-fd38-4745-b531-578ff941b307) instead, best case is to right click and `Open Image in a New Tab` and that should work.",,,,,,Anecdotal,comment,,,,,,,,2025-03-24,github/justschen,https://github.com/microsoft/vscode/issues/241837#issuecomment-2749467668,repo: microsoft/vscode | issue: Image drag and drop | keyword: gotcha
"1. Start a new chat. 2. Try repeating the steps in this issue. 3. :bug: Upon sending the message, the chat almost immediately clears itself.",,,,,,Anecdotal,comment,,,,,,,,2025-03-27,github/rzhao271,https://github.com/microsoft/vscode/issues/241837#issuecomment-2759256979,repo: microsoft/vscode | issue: Image drag and drop | keyword: gotcha
"<img alt=""Chat flickers and resets as though nothing was asked"" src=""https://github.com/user-attachments/assets/9297903c-e68d-4aa6-950a-f762800c0a6e"" width=300 />",,,,,,Anecdotal,comment,,,,,,,,2025-03-27,github/rzhao271,https://github.com/microsoft/vscode/issues/241837#issuecomment-2759323565,repo: microsoft/vscode | issue: Image drag and drop | keyword: gotcha
"Marking as verified again, though currently, adding an SVG or GIF to the message will break that message and future messages with image attachments.",,,,,,Anecdotal,comment,,,,,,,,2025-03-27,github/rzhao271,https://github.com/microsoft/vscode/issues/241837#issuecomment-2759501483,repo: microsoft/vscode | issue: Image drag and drop | keyword: gotcha
"theme-seti: add tests.[jt]sx fileExtensions variant as react tests Some projects name their tests in the plural form, and the icons show up in vscode with the same icon as react implementation files. This maps the plural version with _react_1 and _react_1_light Fixes issue #243865 <!-- Thank you for submitting a Pull Request. Please: * Read our Pull Request guidelines: https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests * Associate an issue with the Pull Request. * Ensure t…",,,,,,Anecdotal,issue,,,,,,,,2025-03-18,github/avallee,https://github.com/microsoft/vscode/pull/243866,repo: microsoft/vscode | keyword: gotcha | state: closed
"Thanks for the PR. But I need like to ask you to make the change in https://github.com/jesseweed/seti-ui See the header of the Seti theme file: ``` ""information_for_contributors"": [ ""This file has been generated from data in https://github.com/jesseweed/seti-ui"", ""- icon definitions: https://github.com/jesseweed/seti-ui/blob/master/styles/_fonts/seti.less"", ""- icon colors: https://github.com/jesseweed/seti-ui/blob/master/styles/ui-variables.less"", ""- file associations: https://github.com/jessew…",,,,,,Anecdotal,comment,,,,,,,,2025-03-20,github/aeschli,https://github.com/microsoft/vscode/pull/243866#issuecomment-2739960425,repo: microsoft/vscode | issue: theme-seti: add tests.[jt]sx fileExtensions variant as react tests | keyword: gotcha
"Attempt to install extensions in workbench that fail to install from remote code-server related: https://github.com/microsoft/vscode-remote-release/issues/9994 , https://github.com/microsoft/vscode-remote-release/issues/5927#issuecomment-2542472315 , https://github.com/microsoft/vscode-remote-release/issues/9090 , https://github.com/microsoft/vscode-remote-release/issues/9454#issuecomment-2546143419 Provides a way for the remote server to report back extensions that it could not install. The wo…",,,,,,Anecdotal,issue,,,,,,,,2025-01-27,github/joshspicer,https://github.com/microsoft/vscode/pull/238815,repo: microsoft/vscode | keyword: gotcha | state: closed
"@joshspicer Thanks for the initiation. Instead of adding a new `failed` property, I would use the existing `whenExtensionsReady` method. Please change it to return all extension IDs or URIs that server should be initialised with. Eg: ``` whenExtensionsReady(): Promise<Array<string|URI>> ``` On the workbench, add a new contribution similar to https://github.com/microsoft/vscode/blob/f0c1f4ddd62f6531f407f91aef0adf9e0aed5aec/src/vs/workbench/contrib/extensions/electron-sandbox/remoteExtensionsInit…",,,,,,Anecdotal,comment,,,,,,,,2025-01-27,github/sandy081,https://github.com/microsoft/vscode/pull/238815#issuecomment-2615436610,repo: microsoft/vscode | issue: Attempt to install extensions in workbench that fail to install from remote code-server | keyword: gotcha
"### Demo https://github.com/user-attachments/assets/11b47559-6fde-41f3-a44a-3cb924901e0e ## Notes - Remote - SSH directly connects to the `code-server` instance hardcoded on port 25565 - The `code-server` process cannot reach `marketplace.visualstudio.com`. (Blocked for only that program via firewall utility) <img width=""510"" alt=""image"" src=""https://github.com/user-attachments/assets/778544a8-a938-411a-81be-c5d69a624669"" /> - I've simulated a ""failed"" VSIX installation on the server-side by ap…",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/joshspicer,https://github.com/microsoft/vscode/pull/238815#issuecomment-2641762669,repo: microsoft/vscode | issue: Attempt to install extensions in workbench that fail to install from remote code-server | keyword: gotcha
"⚠️ This PR originates from a fork. Due to security restrictions, pipelines from forks are no longer triggered automatically. [Learn more](https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#comment-triggers). If the changes appear safe, you can manually trigger the pipeline by commenting `/AzurePipelines run`.",,,,,,Anecdotal,comment,,,,,,,,2025-02-07,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/pull/238815#issuecomment-2641767342,repo: microsoft/vscode | issue: Attempt to install extensions in workbench that fail to install from remote code-server | keyword: gotcha
changes from last review: https://github.com/microsoft/vscode/pull/238815/commits/5a401fa9e7c35b52f5824204621dceb612bcd1b4,,,,,,Anecdotal,comment,,,,,,,,2025-02-11,github/joshspicer,https://github.com/microsoft/vscode/pull/238815#issuecomment-2651848017,repo: microsoft/vscode | issue: Attempt to install extensions in workbench that fail to install from remote code-server | keyword: gotcha
`webview.postMessage` is not treated as a user interaction for playing sound I'm working on [this extension](https://github.com/leep-frog/what-the-beep) which does two simple things: (1) creates a webview that plays a sound and (2) provides a command that posts a message to the webview to play the sound. The issue is that the [VS Code listener used to post a message](https://code.visualstudio.com/api/extension-guides/webview#passing-messages-from-an-extension-to-a-webview) is not treated as a u…,,,,,,Anecdotal,issue,,,,,,,,2024-12-28,github/leep-frog,https://github.com/microsoft/vscode/issues/237030,repo: microsoft/vscode | keyword: gotcha | state: closed
"It seems like there might be a race condition somewhere actually. The following happens when playing the command twice: 1. Run the same extension as mentioned in the previous comment 2. Run `What the beep: Beep` command 3. Verify no beep 4. Run the command again 5. A beep is produced Perhaps the user gesture is being marked properly, but just delayed. If so, is there a way (in VS code logic or in my logic) to wait for the gesture registration to complete?",,,,,,Anecdotal,comment,,,,,,,,2024-12-30,github/leep-frog,https://github.com/microsoft/vscode/issues/237030#issuecomment-2564949777,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
The issue also recurs if I switch editor focus. For example: 1. Do previous steps so it works 2. Split editor vertically into two editors 3. Switch to other editor 4. The same `play() can only be initiated by a user gesture.` error occurs again,,,,,,Anecdotal,comment,,,,,,,,2025-01-05,github/leep-frog,https://github.com/microsoft/vscode/issues/237030#issuecomment-2571453687,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
```javascript const audioContext = new (window.AudioContext || window.webkitAudioContext)(); if (audioContext.state === 'suspended') { await audioContext.resume(); } async function loadAndPlayAudio(url) { try { const response = await fetch(url); const arrayBuffer = await response.arrayBuffer(); const audioBuffer = await audioContext.decodeAudioData(arrayBuffer); const source = audioContext.createBufferSource(); source.buffer = audioBuffer; source.connect(audioContext.destination); source.start(…,,,,,,Anecdotal,comment,,,,,,,,2025-01-11,github/alpgul,https://github.com/microsoft/vscode/issues/237030#issuecomment-2585457382,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
"```javascript const audio = new Audio(); audio.load(); setTimeout(()=>{ audio.src='https://samples-files.com/samples/audio/mp3/sample-file-1.mp3'; audio.play(); },15000); ``` In the code above, I experimented a bit with the use of audio. It allows audio.play to execute if the audio is activated within 3 seconds after any user interaction. If 3 seconds have passed and it hasn't been activated at all, it doesn't activate.",,,,,,Anecdotal,comment,,,,,,,,2025-01-12,github/alpgul,https://github.com/microsoft/vscode/issues/237030#issuecomment-2585690639,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
"Gotcha, thanks for investigating this! It seems like a ""user gesture"" is only something like a click interaction with the webview. Is there a way to have a registered vscode command count as a user gesture?",,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/leep-frog,https://github.com/microsoft/vscode/issues/237030#issuecomment-2585987477,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
"You can play and control audio in the background application. In that case, user interaction is not required. WebView uses browser APIs, so browser rules apply. In the background, Node.js rules apply, meaning you are free.",,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/alpgul,https://github.com/microsoft/vscode/issues/237030#issuecomment-2586190061,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
"Ah I see, thanks! By background application, do you mean in the `vscode.commands.registerCommand` callback in `extension.ts`? If so, is there any audio documentation in VS Code or recommended npm library to use for VS Code? Or should I just search through any existing npm library?",,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/leep-frog,https://github.com/microsoft/vscode/issues/237030#issuecomment-2588388466,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
This [document ](https://stackoverflow.com/questions/12543237/play-audio-with-node-js)will help you.,,,,,,Anecdotal,comment,,,,,,,,2025-01-14,github/alpgul,https://github.com/microsoft/vscode/issues/237030#issuecomment-2589671414,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
"Thanks for the info! For anyone who's curious, [my extension.ts file at this commit](https://github.com/leep-frog/what-the-beep/blob/dd22a435b4a1aba6dfa2004cfe209eaeccf9c630/src/extension.ts) is what I needed to do to get it to work.",,,,,,Anecdotal,comment,,,,,,,,2025-01-16,github/leep-frog,https://github.com/microsoft/vscode/issues/237030#issuecomment-2594277334,repo: microsoft/vscode | issue: `webview.postMessage` is not treated as a user interaction for playing sound | keyword: gotcha
extension host consuming >300% CPU while no VSCode windows are open <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: http…,,,,,,Anecdotal,issue,,,,,,,,2025-01-04,github/samuela,https://github.com/microsoft/vscode/issues/237245,repo: microsoft/vscode | keyword: gotcha | state: closed
It's not the json-language-features process. The process that runs jsonServerMain has CPU 0.0. Instead its the extension host process. So some extension(s) seem to be busy. https://github.com/microsoft/vscode/wiki/Performance-Issues#visual-studio-code-is-consuming-a-lot-of-cpu has more information on how to find the problematic extension. Can you have a look?,,,,,,Anecdotal,comment,,,,,,,,2025-01-07,github/aeschli,https://github.com/microsoft/vscode/issues/237245#issuecomment-2574757420,repo: microsoft/vscode | issue: extension host consuming >300% CPU while no VSCode windows are open | keyword: gotcha
"How do I view the cpu usage per extension? This behavior only comes on intermittently, so it's not clear how to bisect it.",,,,,,Anecdotal,comment,,,,,,,,2025-01-07,github/samuela,https://github.com/microsoft/vscode/issues/237245#issuecomment-2576166475,repo: microsoft/vscode | issue: extension host consuming >300% CPU while no VSCode windows are open | keyword: gotcha
Once you see the issue happening you need to go to the 'Running Extensions' view and turn on 'Extension Host Profiling' (the record button in the view menu).,,,,,,Anecdotal,comment,,,,,,,,2025-01-08,github/aeschli,https://github.com/microsoft/vscode/issues/237245#issuecomment-2577263906,repo: microsoft/vscode | issue: extension host consuming >300% CPU while no VSCode windows are open | keyword: gotcha
"Gotcha, ok will do -- thanks! I'll close this and open a new issue if/when i can get that profiling data",,,,,,Anecdotal,comment,,,,,,,,2025-01-08,github/samuela,https://github.com/microsoft/vscode/issues/237245#issuecomment-2578548779,repo: microsoft/vscode | issue: extension host consuming >300% CPU while no VSCode windows are open | keyword: gotcha
No new GitHub issue after click 'Create on GitHub' with 'Report Issue' from the 'Help' <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has alrea…,,,,,,Anecdotal,issue,,,,,,,,2024-06-23,github/Flavio78,https://github.com/microsoft/vscode/issues/216907,repo: microsoft/vscode | keyword: gotcha | state: closed
"@justschen with: - all extensions disabled - VS Code version: Code 1.96.0 (138f619c86f1199955d53b4166bef66ef252935c, 2024-12-11T02:29:09.626Z) - OS version: Windows_NT x64 10.0.26100 build 26100 once clicked ""Create on GitHub"", the default browser opens, and title and description are filled with the values from Visual Studio Code Issue Reporter window. The problem seems to be solved. Thanks for asking. Best regards.",,,,,,Anecdotal,comment,,,,,,,,2024-12-15,github/Flavio78,https://github.com/microsoft/vscode/issues/216907#issuecomment-2543985369,repo: microsoft/vscode | issue: No new GitHub issue after click 'Create on GitHub' with 'Report Issue' from the 'Help' | keyword: gotcha
ctrl alt p Prompt mistake <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/insiders/ --> <!…,,,,,,Anecdotal,issue,,,,,,,,2024-05-09,github/zhangenming,https://github.com/microsoft/vscode/issues/212343,repo: microsoft/vscode | keyword: gotcha | state: closed
"Hi @zhangenming, what do you expect to come first? `Accounts: Manage Trusted Extensions For Account`?",,,,,,Anecdotal,comment,,,,,,,,2024-05-31,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/212343#issuecomment-2142731574,repo: microsoft/vscode | issue: ctrl alt p Prompt mistake | keyword: gotcha
What I'm want talking about is the boldface notation now: **t**ypescript: restart ts **s**erve except: typescript: restart **ts** serve,,,,,,Anecdotal,comment,,,,,,,,2024-06-03,github/zhangenming,https://github.com/microsoft/vscode/issues/212343#issuecomment-2144098646,repo: microsoft/vscode | issue: ctrl alt p Prompt mistake | keyword: gotcha
"Gotcha, this is because of this logic here: https://github.com/microsoft/vscode/blob/2c626bbdb970cf661d86b22d7c9273312ab01b9a/src/vs/platform/quickinput/browser/commandsQuickAccess.ts#L50 ``` or(matchesPrefix, matchesWords, matchesContiguousSubString); ``` * The `matchesPrefix` doesn't match anything so that's false... * But the `matchesWords` _does_ match with what you see is bold. It matches the first letters of the words * Since the `matchesWords` returned something, the `matchesContiguousSu…",,,,,,Anecdotal,comment,,,,,,,,2024-06-03,github/TylerLeonhardt,https://github.com/microsoft/vscode/issues/212343#issuecomment-2144219276,repo: microsoft/vscode | issue: ctrl alt p Prompt mistake | keyword: gotcha
"Multiple Node processes persist after workspace closure unless another VS Code window is open When closing a workspace in VS Code, any running Node.js processes (debug sessions, terminals, etc.) are only properly terminated if another VS Code window/workspace is open during the closure. Otherwise, all Node processes continue running in the background. **Steps to Reproduce** - Open VS Code - Open a workspace containing a Node.js project - Start multiple Node.js processes - Close the workspace wh…",,,,,,Anecdotal,issue,,,,,,,,2024-12-02,github/Angrigo,https://github.com/microsoft/vscode/issues/234986,repo: microsoft/vscode | keyword: gotcha | state: closed
"Thank you for filing this issue and sorry you are running into this. > Start multiple Node.js processes Please can you share a sample process, E.g. are you debugging a node.js file and then closing the workspace while the debug session is active. Or are you running a task such as a build/compilation task in the terminal or is this a task from tasks.json",,,,,,Anecdotal,comment,,,,,,,,2024-12-03,github/DonJayamanne,https://github.com/microsoft/vscode/issues/234986#issuecomment-2513332451,repo: microsoft/vscode | issue: Multiple Node processes persist after workspace closure unless another VS Code window is open | keyword: gotcha
When running development servers. This behavior has been confirmed with several major JavaScript frameworks: - Vite - Next.js - AdonisJS - NestJS - Create React App (CRA),,,,,,Anecdotal,comment,,,,,,,,2024-12-03,github/Angrigo,https://github.com/microsoft/vscode/issues/234986#issuecomment-2513863985,repo: microsoft/vscode | issue: Multiple Node processes persist after workspace closure unless another VS Code window is open | keyword: gotcha
"@Angrigo thanks for reporting this. I tried to repro this on stable 1.96.0 on Windows 11 today, and I see only a part of the behaviour you describe. For me the node process does indeed survive longer than the last vscode instance but then get fully cleaned up after ~10-15 seconds. Do you see the same behaviour on your side?",,,,,,Anecdotal,comment,,,,,,,,2024-12-12,github/legomushroom,https://github.com/microsoft/vscode/issues/234986#issuecomment-2539898656,repo: microsoft/vscode | issue: Multiple Node processes persist after workspace closure unless another VS Code window is open | keyword: gotcha
"@legomushroom no, all the processes remains up indefinitely. I think I had this behavior when vscode started to use the ""utility process"" from electron. Shall we investigate in this direction? edit: video https://github.com/user-attachments/assets/85f123c1-ae05-4f05-81a8-b7a3ce0fadcb",,,,,,Anecdotal,comment,,,,,,,,2024-12-12,github/Angrigo,https://github.com/microsoft/vscode/issues/234986#issuecomment-2540146307,repo: microsoft/vscode | issue: Multiple Node processes persist after workspace closure unless another VS Code window is open | keyword: gotcha
"@Angrigo gotcha, thanks. The project you've used in the video is open source? Can you share it with me?",,,,,,Anecdotal,comment,,,,,,,,2024-12-13,github/legomushroom,https://github.com/microsoft/vscode/issues/234986#issuecomment-2541895029,repo: microsoft/vscode | issue: Multiple Node processes persist after workspace closure unless another VS Code window is open | keyword: gotcha
"remote SSH: Participant is not aware of the platform I am on (Windows/Linux/macOS) Testing #235037 It would be great if the participant was told what platform I am on (platform of my local device and if connected also platform of the device I SSH into as well as IP, username ...) so that it can give answers specific to my situation as this can be different depending on the device I am using. Also the participant does not know if I am currently connected to a remote device or not. ![Image](https…",,,,,,Anecdotal,issue,,,,,,,,2024-12-03,github/benibenj,https://github.com/microsoft/vscode/issues/235113,repo: microsoft/vscode | keyword: gotcha | state: closed
"From the connection log (which it has in its context) copilot should be able to get the platform/OS for both local and remote machines. Looks like you got unlucky with this response :( ![Image](https://github.com/user-attachments/assets/b57c4086-e18d-42c0-b9f4-191914c372fb) That said, I don't think it has the proper context to say if you're connected or not right now (even though it is saying so here😛) ![Image](https://github.com/user-attachments/assets/c9c793b2-f142-440c-b448-8c6671ff0fdd)",,,,,,Anecdotal,comment,,,,,,,,2024-12-04,github/joshspicer,https://github.com/microsoft/vscode/issues/235113#issuecomment-2515856108,repo: microsoft/vscode | issue: remote SSH: Participant is not aware of the platform I am on (Windows/Linux/macOS) | keyword: gotcha
"If you are not connected to a remote it does not know your local platform, it would be nice if it was aware of this in this case. It's great that it knows it when it is connected with a remote 👍🏽",,,,,,Anecdotal,comment,,,,,,,,2024-12-04,github/benibenj,https://github.com/microsoft/vscode/issues/235113#issuecomment-2516502697,repo: microsoft/vscode | issue: remote SSH: Participant is not aware of the platform I am on (Windows/Linux/macOS) | keyword: gotcha
"Make VSCode window transparent - VSCode Version: 1.5.3 - OS Version: Windows 10 Anniversary Update ## Feature Request It would be great if we could make the VSCode window transparent, using a percentage. This was discussed on StackOverflow back in June. http://stackoverflow.com/questions/38031369/how-to-make-ms-visual-code-transparent Cheers, **Trevor Sullivan** Docker Captain Microsoft MVP: Cloud & Data Center Management https://trevorsullivan.net https://twitter.com/pcgeek86",,,,,,Anecdotal,issue,,,,,,,,2016-09-25,github/pcgeek86,https://github.com/microsoft/vscode/issues/12578,repo: microsoft/vscode | keyword: gotcha | state: closed
"Looks like the ""vibrancy"" setting for macOS would cover this on Electron: https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winsetvibrancytype-macos Support for it was just added to the Hyper terminal app that also uses Electron: https://github.com/zeit/hyper/releases/tag/1.0.0",,,,,,Anecdotal,comment,,,,,,,,2016-12-12,github/alexkrolick,https://github.com/microsoft/vscode/issues/12578#issuecomment-266563589,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
I've been dying to have this functionality - this would help build UI's without constantly switching apps.,,,,,,Anecdotal,comment,,,,,,,,2017-07-24,github/1-800-jono,https://github.com/microsoft/vscode/issues/12578#issuecomment-317448354,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
Definitely a vs code must have. That way we could achieve this: https://github.com/Microsoft/vscode/issues/32257,,,,,,Anecdotal,comment,,,,,,,,2017-08-10,github/thiagomajesk,https://github.com/microsoft/vscode/issues/12578#issuecomment-321694611,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"👍 looks like someone made a transparent plugin for windows, but mac is still yet to get a solution. https://marketplace.visualstudio.com/items?itemName=s-nlf-fh.glassit",,,,,,Anecdotal,comment,,,,,,,,2017-10-09,github/webdevbrian,https://github.com/microsoft/vscode/issues/12578#issuecomment-335160695,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"-- Sorry for the English, I used Google Translator -- Experiencing the extension. 😄 Thanks @webdevbrian . 👍",,,,,,Anecdotal,comment,,,,,,,,2017-10-11,github/Tekbr,https://github.com/microsoft/vscode/issues/12578#issuecomment-335916804,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"Confirming that the ""Glassit-VSC"" extension for Visual Studio Code (on Windows) works great. ![2017-10-12 14_17_45-](https://user-images.githubusercontent.com/24686713/31519768-4a181510-af58-11e7-8668-389f249d1c0c.png)",,,,,,Anecdotal,comment,,,,,,,,2017-10-12,github/MikePaer,https://github.com/microsoft/vscode/issues/12578#issuecomment-336274090,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"for OSX users, https://github.com/rwu823/afloat which has a transparency option does work with vscode, only gotcha is at some point the afloat menu disappears so you have to turn it on when vscode starts",,,,,,Anecdotal,comment,,,,,,,,2017-12-07,github/sonhanguyen,https://github.com/microsoft/vscode/issues/12578#issuecomment-349933689,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"@okinskas You can give VSCode full window transparency on Linux with [devilspie](https://wiki.archlinux.org/index.php/Per-application_transparency) under Xorg. My `~/.devilspie/opacity.ds` looks like this: ``` ( if ( contains ( window_class ) ""Code"" ) ( begin ( spawn_async (str ""transset-df -i "" (window_xid) "" 0.95"" )) ) ) ```",,,,,,Anecdotal,comment,,,,,,,,2018-01-13,github/samhh,https://github.com/microsoft/vscode/issues/12578#issuecomment-357476156,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"@SamHH that didn't work for me :/ Do I have to restart the computer or something? I ran `devilspie -a` and when I open VSCode, it says `Set Property to 0.95`, but nothing changes...",,,,,,Anecdotal,comment,,,,,,,,2018-01-18,github/lucasqueiroz,https://github.com/microsoft/vscode/issues/12578#issuecomment-358701431,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"@lucasqueiroz Check the link in my comment (Arch Wiki is an _outstanding_ resource for Linux), are you running a compositor? I for example am running Compton.",,,,,,Anecdotal,comment,,,,,,,,2018-01-18,github/samhh,https://github.com/microsoft/vscode/issues/12578#issuecomment-358800058,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"Still waiting for native support of transparency in vscode :) Options: - background transparency (without text - because the most important thing here is codding, and to make this user friendly we definitely need to see the code best way possible in the first place, and than have fun using vscode environment - and, of course, for different parts of the app like: terminal, explorer, menu, side menu...) - text transparency (i guess there will be some that will use this also) - vibrancy effect (th…",,,,,,Anecdotal,comment,,,,,,,,2018-03-14,github/createdbyjurand,https://github.com/microsoft/vscode/issues/12578#issuecomment-372914135,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"TextMate2 allows for RGBA specification in their themes. I think that would be a nice way to handle this in VSCode once support lands upstream, allowing theme authors do so whatever they like for styling the alpha values along with everything else. In the meantime I'm using afloat on OSX. It's a bit of a kludge as afloat's menus disappear when VSCode changes the menu structure, but you can engage the transparency when VSCode first starts up.",,,,,,Anecdotal,comment,,,,,,,,2018-03-14,github/raylee,https://github.com/microsoft/vscode/issues/12578#issuecomment-373137937,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"Will good if VSC will have transparency feature, like gnome-terminal. Transparent only background, text is not transparent. KDE",,,,,,Anecdotal,comment,,,,,,,,2018-06-15,github/DAVIDhaker,https://github.com/microsoft/vscode/issues/12578#issuecomment-397558760,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"I modified the code @SamHH to trigger the blur effect in kde, it yields a very nice result with the new blurring in plasma 5.13! I found that for some reason transset-df wasn't working on my system so I used a kwin rule instead to set the opacity. ``` ( if ( contains ( window_class ) ""Code"" ) ( begin ( spawn_async (str ""xprop -f _KDE_NET_WM_BLUR_BEHIND_REGION 32c -set _KDE_NET_WM_BLUR_BEHIND_REGION 0 -id "" (window_xid) )) ) ) ``` ![screenshot_20180709_135708](https://user-images.githubuserconte…",,,,,,Anecdotal,comment,,,,,,,,2018-07-09,github/pyrareae,https://github.com/microsoft/vscode/issues/12578#issuecomment-403619551,repo: microsoft/vscode | issue: Make VSCode window transparent | keyword: gotcha
"vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. vsce-sign should respect the `$DOTNET_CLI_HOME` instead of creating a `$HOME`.dotnet/corefx/cryptography/crls` directory. Even the `dotnet/sdk` suports the `$DOTNET_CLI_HOME`: https://github.com/dotnet/sdk/issues/8887 If the `$DOTNET_CLI_HOME` doesn't exist, vsce-sign can fallback on the `$HOME/.dotnet` <!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: htt…",,,,,,Anecdotal,issue,,,,,,,,2024-02-17,github/isFakeAccount,https://github.com/microsoft/vscode/issues/205452,repo: microsoft/vscode | keyword: gotcha | state: closed
"VS Code does not deal with these env variables, it should be the Dot Net extension. Please file issue against it.",,,,,,Anecdotal,comment,,,,,,,,2024-02-20,github/sandy081,https://github.com/microsoft/vscode/issues/205452#issuecomment-1954656608,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
"> VS Code does not deal with these env variables, it should be the Dot Net extension. Please file issue against it. I am confused by your comment. Yes, VSCode does not deal with these env variables. That's precisely the issue. If VSCode dealt with those env variables then it would not create the `.dotnet` directory in the `$HOME`. Also, I don't have dot net extension. I have tested with several extensions and all of them create this directory. Are you sure this has nothing to do with the market…",,,,,,Anecdotal,comment,,,,,,,,2024-02-21,github/isFakeAccount,https://github.com/microsoft/vscode/issues/205452#issuecomment-1955545369,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
"ok I figured out what creates this. vsce-sign creates this. I don't know which repo is responsible for vsce-sign though. At least I can disable it by setting the `""extensions.verifySignature"": false` https://github.com/microsoft/vscode/issues/184993",,,,,,Anecdotal,comment,,,,,,,,2024-02-21,github/isFakeAccount,https://github.com/microsoft/vscode/issues/205452#issuecomment-1955672622,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
"Gotcha, you are talking about vsce-sign. Sorry for misleading. I will reopen this. @dtivel Can you please comment here?",,,,,,Anecdotal,comment,,,,,,,,2024-02-21,github/sandy081,https://github.com/microsoft/vscode/issues/205452#issuecomment-1956252794,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
"> ok I figured out what creates this. vsce-sign creates this. I don't know which repo is responsible for vsce-sign though. It may be this repository [Sign](https://github.com/dotnet/sign), the relevant reference is here [msdoc](https://learn.microsoft.com/en-us/visualstudio/extensibility/signing-vsix-packages?view=vs-2022). I also encountered this problem recently, and the `extensions.verifySignature` configuration does not seem to exist. ![image](https://github.com/user-attachments/assets/a467…",,,,,,Anecdotal,comment,,,,,,,,2024-08-31,github/kands-code,https://github.com/microsoft/vscode/issues/205452#issuecomment-2322778479,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
@kands-code It is vsce-sign because I monitored the directory using [LoggedFS](https://rflament.github.io/loggedfs/). I think vscode removed this config in newer releases at some point.,,,,,,Anecdotal,comment,,,,,,,,2024-09-01,github/isFakeAccount,https://github.com/microsoft/vscode/issues/205452#issuecomment-2323229537,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
"> @kands-code It is vsce-sign because I monitored the directory using [LoggedFS](https://rflament.github.io/loggedfs/). > > I think vscode removed this config in newer releases at some point. Oh, I see. I still don't know why I can't change the directory for this part via environment variables though. Also, thanks for the tool you recommended.",,,,,,Anecdotal,comment,,,,,,,,2024-09-01,github/kands-code,https://github.com/microsoft/vscode/issues/205452#issuecomment-2323342314,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
"We closed this issue because we [don't plan to address it](https://aka.ms/vscode-out-of-scope) in the foreseeable future. If you disagree and feel that this issue is crucial: we are happy to listen and to reconsider. If you wonder what we are up to, please see our [roadmap](https://aka.ms/vscoderoadmap) and [issue reporting guidelines](https://aka.ms/vscodeissuereporting). Thanks for your understanding, and happy coding!",,,,,,Anecdotal,comment,,,,,,,,2024-12-10,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/205452#issuecomment-2531984268,repo: microsoft/vscode | issue: vsce-sign: Respect the DOTNET_CLI_HOME when downloaded extensions from the marketplace. | keyword: gotcha
Vertical font hinting bug solution <!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ --> <!-- Please read our Rules of Conduct: https://opensource.microsoft.com/codeofconduct/ --> <!-- 🕮 Read our guide about submitting issues: https://github.com/microsoft/vscode/wiki/Submitting-Bugs-and-Suggestions --> <!-- 🔎 Search existing issues to avoid creating duplicates. --> <!-- 🧪 Test using the latest Insiders build to see if your issue has already been fixed: https://code.visualstudio.com/insider…,,,,,,Anecdotal,issue,,,,,,,,2024-07-09,github/ivanstepanovftw,https://github.com/microsoft/vscode/issues/221246,repo: microsoft/vscode | keyword: protip | state: open
"Could you try `--disable-lcd-text`? On Windows, I am unable to tell the difference between `--disable-lcd-text` and `--disable-font-subpixel-positioning`. Feel free to paste some screenshots showing the differences.",,,,,,Anecdotal,comment,,,,,,,,2024-07-09,github/rzhao271,https://github.com/microsoft/vscode/issues/221246#issuecomment-2218148696,repo: microsoft/vscode | issue: Vertical font hinting bug solution | keyword: protip
Default: <details><summary>Details</summary> <p> ![Default](https://github.com/user-attachments/assets/a615582a-949f-4355-b891-cd567c77f974) </p> </details> --- `--disable-lcd-text`: Unchanged from Default. <details><summary>Details</summary> <p> ![--disable-lcd-text](https://github.com/user-attachments/assets/4a9b44a4-c8f9-4c72-aab5-53c910d96234) </p> </details> --- `--disable-font-subpixel-positioning`: Sharp edges. <details><summary>Details</summary> <p> ![--disable-font-subpixel-positioning…,,,,,,Anecdotal,comment,,,,,,,,2024-07-14,github/ivanstepanovftw,https://github.com/microsoft/vscode/issues/221246#issuecomment-2227291432,repo: microsoft/vscode | issue: Vertical font hinting bug solution | keyword: protip
"Hey @rzhao271, this issue might need further attention. @ivanstepanovftw, you can help us out by closing this issue if the problem no longer exists, or adding more information.",,,,,,Anecdotal,comment,,,,,,,,2024-10-02,github/vs-code-engineering[bot],https://github.com/microsoft/vscode/issues/221246#issuecomment-2388411480,repo: microsoft/vscode | issue: Vertical font hinting bug solution | keyword: protip
Unable to reproduce the issue on my Fedora VMs. I'm unsure whether this issue could depend on one's display or hardware.,,,,,,Anecdotal,comment,,,,,,,,2024-10-04,github/rzhao271,https://github.com/microsoft/vscode/issues/221246#issuecomment-2394280379,repo: microsoft/vscode | issue: Vertical font hinting bug solution | keyword: protip
"My solution still works for me on both Fedora and Debian. I do not have VM to check whether VM solves this problem. I am already tired of this bug, I solved it once and I keep using it. You may do whatever you want with this issue.",,,,,,Anecdotal,comment,,,,,,,,2024-10-05,github/ivanstepanovftw,https://github.com/microsoft/vscode/issues/221246#issuecomment-2395178209,repo: microsoft/vscode | issue: Vertical font hinting bug solution | keyword: protip
"> I am unable to tell the difference between `--disable-lcd-text` and `--disable-font-subpixel-positioning` First, what does image editor says when you overlay screenshot with no argument and with `--disable-font-subpixel-positioning` argument in difference mode? Maybe you need glasses or something. Second, there is a lot of solution of this Electron bug. I just bring both bug and solution there because you close issues because you are all cannot see the blur. I google `""disable-font-subpixel-p…",,,,,,Anecdotal,comment,,,,,,,,2024-10-05,github/ivanstepanovftw,https://github.com/microsoft/vscode/issues/221246#issuecomment-2395179482,repo: microsoft/vscode | issue: Vertical font hinting bug solution | keyword: protip
"Still reproducible, still fixes with `--disable-font-subpixel-positioning`. Debian 13. Before: ![Image](https://github.com/user-attachments/assets/7f718981-dbe6-4730-8a68-dffc783fbce3) After: ![Image](https://github.com/user-attachments/assets/23452db4-a5a1-49ca-93d7-3d1ca14a0235)",,,,,,Anecdotal,comment,,,,,,,,2025-06-24,github/ivanstepanovftw,https://github.com/microsoft/vscode/issues/221246#issuecomment-3001483485,repo: microsoft/vscode | issue: Vertical font hinting bug solution | keyword: protip
"Closing Brace auto-indent doesn't work properly - VSCode Version: Code 1.18.1 (929bacba01ef658b873545e26034d1a8067445e9, 2017-11-16T18:32:36.023Z) - OS Version: Windows_NT x64 10.0.16299 - Extensions: Extensions are disabled --- Steps to Reproduce: 1. Add spaces between opening and closing brace of a method 2. Move the caret to a position in between the spaces and hit enter Expected The closing brace is indented properly Actual Behavior The spaces preceding the closing brace are retained ![ezgi…",,,,,,Anecdotal,issue,,,,,,,,2017-12-14,github/akshita31,https://github.com/microsoft/vscode/issues/40235,repo: microsoft/vscode | keyword: protip | state: closed
@rebornix do you have any ETA? we have a [PR 1906](https://github.com/OmniSharp/omnisharp-vscode/pull/1906) that is blocked on this item. How can I assist?,,,,,,Anecdotal,comment,,,,,,,,2018-03-06,github/colombod,https://github.com/microsoft/vscode/issues/40235#issuecomment-370819747,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
Can this be prioritized? Its preventing omnisharp from implementing standard C# bracket formatting. See https://github.com/OmniSharp/omnisharp-vscode/pull/1906 and https://github.com/OmniSharp/omnisharp-vscode/issues/1591). This makes using VS Code for C# a non-starter in my org.,,,,,,Anecdotal,comment,,,,,,,,2020-06-17,github/vcipriani,https://github.com/microsoft/vscode/issues/40235#issuecomment-645590227,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"Yes, this is particularly frustrating that being a flagship language made my Microsoft and a flagship editor made by the same company, they cannot make such a simple thing work out of box, for years.",,,,,,Anecdotal,comment,,,,,,,,2020-06-18,github/pengshao,https://github.com/microsoft/vscode/issues/40235#issuecomment-645780978,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"Keep in mind this is not the same as Visual Studio (they're probably not the same team as well), so this kind of feature may take a while as it may break existing functionality @pengshao82",,,,,,Anecdotal,comment,,,,,,,,2020-06-29,github/sr229,https://github.com/microsoft/vscode/issues/40235#issuecomment-651426394,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"@sr229 I know, that is why I was referring vscode as flagship ""editor"" instead of IDE. VS on the other hand handles this just fine as I use it in my daily work. But for performance reason we are thinking of encouraging people to switch to VS code and this bug was pretty much a joy killer that took us by big surprise...",,,,,,Anecdotal,comment,,,,,,,,2020-09-02,github/pengshao,https://github.com/microsoft/vscode/issues/40235#issuecomment-685941033,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"the problem i'm facing now even if i correct it manually, when i press save it goes to the wrong position any help will be appreciated",,,,,,Anecdotal,comment,,,,,,,,2020-09-23,github/swaidi,https://github.com/microsoft/vscode/issues/40235#issuecomment-697266864,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"Closing this since after 3 years it has one upvote (plus a handful of comments that are essentially upvotes) While this is a bug, it does not break the code and is fixed by running format (protip: try enabling format on save!)",,,,,,Anecdotal,comment,,,,,,,,2020-10-03,github/mjbvz,https://github.com/microsoft/vscode/issues/40235#issuecomment-703026286,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
I think saying this has one upvote is short sighted. There are multiple issues linked to this and someone complained 9 days before you made your message. I am still having this problem as well,,,,,,Anecdotal,comment,,,,,,,,2020-10-22,github/nicholasoxford,https://github.com/microsoft/vscode/issues/40235#issuecomment-714628308,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"there are several other editors that have preferences panels for this, it's about time vscode was less prescriptive considering how many developer communities it supports. The original team dismissed this and said there was only two ways to do code bracing and indenting 'ever', and I've argued this config panel since day 1 of vscode. It would solve a lot of developer issues just to give control to the DEVELOPER on how they format code so that plugins for languages could also default to what THE…",,,,,,Anecdotal,comment,,,,,,,,2021-01-11,github/dawesi,https://github.com/microsoft/vscode/issues/40235#issuecomment-758136980,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
I truly hope y'all reconsider this issue. Yes it might not break anything but the simple things that make life easier are what make people stay.,,,,,,Anecdotal,comment,,,,,,,,2021-04-27,github/MJakeShapiro,https://github.com/microsoft/vscode/issues/40235#issuecomment-827879536,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"Would also like to voice my frustration on this. It prevents me from using VSCode with C# for years now. And I don't think there are only a handful of users who are frustated by this, is just that the git issues are hard to find on google (i.e searching for ""vscode C# place brace on new line"" on Google does not point to any of the relevant issues)",,,,,,Anecdotal,comment,,,,,,,,2021-05-23,github/gabrieldechichi,https://github.com/microsoft/vscode/issues/40235#issuecomment-846583926,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"For anyone seeing this in the future. I've found a workaround to automatically place braces on a new line by using `keybindgs` and `snippets`. Adding the following to your `keybinding.json` config should do the trick: ``` { ""key"": ""Shift+["", ""command"": ""editor.action.insertSnippet"", ""when"": ""(editorLangId == csharp || editorLangId == cpp || editorLangId == c) && editorTextFocus"", ""args"": { ""snippet"": ""\n{\t$0\n}"" } }, ``` This is not a perfect solution, as it jumps the line when you type `{` in…",,,,,,Anecdotal,comment,,,,,,,,2021-05-23,github/gabrieldechichi,https://github.com/microsoft/vscode/issues/40235#issuecomment-846603994,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"I got @gabrieldechichi's solution to work when `enter` is pressed. First download [this extension](https://marketplace.visualstudio.com/items?itemName=geddski.macros) to add `macros`. Add to settings.json: ``` // See keybindings.json for use information ""macros"": { ""newLineAndFormat"": [ {""command"": ""type"", ""args"": {""text"": ""\n""}}, ""editor.action.formatDocument"", ], } ``` Add to keybindings.json: ``` // C# only { // Format on enter pressed ""key"": ""enter"", ""command"": ""macros.newLineAndFormat"", ""w…",,,,,,Anecdotal,comment,,,,,,,,2021-06-07,github/icutter,https://github.com/microsoft/vscode/issues/40235#issuecomment-856185683,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
It's something that should be as simple as a line in settings.json. I don't understand why they keep ignoring it.,,,,,,Anecdotal,comment,,,,,,,,2021-06-10,github/Olyhrias,https://github.com/microsoft/vscode/issues/40235#issuecomment-858916431,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"> // C# only > { > // Format on enter pressed > ""key"": ""enter"", > ""command"": ""macros.newLineAndFormat"", > ""when"": ""editorLangId == csharp && editorTextFocus"" > } @taglia24 Does your format action takes the cursor to the beginning of the line, instead of respecting current indentation? ![image](https://user-images.githubusercontent.com/15620434/121604459-c5614480-ca07-11eb-98b6-dea5f08f8a5e.png)",,,,,,Anecdotal,comment,,,,,,,,2021-06-10,github/gabrieldechichi,https://github.com/microsoft/vscode/issues/40235#issuecomment-859118678,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"It seemed to work fine after disabling some extensions, but it's back @gabrieldechichi. For me it happens everytime the code is formatted. I was trying this (really cheap) trick using comments as placeholders: ``` ""macros"": { ""newLineAndFormat"": [ {""command"": ""type"", ""args"": {""text"": ""\n""}}, {""command"": ""editor.action.commentLine""}, ""editor.action.formatDocument"", {""command"": ""editor.action.removeCommentLine""} ], }, ``` Anyway formatDocument seems to work asynchronously, so some some sort of on…",,,,,,Anecdotal,comment,,,,,,,,2021-06-14,github/icutter,https://github.com/microsoft/vscode/issues/40235#issuecomment-860693612,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"A workaround is to add this to settings.json while having the macros extension added `""macros"": { ""curl"": [ {""command"": ""type"",""args"": {""text"": ""\n{\n\n}""}}, ""cursorUp"", ""tab"", ], }, ` and then adding a keybinding to keybindings.json ` // C# only { ""key"": ""shift+enter"", ""command"": ""macros.curl"", ""when"": ""editorLangId == csharp && editorTextFocus"" }`",,,,,,Anecdotal,comment,,,,,,,,2021-08-02,github/sarkh200,https://github.com/microsoft/vscode/issues/40235#issuecomment-891247603,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"Since somehow none of the above worked for me, I went ahead and made a (probably) needlessly long macro to do what I wanted. For this as above you will need the macro extension. Put this in settings.json: ``` ""macros"": { ""curlForm"": [ ""cursorLeft"", {""command"": ""type"",""args"": {""text"": ""\n""}}, ""cursorRight"", {""command"": ""type"",""args"": {""text"": ""\n""}}, {""command"": ""type"",""args"": {""text"": ""\n""}}, ""cursorUp"", ""tab"" ], }, ``` Put this is keybindings.json: ``` // C# { ""key"": ""shift+enter"", ""command"": …",,,,,,Anecdotal,comment,,,,,,,,2021-09-24,github/D-B-Daugh,https://github.com/microsoft/vscode/issues/40235#issuecomment-926861529,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
Ironcutter that worked for me! I spent wayyyy too long trying to solve this. But i'll be damned if i have confusing bracket placement.,,,,,,Anecdotal,comment,,,,,,,,2021-11-18,github/HoveringGoat,https://github.com/microsoft/vscode/issues/40235#issuecomment-973216772,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"I wrote a really minimal vscode extension ([C# Curly Formatter](https://marketplace.visualstudio.com/items?itemName=Ironcutter24.cscurlyformatter)) to solve curly brackets indentation problems. I'm also going to make it keep tab spacing in new lines, like in regular Visual Studio, as soon as I can. Hope this helps, let me know if you encounter any issues with it.",,,,,,Anecdotal,comment,,,,,,,,2021-11-26,github/icutter,https://github.com/microsoft/vscode/issues/40235#issuecomment-980405026,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"> I wrote a really minimal vscode extension ([C# Curly Formatter](https://marketplace.visualstudio.com/items?itemName=Ironcutter24.cscurlyformatter)) to solve curly brackets indentation problems. I'm also going to make it keep tab spacing in new lines, like in regular Visual Studio, as soon as I can. Hope this helps, let me know if you encounter any issues with it. You ABSOLUTE Legend",,,,,,Anecdotal,comment,,,,,,,,2021-11-28,github/HunterLintz,https://github.com/microsoft/vscode/issues/40235#issuecomment-980826202,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"> I wrote a really minimal vscode extension ([C# Curly Formatter](https://marketplace.visualstudio.com/items?itemName=Ironcutter24.cscurlyformatter)) to solve curly brackets indentation problems. I'm also going to make it keep tab spacing in new lines, like in regular Visual Studio, as soon as I can. Hope this helps, let me know if you encounter any issues with it. Hero!",,,,,,Anecdotal,comment,,,,,,,,2025-03-07,github/gudiugudiu,https://github.com/microsoft/vscode/issues/40235#issuecomment-2705516068,repo: microsoft/vscode | issue: Closing Brace auto-indent doesn't work properly | keyword: protip
"Several extensions uninstall after restarting VSCode Type: <b>Bug</b> 1. Install the following extensions: - GitLens - Ruby Solargraph - Go - GitHub Copilot 2. Restart VSCode 3. See that the extensions are no longer installed VS Code version: Code 1.74.3 (Universal) (97dec172d3256f8ca4bfb2143f3f76b503ca0534, 2023-01-09T17:07:18.579Z) OS version: Darwin x64 21.6.0 Modes: Sandboxed: No <details> <summary>System Info</summary> |Item|Value| |---|---| |CPUs|Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz (…",,,,,,Anecdotal,issue,,,,,,,,2023-01-18,github/wayneadams,https://github.com/microsoft/vscode/issues/171670,repo: microsoft/vscode | keyword: protip | state: closed
"Thanks for reporting this issue! Unfortunately, it's hard for us to understand what issue you're seeing. Please help us out by providing a screen recording showing exactly what isn't working as expected. While we can work with most standard formats, `.gif` files are preferred as they are displayed inline on GitHub. You may find https://gifcap.dev helpful as a browser-based gif recording tool. If the issue depends on keyboard input, you can help us by enabling screencast mode for the recording (…",,,,,,Anecdotal,comment,,,,,,,,2023-01-23,github/vscodenpa,https://github.com/microsoft/vscode/issues/171670#issuecomment-1400244153,repo: microsoft/vscode | issue: Several extensions uninstall after restarting VSCode | keyword: protip
Thanks for the protip @sandy081 ! Below is an example of the experience with GitLens. ![Recording 2023-01-27 at 11 58 16](https://user-images.githubusercontent.com/15034841/215185731-c167d9e9-1131-4ca3-8dbd-b7f2568fd58e.gif),,,,,,Anecdotal,comment,,,,,,,,2023-01-27,github/wayneadams,https://github.com/microsoft/vscode/issues/171670#issuecomment-1407012833,repo: microsoft/vscode | issue: Several extensions uninstall after restarting VSCode | keyword: protip
Thanks for sharing the video. Can you please share following log while doing the same as above? - F1 > Open View > Shared,,,,,,Anecdotal,comment,,,,,,,,2023-02-02,github/sandy081,https://github.com/microsoft/vscode/issues/171670#issuecomment-1414207846,repo: microsoft/vscode | issue: Several extensions uninstall after restarting VSCode | keyword: protip
This issue has been closed automatically because it needs more information and has not had recent activity. See also our [issue reporting](https://aka.ms/vscodeissuereporting) guidelines. Happy Coding!,,,,,,Anecdotal,comment,,,,,,,,2023-02-10,github/vscodenpa,https://github.com/microsoft/vscode/issues/171670#issuecomment-1425663128,repo: microsoft/vscode | issue: Several extensions uninstall after restarting VSCode | keyword: protip
"Terminal resize slow with high CPU usage Since upgrading from 1.25.1 there have been a number of performance related issues with the terminal: - #57279 - #56628 It appears the performance issues related to typing in the terminal have been resolved, however the high CPU usage and slowness when resizing the terminal persists for me. I have downgraded to `1.25.1` and back up to confirm the issue was not present in that version. The problem has all the hallmarks of triggering a refresh on the termi…",,,,,,Anecdotal,issue,,,,,,,,2018-09-19,github/ProTip,https://github.com/microsoft/vscode/issues/58975,repo: microsoft/vscode | keyword: protip | state: closed
"The high CPU usage is due to a lot of things that need to happen when the terminal is resized, and this problem is amplified when you have more terminals. https://github.com/xtermjs/xterm.js/blob/290c95ad71f8b1264139a7ed6f070c4741a8987e/src/Buffer.ts#L112 We're working on improvements, see: - https://github.com/xtermjs/xterm.js/issues/791 - https://github.com/xtermjs/xterm.js/issues/1685 - https://github.com/xtermjs/xterm.js/issues/622",,,,,,Anecdotal,comment,,,,,,,,2018-09-19,github/Tyriar,https://github.com/microsoft/vscode/issues/58975#issuecomment-422930957,repo: microsoft/vscode | issue: Terminal resize slow with high CPU usage | keyword: protip
"Is this a known performance regression from `1.25`? I'm only using one terminal per the repro steps, and this issue is not present in `1.25`.",,,,,,Anecdotal,comment,,,,,,,,2018-09-19,github/ProTip,https://github.com/microsoft/vscode/issues/58975#issuecomment-422936719,repo: microsoft/vscode | issue: Terminal resize slow with high CPU usage | keyword: protip
"@Tyriar there is severe lag in both resizing and scrolling when the terminal is filled with text that is not present in version `1.25`. Running with `code --ignore-gpu-blacklist` does not appear to resolve the issue, and I have not seen this particular regression addressed or acknowledged in the other issues. Should I open a new issue that's more explicit about this being a performance regression from `1.25`, or is this known?",,,,,,Anecdotal,comment,,,,,,,,2018-09-20,github/ProTip,https://github.com/microsoft/vscode/issues/58975#issuecomment-423249080,repo: microsoft/vscode | issue: Terminal resize slow with high CPU usage | keyword: protip
"@jrieken I notice that in 1.25 we seem to debounce the window resize event and only reflow when no changes come in after a short period, but not in 1.28? Do you know more about this change?",,,,,,Anecdotal,comment,,,,,,,,2018-09-21,github/Tyriar,https://github.com/microsoft/vscode/issues/58975#issuecomment-423574691,repo: microsoft/vscode | issue: Terminal resize slow with high CPU usage | keyword: protip
"@bpasero @jrieken I'm not seeing this anymore, feel free to unsubscribe. @ProTip I notice no major difference in performance between the two, in fact 1.28 seems to be a little faster (as expected), at least on mac. Could you record a performance trace of the issue you're seeing, save and upload it? https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool",,,,,,Anecdotal,comment,,,,,,,,2018-09-24,github/Tyriar,https://github.com/microsoft/vscode/issues/58975#issuecomment-423996098,repo: microsoft/vscode | issue: Terminal resize slow with high CPU usage | keyword: protip
"Actually, this is almost certainly to do with the update from Electron 1.7 to Electron 2. Closing this in favor of the issues mentioned in https://github.com/Microsoft/vscode/issues/58975#issuecomment-422930957, plus https://github.com/Microsoft/vscode/issues/52629",,,,,,Anecdotal,comment,,,,,,,,2018-09-24,github/Tyriar,https://github.com/microsoft/vscode/issues/58975#issuecomment-423998731,repo: microsoft/vscode | issue: Terminal resize slow with high CPU usage | keyword: protip
"I may still get a perf cap if you are interested. For what it's worth, I see this issue in my XUbuntu 16.04 VM but not on OSX.",,,,,,Anecdotal,comment,,,,,,,,2018-09-24,github/ProTip,https://github.com/microsoft/vscode/issues/58975#issuecomment-424042483,repo: microsoft/vscode | issue: Terminal resize slow with high CPU usage | keyword: protip
"Setting Cmder.exe as integrated shell still opens in separate window - VSCode Version: 1.5.2 - OS Version: Windows 10 Steps to Reproduce: 1. In user settings add `""terminal.integrated.shell.windows"": ""C:\\Program Files (x86)\\cmder\\Cmder.exe"",` 2. Press `ctrl` + `backtick` 3. Notice Cmder opens in separate window after trying to open in integrated spot.",,,,,,Anecdotal,issue,,,,,,,,2016-09-14,github/jjacode,https://github.com/microsoft/vscode/issues/12006,repo: microsoft/vscode | keyword: protip | state: closed
"cmder is a full-blown terminal emulator, not a psuedo terminal/shell which is what you need to specify there. Think of it that cmder is basically what the VS Code integrated terminal is, you cannot attach VS Code's integrated terminal to cmder for example. So this is a duplicate of #6935 I think [Clink](https://mridgers.github.io/clink/) is cmder's underlying shell, however I believe there are some issues with using Clink and git bash which make it less than ideal such as #7345",,,,,,Anecdotal,comment,,,,,,,,2016-09-14,github/Tyriar,https://github.com/microsoft/vscode/issues/12006#issuecomment-247095846,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
"@Tyriar @jjacode Reference the bash executable within Cmder and you appear to get the full Cmder shell, for example: terminal.integrated.shell.windows"": ""C:\\Users\\Popey\\Downloads\\Cmder2\\vendor\\git-for-windows\\bin\\bash.exe"",",,,,,,Anecdotal,comment,,,,,,,,2017-04-19,github/popey456963,https://github.com/microsoft/vscode/issues/12006#issuecomment-295448501,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
"This approach is only running the git bash and missing some of cmders settings. Giving me some problems with the the codeset and other things. If you want the full cmder shell as you are used to, set the following in the settings(of course adapt you paths and choose the 32bit cmd.exe if required): ` ""terminal.integrated.shell.windows"": ""C:\\WINDOWS\\sysnative\\cmd.exe"", ""terminal.integrated.shellArgs.windows"" : [""/K"",""C:\\cmder\\vendor\\init.bat""] ` Thanks a lot @thinkOfaNumber. Without his pos…",,,,,,Anecdotal,comment,,,,,,,,2017-05-22,github/Jarvid,https://github.com/microsoft/vscode/issues/12006#issuecomment-303048849,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
"You're welcome, thanks for the attribution! Feel free to upvote the SO post if you think it's useful ;-)",,,,,,Anecdotal,comment,,,,,,,,2017-05-23,github/thinkOfaNumber,https://github.com/microsoft/vscode/issues/12006#issuecomment-303262707,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
"There is also different trick - opening your text editor in cmder ;) https://medium.com/@WMorkowski/protip-integrating-cmder-with-text-editor-7f08a6e76de7 from article: > 1. Run your cmder. > 2. Go to ‘Settings -> Startup -> Environment’ > 3. Type: set EDITOR_PATH=C:\Program Files (x86)\Microsoft VS Code\Code.exe alias editor=""%EDITOR_PATH%"" $1 -new_console:s50V Where > in the first line you should type path to your text editor (I was > testing it on Visual Studio Code and Sublime, but it shoul…",,,,,,Anecdotal,comment,,,,,,,,2017-06-15,github/Morkowski,https://github.com/microsoft/vscode/issues/12006#issuecomment-308864406,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
I only get cmder / clink to work OK inside Code if I launch Code from cmder. Launching Code directly and navigating to the integrated terminal just gives me Clink errors. Any idea..? Looks like the path to clink is wrong somehow when launching Code directly from the start menu. Terminal output when launching Code ``` Generating clink initial settings in C:\config\settings Additional *.lua files in C:\config are loaded on startup. The system cannot find the path specified. Creating intial aliase…,,,,,,Anecdotal,comment,,,,,,,,2017-07-13,github/johnkors,https://github.com/microsoft/vscode/issues/12006#issuecomment-315016435,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
"@johnkors I was having the same problem. Create a file in the root of your cmder folder ""whatever"".bat. I named mine vscode.bat. With the following code. `@echo off` `SET CMDER_ROOT=C:\cmder` (your path to cmder) `""%CMDER_ROOT%\vendor\init.bat""` Then in your vscode settings add the following to your settings.json `""terminal.integrated.shell.windows"": ""C:\\WINDOWS\\sysnative\\cmd.exe"",` `""terminal.integrated.shellArgs.windows"": [""/K"", ""C:\\cmder\\vscode.bat""]` Works perfect for me now",,,,,,Anecdotal,comment,,,,,,,,2017-07-15,github/kemotoe,https://github.com/microsoft/vscode/issues/12006#issuecomment-315539390,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
Updates: - There's an official guide on our website for configuring the cmder shell: https://code.visualstudio.com/docs/editor/integrated-terminal#_can-i-use-cmders-shell-with-the-terminal-on-windows - Cmder also has one on their wiki https://github.com/cmderdev/cmder/wiki/Seamless-VS-Code-Integration,,,,,,Anecdotal,comment,,,,,,,,2018-09-12,github/Tyriar,https://github.com/microsoft/vscode/issues/12006#issuecomment-420476621,repo: microsoft/vscode | issue: Setting Cmder.exe as integrated shell still opens in separate window | keyword: protip
I know its free and its Great BUT can you fix the middle click issue on Linux please? - VSCode Version:the latest - OS Version: Arch latest Steps to Reproduce: run vscode and select some thing and try and mouse middle click to paste it! 1. 2.,,,,,,Anecdotal,issue,,,,,,,,2016-11-25,github/i-frost,https://github.com/microsoft/vscode/issues/16047,repo: microsoft/vscode | keyword: protip | state: closed
"It seems to be completly oblivious to what I have selected and tried to paste, it just paste something I copied with cntrl C, sometime ago. Please fix this its driving me nuts, I know you guys dont have much time but this a fundamental feature of Linux, I know its not a Microsoft Win Feature but it is amazing!",,,,,,Anecdotal,comment,,,,,,,,2016-11-25,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-262869607,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"Use `xbindkeys` _(PROtip: xbindkeys_config, nice gui)_ to run something like `xmacroplay` which sends synthetic keystrokes to the focused input. I have a Logitech G700s mouse that has a total of 15 buttons/ways you can move the wheel. I also run Arch, if you want, I will share my configs.",,,,,,Anecdotal,comment,,,,,,,,2016-11-27,github/rozzzly,https://github.com/microsoft/vscode/issues/16047#issuecomment-263155335,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"Yes please rozzzly I can try your config. It seems to work sometimes but not others. But I found out If it doesn't work and I then go back and select text again and re-try middle click it works on second attempt consistently, not sure why it does not on first attempt.",,,,,,Anecdotal,comment,,,,,,,,2016-11-27,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-263156788,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"@i-frost This is implemented behind the `editor.selectionClipboard` option, which is `true` by default, and it should be working. Is it possible you have some sort of special setup where the selection clipboard would not work in general, or is this perhaps a regression from our latest Electron update. @Tyriar does this feature still work for you? Implemented at https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/selectionClipboard/electron-browser/selectionClipboard.ts#L19",,,,,,Anecdotal,comment,,,,,,,,2016-11-30,github/alexdima,https://github.com/microsoft/vscode/issues/16047#issuecomment-263826098,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
I've used it pretty much daily since it was added and it's never stopped working for me. Maybe there is an issue on Arch Linux?,,,,,,Anecdotal,comment,,,,,,,,2016-11-30,github/Tyriar,https://github.com/microsoft/vscode/issues/16047#issuecomment-263952493,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
I checked my settings files and it was not set so I added it to my json file for good measure and it appears to be working fine now! Thanks,,,,,,Anecdotal,comment,,,,,,,,2016-11-30,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-263996441,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"Yer the whole scenario has been strange but it is working now so I'm happy! I also did a OS update today and rebooted so maybe that fixed it. On Wed, Nov 30, 2016 at 9:32 PM, Daniel Imms <notifications@github.com> wrote: > That's strange, it's been the default for several versions 😕 > > — > You are receiving this because you modified the open/close state. > Reply to this email directly, view it on GitHub > <https://github.com/Microsoft/vscode/issues/16047#issuecomment-264001818>, > or mute the …",,,,,,Anecdotal,comment,,,,,,,,2016-11-30,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-264008473,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"Sadly I spoke too soon, it just did it again. I right clicked on a function name and selected 'find all references' had a look at the list in the reference window and then selected a module import line in file on other window pane and then middle clicked to paste line into a file I had done the find references in, but it pasted the function name I was looking for references instead of the selected line. Although I could clearly see in the other window the module line was selected. I have 2 wind…",,,,,,Anecdotal,comment,,,,,,,,2016-11-30,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-264020154,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"Can you help me find out what is doing this please, I am getting pretty frustrated with it happening. It as become worse since upgrading to : Version 1.8.1 Date 2016-12-19T14:41:20.664Z Shell 1.4.6 Renderer 53.0.2785.143 Node 6.5.0",,,,,,Anecdotal,comment,,,,,,,,2017-01-17,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-273073553,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"If I use xorg-xsel to display what is in the current selection it does not correspond to the text I have just selected in the VScode window., if I then re-select the text it works. This is not consistently happening and I can not recreate it on demand, but there must be a bug and I am using VScode 24/7 at the moment and its getting really annoying playing the pasting lottery! It does not happen when selecting and pasting on the terminal or other apps, only if I have selected some text in the VS…",,,,,,Anecdotal,comment,,,,,,,,2017-01-17,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-273107154,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"I'm not sure its the same thing as my problem. I am not using tmux and my issue is just so random. sounds like the #17349 <https://github.com/Microsoft/vscode/issues/17349#issuecomment-267882217> issue is either working or not. Also ctrl+c ctrl+v works its just the middle mouse click which has the random issue. Thanks On Sat, Jan 21, 2017 at 1:08 AM, Alexandru Dima <notifications@github.com> wrote: > @i-frost <https://github.com/i-frost> Maybe #17349 (comment) > <https://github.com/Microsoft/vs…",,,,,,Anecdotal,comment,,,,,,,,2017-01-21,github/i-frost,https://github.com/microsoft/vscode/issues/16047#issuecomment-274240216,repo: microsoft/vscode | issue: I know its free and its Great BUT can you fix the middle click issue on Linux please? | keyword: protip
"Improve the Code update experience The current Code Updates are highly annoying and highly intrusive! Please find a way to make the updates less intrusive... the Visual Studio way with a flag and number is sooo much better! I can understand that your policy is constant updates, but it feels like part of me starting up Code is to do an update first! It is uber annoying. Then after the update, I still have to see that annoying update bar about what the update did... seriously just get out of the …",,,,,,Anecdotal,issue,,,,,,,,2016-07-01,github/SergeySagan,https://github.com/microsoft/vscode/issues/8595,repo: microsoft/vscode | keyword: protip | state: closed
"I know how annoying it can be to receive _up to date_ software, and especially having to _click-close_ a notice explaining important changes/bug fixes/new functionality. I mean come on! ## Here's how you can fix that: :wink: ###### Method 1 Edit _`project_root/.vscode/settings.json`_, add this line ``` js { // ... ""update.channel"": ""none"", // ... } ``` Now vscode shouldn't contact the server to looks for updates... But want a more concrete solution? ###### Method 2 Follow this tutorial on how t…",,,,,,Anecdotal,comment,,,,,,,,2016-07-01,github/rozzzly,https://github.com/microsoft/vscode/issues/8595#issuecomment-229909020,repo: microsoft/vscode | issue: Improve the Code update experience | keyword: protip
"Hey @rozzzly thanks for your smartass and useless reply. Your perspective of how things should be is not the ultimate right perspective. In fact quite the opposite! I work in a size-able group of developers and most of us have raised the concern of the annoyance of the update notification in Code. Furthermore, I don't want to not know or be able to update at all! I want to do it on MY preference, not yours! Just move it up into the title bar like VS does and tell me how many versions I'm behind…",,,,,,Anecdotal,comment,,,,,,,,2016-07-01,github/SergeySagan,https://github.com/microsoft/vscode/issues/8595#issuecomment-229991591,repo: microsoft/vscode | issue: Improve the Code update experience | keyword: protip
"A configurable update interval could be a possible solution. For example, on startup, once a day, once a month, never",,,,,,Anecdotal,comment,,,,,,,,2016-07-01,github/remcoros,https://github.com/microsoft/vscode/issues/8595#issuecomment-229993465,repo: microsoft/vscode | issue: Improve the Code update experience | keyword: protip
@bpasero I am not certain. It feels like more often than that. This is coupled with the fact that I have an installation of Code at work and also at home. @remcoros I still think that an option to make the Update notifications be less intrusive is a better solution.,,,,,,Anecdotal,comment,,,,,,,,2016-07-01,github/SergeySagan,https://github.com/microsoft/vscode/issues/8595#issuecomment-229996947,repo: microsoft/vscode | issue: Improve the Code update experience | keyword: protip
"@Serjster if you are on stable (blue icon) you get updates once per month, on insider (green icon) you get updates once per day. Maybe you are on the green VS Code icon.",,,,,,Anecdotal,comment,,,,,,,,2016-07-02,github/bpasero,https://github.com/microsoft/vscode/issues/8595#issuecomment-230086069,repo: microsoft/vscode | issue: Improve the Code update experience | keyword: protip
Insider builds get daily updates. Stable builds get at least monthly updates. That will never change. What can change is how we present updates to you. That can be much improved and there were already some discussions among the team about how to do that. A good example is the Spotify app.,,,,,,Anecdotal,comment,,,,,,,,2016-07-04,github/joaomoreno,https://github.com/microsoft/vscode/issues/8595#issuecomment-230288919,repo: microsoft/vscode | issue: Improve the Code update experience | keyword: protip
Git status in File Explorer Similar to what atom provides in the project explorer: 1. New files are displayed green. 2. Modified are displayed yellow/orange. 3. Ignored files are displayed transparent-ish. Thanks,,,,,,Anecdotal,issue,,,,,,,,2015-11-19,github/ozsay,https://github.com/microsoft/vscode/issues/178,repo: microsoft/vscode | keyword: protip | state: closed
"Would be cool if this was exposed as an extension in some way. I worry that in some cases, the tree can be a bit polluted with color and look like a Christmas tree. Or if not, at least have the option to toggle it on and off.",,,,,,Anecdotal,comment,,,,,,,,2015-12-16,github/csinco,https://github.com/microsoft/vscode/issues/178#issuecomment-165241645,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
"Would love that too. The Git tab is very handy but this is for another purpose - having colors like in Atom would be very complimentary to see at a glance what's changed and where (with the color propagating automatically up to the top directory). That's probably the feature I miss the most from Atom. Usually, you don't have 10s or 100s of modified files uncommitted, so it's unlikely to look like a Christmas tree :)",,,,,,Anecdotal,comment,,,,,,,,2016-04-20,github/0cv,https://github.com/microsoft/vscode/issues/178#issuecomment-212546516,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
So it looks like the PR for this was closed. @bpasero @joaomoreno - any updates on the status of this work?,,,,,,Anecdotal,comment,,,,,,,,2016-07-21,github/dend,https://github.com/microsoft/vscode/issues/178#issuecomment-234350268,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
"Thanks so much for your interest in this issue! It is currently assigned to the backlog. Every month we pick items from the backlog to plan for the current iteration. Please see https://github.com/Microsoft/vscode/wiki/Issue-Tracking#planning for more information. Since we are a small team of developers, there is only so many feature requests and issues we can work on for one milestone. Nevertheless we always welcome pull requests and are happy to accept them if they meet our quality standards.",,,,,,Anecdotal,comment,,,,,,,,2016-08-05,github/bpasero,https://github.com/microsoft/vscode/issues/178#issuecomment-237832423,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
Please stop writing `+1`. It emails everyone in the issue. Use the emoji reactions on the first comment.,,,,,,Anecdotal,comment,,,,,,,,2016-11-14,github/13rac1,https://github.com/microsoft/vscode/issues/178#issuecomment-260422310,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
"Hi, do you have any news about this feature-request? I started to use the vscode today and I'm already loving but I really miss the colors indicating the changes Congratulations for your work",,,,,,Anecdotal,comment,,,,,,,,2016-11-30,github/ninahaack,https://github.com/microsoft/vscode/issues/178#issuecomment-263902256,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
"I add some screenshots to help: Atom default: <img width=""482"" alt=""screen shot 2016-12-15 at 12 29 11"" src=""https://cloud.githubusercontent.com/assets/1007051/21222503/75448468-c2c2-11e6-8f55-d92b0a7c3430.png""> VSCode default: <img width=""433"" alt=""screen shot 2017-01-05 at 10 55 23"" src=""https://cloud.githubusercontent.com/assets/1007051/21676502/1da19ac8-d336-11e6-9d92-35a1b1e08729.png"">",,,,,,Anecdotal,comment,,,,,,,,2016-12-15,github/abdonrd,https://github.com/microsoft/vscode/issues/178#issuecomment-267306380,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
This would be very useful. there is already the ability to modify the way files and icons are listed in the file tree. This extension does it https://github.com/robertohuertasm/vscode-icons. It does not colour the file names however,,,,,,Anecdotal,comment,,,,,,,,2017-01-06,github/joeblew99,https://github.com/microsoft/vscode/issues/178#issuecomment-270921946,repo: microsoft/vscode | issue: Git status in File Explorer | keyword: protip
"Question: Suspense causes zombie entities in custom renderer due premature creation Hi, I’m reaching out to ask for help regarding an issue I’ve encountered when using Suspense with a custom React renderer that integrates with Babylon.js. ### Issue I'm used to create the Babylon.js entities during the render phase, inside `createInstance` method. However, if React suspends, it may discard the entire tree before ever reaching the commit phase. The problem is that my `createInstance` implementati…",,,,,,Anecdotal,issue,,,,,,,,2025-05-21,github/simonedevit,https://github.com/facebook/react/issues/33324,repo: facebook/react | keyword: workaround | state: open
"The above solution works with the first level instances (`appenChildToContainer` will return always `isParentRootContainer===true`) but it doesn't work with the deeper instances (where `insertBefore`, `appendChild` are called). So i should find a way to determine the value of `isReady` (in each call of `mountBabylonEntity(parent, child, isReady)`). Maybe explicitly passing `true` only to `appendChild` and `insertBefore`? ```ts appendChild(parentInstance, child) { parentInstance.children.push(ch…",,,,,,Anecdotal,comment,,,,,,,,2025-05-21,github/simonedevit,https://github.com/facebook/react/issues/33324#issuecomment-2898906742,repo: facebook/react | issue: Question: Suspense causes zombie entities in custom renderer due premature creation | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/github-actions[bot],https://github.com/facebook/react/issues/33324#issuecomment-3201898016,repo: facebook/react | issue: Question: Suspense causes zombie entities in custom renderer due premature creation | keyword: workaround
"Bug: Impossible to use on async hooks The rule that prevents using async functions in the hook makes sense in most cases, but there are some valid hooks that have async functions. See useAsyncEffect as an example. (https://www.npmjs.com/package/use-async-effect) Since the no async rule is bundled with the 'react-hooks/exhaustive-deps' rule, there is no way to use this with an async hook. React version: 16, 17 ## Steps To Reproduce 1. Create a file that uses useAsyncHook 2. Configure plugin -> ""…",,,,,,Anecdotal,issue,,,,,,,,2021-04-28,github/arietrouw,https://github.com/facebook/react/issues/21381,repo: facebook/react | keyword: workaround | state: open
"@arietrouw this is a by design behavior, and you really shouldn't do this, `useEffect` functions are expected do be syncronous by React, if you need to handle async code on a `useEffect` use an async function inside it, but do not turn your `useEffect` function async",,,,,,Anecdotal,comment,,,,,,,,2021-05-24,github/EduardoAraujoB,https://github.com/facebook/react/issues/21381#issuecomment-846685539,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"> @arietrouw this is a by design behavior, and you really shouldn't do this, `useEffect` functions are expected do be syncronous by React, if you need to handle async code on a `useEffect` use an async function inside it, but do not turn your `useEffect` function async This doesn't make sense to me. These two effects do exactly the same thing: ```js useEffect(() => { async function doTheEffect() { // do the effect } doTheEffect(); }, []); useEffect(async () => { // do the effect }, []); ``` The…",,,,,,Anecdotal,comment,,,,,,,,2023-02-21,github/joshuakb2,https://github.com/facebook/react/issues/21381#issuecomment-1438942817,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"> But useEffect ignores any returned value anyway, right? I was slightly mistaken here. useEffect does care about the returned value if it's a function. Any returned function is called when the component unmounts and before the effect reruns, as a cleanup function. So an async effect function can't actually return any cleanup step. Still, if the effect doesn't have a cleanup step, nothing is lost here. I believe React ignores the returned value if it isn't a function.",,,,,,Anecdotal,comment,,,,,,,,2023-11-16,github/joshuakb2,https://github.com/facebook/react/issues/21381#issuecomment-1814951565,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"The request from @arietrouw is pretty straightforward: decouple ""async"" usage from the exhaustive-deps rule. Single responsibility principle: async function usage has nothing to do with the array of dependencies alluded in the `""exhaustive-deps""` name. And it is a pain for custom hooks added with `additionalHooks` option. An alternative would be to provide a second option: `allowAsyncForHooks: ""...""`.",,,,,,Anecdotal,comment,,,,,,,,2024-01-17,github/jsamr,https://github.com/facebook/react/issues/21381#issuecomment-1895347733,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"I have worked around this in another way. I made a hook called usePromise which takes a dependency array and does not trigger this rule. It can be found here: @xylabs/react-promise on npmjs I think this is better since it does not mimic the effect hook behavior Sorry, no usage in readme yet, but will add.",,,,,,Anecdotal,comment,,,,,,,,2024-02-08,github/arietrouw,https://github.com/facebook/react/issues/21381#issuecomment-1933211358,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"I must say that I still agree with @jsamr that having one rule enforce two concepts, especially when one has nothing to do with its name seems like an anti-pattern.",,,,,,Anecdotal,comment,,,,,,,,2024-02-08,github/arietrouw,https://github.com/facebook/react/issues/21381#issuecomment-1933214031,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"AFAIK, there is no nice solution for this but a simple workaround. Just avoid using the term `Effect` in the custom hook disables the async check. So naming it e.g. `useAsyncEffekt` would do the trick. See my answer in this issue: https://github.com/facebook/react/issues/19034#issuecomment-2769818089",,,,,,Anecdotal,comment,,,,,,,,2025-04-02,github/davemecha,https://github.com/facebook/react/issues/21381#issuecomment-2772362177,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"The work around and all is great, but do you guys not agree with @jsamr in that a single rule that covers two unrelated concepts is an anti-pattern?",,,,,,Anecdotal,comment,,,,,,,,2025-08-18,github/arietrouw,https://github.com/facebook/react/issues/21381#issuecomment-3198351706,repo: facebook/react | issue: Bug: Impossible to use on async hooks | keyword: workaround
"Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies <!-- Note: if the issue is about documentation or the website, please file it at: https://github.com/reactjs/reactjs.org/issues/new --> **Do you want to request a *feature* or report a *bug*?** BUG (possible) in `eslint-plugin-react-hooks` **What is the current behavior?** When I'm in CodeSanbox using a React Sandbox I can use single properties of the `props` obje…",,,,,,Anecdotal,issue,,,,,,,,2019-07-31,github/cbdeveloper,https://github.com/facebook/react/issues/16265,repo: facebook/react | keyword: workaround | state: open
"I understood what was going on. It's not a bug (I think). This code: ``` useEffect(()=>{ function someFunction() { props.whatever(); // CALLING A FUNCTION FROM PROPS } },[ ]); ``` Results in this warning: > React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside use…",,,,,,Anecdotal,comment,,,,,,,,2019-07-31,github/cbdeveloper,https://github.com/facebook/react/issues/16265#issuecomment-516860732,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"The warning is pretty explicit , you should destructurate your props; since a re-render is made after a prop is changed Please try ``` const myProp = props.myProp useEffect(()=>{ console.log('Running useEffect...'); console.log(typeof(myProp)); },[myProp ); ```",,,,,,Anecdotal,comment,,,,,,,,2019-07-31,github/ghost,https://github.com/facebook/react/issues/16265#issuecomment-516862128,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"@Admsol Yes, if you destructure it, it works. But I'm not a big fan of `props` destructuring. I like to always see that I'm accessing the `props` object anywhere. I ended up assigning the method to a local variable (inside the `useEffect`) before calling it. Like: ``` useEffect(()=>{ const whatever = props.whatever; whatever(); },[props.whatever]); ``` This way I get the proper warning (if I omit `props.whatever` from the array). Otherwise, if I call `props.whatever()` directly, the ""dependency…",,,,,,Anecdotal,comment,,,,,,,,2019-07-31,github/cbdeveloper,https://github.com/facebook/react/issues/16265#issuecomment-516871754,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"The reason plugin sees it differently is because **by doing `props.whatever()` you are actually passing `props` itself as a `this` value to `whatever`**. So technically it would see stale props. By reading the function before the call you’re avoiding the problem: ```js const { whatever } = props; useEffect(() => { // at some point whatever(); }, [whatever]); ``` This is the preferred solution. >Note: If `whatever` itself changes on every render, find where it is being passed down from, and wrap…",,,,,,Anecdotal,comment,,,,,,,,2019-08-02,github/gaearon,https://github.com/facebook/react/issues/16265#issuecomment-517518539,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"Is there no better way to avoid this warning? @cbdeveloper 's solution works, but it feels like I'm going out of my way to change code just to please the linter, and no actual bugs are being prevented. If anything it makes the code worse, because it's no longer obvious that `whatever` belongs to the parent component. I can't imagine a situation where someone would use `this` inside props.whatever to access the other props?",,,,,,Anecdotal,comment,,,,,,,,2019-09-20,github/GeoMarkou,https://github.com/facebook/react/issues/16265#issuecomment-533360728,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"Ok, after some learning on the horrible way that `this` works in JavaScript, I found a solution that fits my needs. To avoid destructuring the `props` object you have to explicitly call the function supplying your own `this` argument, otherwise it implicitly passes `props`. It even plays nicely with Typescript. ```javascript // Before React.useCallback((event) => { props.onChange(event); }, [props]); ``` ```javascript // After React.useCallback((event) => { props.onChange.call(undefined, event)…",,,,,,Anecdotal,comment,,,,,,,,2019-09-30,github/GeoMarkou,https://github.com/facebook/react/issues/16265#issuecomment-536416276,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"This is still bugging me. I've been using the following pattern to build some forms: - I have a component to hold the state for the form - The state is an object to hold details for a blogPost, for example. - Each each child must access it and change - So I'm passing down the `setFormState` method from the parent as `props` to all its child components. - Each child component is responsible for its own function to update the state. So I lot of them do something like this: ``` function SomeTextIn…",,,,,,Anecdotal,comment,,,,,,,,2019-10-01,github/cbdeveloper,https://github.com/facebook/react/issues/16265#issuecomment-537132719,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"I also vote to re-open the issue if it's possible to fix. My co-workers are all ignoring this warning because there's no convenient way to make it happy, especially if you're calling several props methods.",,,,,,Anecdotal,comment,,,,,,,,2019-10-01,github/GeoMarkou,https://github.com/facebook/react/issues/16265#issuecomment-537252715,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
This isn't only affecting props. I have several hooks which return objects which have memoized callbacks (such as input controllers) and I would prefer not to destructure since renaming the destructured values gets very tedious. Definitely would appreciate a solution. Maybe could be an option to ignore this specific type of warning?,,,,,,Anecdotal,comment,,,,,,,,2019-11-13,github/dacioromero,https://github.com/facebook/react/issues/16265#issuecomment-553192253,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"I think the explanation the @gaearon https://github.com/facebook/react/issues/16265#issuecomment-517518539 mentioned totally makes sense & the plugin is completely right on throwing the error. But for cases where we know the function isn't working with `this` & that it won't change, this just executes the effect more than what is required. Keeping the warnings open isn't an option in such cases, as follow up changes would require attention to what warnings to actually fix & what to let it be. S…",,,,,,Anecdotal,comment,,,,,,,,2020-01-23,github/PezCoder,https://github.com/facebook/react/issues/16265#issuecomment-577509214,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
> The reason plugin sees it differently is because by doing `props.whatever()` you are actually passing `props` itself as a `this` value to `whatever`. So technically it would see stale props. By reading the function before the call you’re avoiding the problem. I'm struggling to think of a case for which calling a function that depends on `this` (`whatever` in your example) and then passing `this` (`props` in your example) into the dependency list _wouldn't already be ridiculously error prone_.…,,,,,,Anecdotal,comment,,,,,,,,2020-02-18,github/lewisl9029,https://github.com/facebook/react/issues/16265#issuecomment-587951506,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"It's definitely possible to destructure earlier, but in a lot of cases that requires introducing intermediate aliases to avoid name clashing, when the things we're trying to access is already conveniently namespaced. In my case I'm trying to use the newly released hook API for Rifm: https://github.com/realadvisor/rifm#hook The code I want to write looks something like this: ```js const rifm = useRifm({ value, onChange: setValue, }); const onChange = React.useCallback( () => rifm.onChange(), [ri…",,,,,,Anecdotal,comment,,,,,,,,2020-02-19,github/lewisl9029,https://github.com/facebook/react/issues/16265#issuecomment-587977285,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"I'd like to see a fix for this too. The advice to destructure is odd as it's like getting rid of a very useful and meaningful namespace. It's like doing `using namespace std;` in C++, which is bad practice. I get the feeling that this advice to destructure props is going to lead to poor quality code. Perhaps we'll soon even see an eslint rule to disallow props destructuring.",,,,,,Anecdotal,comment,,,,,,,,2020-03-01,github/laurent22,https://github.com/facebook/react/issues/16265#issuecomment-593132044,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2020-06-17,github/stale[bot],https://github.com/facebook/react/issues/16265#issuecomment-645129966,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
This is still a problem as far as I know. This rule is not usable in many contexts (personally I had to disable it) as it's often not practical to destructure props at the top level of a component.,,,,,,Anecdotal,comment,,,,,,,,2020-06-17,github/laurent22,https://github.com/facebook/react/issues/16265#issuecomment-645226373,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"Another use case affected by this is when using `useReducer` for state in a component. It's common to use a single `state` object with `useReducer`, making it necessary to destructure since the following is illegal: ```js const [state, dispatch] = useReducer(reducer, { key: 'value' }); useEffect(() => { console.log(state.key); }, [state.key]); // Illegal ``` The problem is exacerbated when dealing with complex state values (a common reason for using `useReducer` over `useState`), resulting in n…",,,,,,Anecdotal,comment,,,,,,,,2020-07-22,github/zzzachzzz,https://github.com/facebook/react/issues/16265#issuecomment-662739625,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"I hope I'm not misunderstanding the issue. I noticed this snippet in the React docs today that passes `props.friend.id` into a dependency array without destructuring: https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects Relevant snippet from docs: ```js useEffect(() => { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () => { ChatAPI.unsubscribeFromFriendStatus…",,,,,,Anecdotal,comment,,,,,,,,2020-07-23,github/zzzachzzz,https://github.com/facebook/react/issues/16265#issuecomment-663046089,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
@zzzachzzz The specific issue I've found is with functions because of `this`. See: https://github.com/facebook/react/issues/16265#issuecomment-587977285,,,,,,Anecdotal,comment,,,,,,,,2020-08-04,github/dacioromero,https://github.com/facebook/react/issues/16265#issuecomment-668740462,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"@zzzachzzz >Another use case affected by this is when using `useReducer` for state in a component. It's common to use a single `state` object with `useReducer`, making it necessary to destructure since the following is illegal: > >```js >const [state, dispatch] = useReducer(reducer, { key: 'value' }); > >useEffect(() => { > console.log(state.key); >}, [state.key]); // Illegal >``` This definitely sounds like a misunderstanding. This code is perfectly legal, and it passes the linter. Maybe you h…",,,,,,Anecdotal,comment,,,,,,,,2020-08-04,github/gaearon,https://github.com/facebook/react/issues/16265#issuecomment-668761931,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
">It's like doing using namespace std; in C++, which is bad practice. I don't think this is an accurate comparison. Destructuring props doesn't bring random things in scope. It only brings what you explicitly specify there. Since props already have to be uniquely named, destructuring *props* or not is a completely stylistic difference, and we're going to recommend destructuring as the default pattern (you're welcome to disagree, but the linter is optimized for the recommended convention).",,,,,,Anecdotal,comment,,,,,,,,2020-08-04,github/gaearon,https://github.com/facebook/react/issues/16265#issuecomment-668762926,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"@lewisblackwood >It's definitely possible to destructure earlier, but in a lot of cases that requires introducing intermediate aliases to avoid name clashing, when the things we're trying to access is already conveniently namespaced. I empathize with this use case and I can see how it could be frustrating. I hope you also see where we're coming from here. In JavaScript, `rifm.onChange()` is the same as `rifm.onChange.call(rifm)`, and `rifm` becomes an implicit argument. Sure, you *personally* m…",,,,,,Anecdotal,comment,,,,,,,,2020-08-04,github/gaearon,https://github.com/facebook/react/issues/16265#issuecomment-668766300,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"Oops, didn't mean to close. I'm curious to hear if people who commented so far still find this to be a significant issue, or if they have mostly moved onto other patterns (e.g. destructuring props). I think an argument could be made that we should simply err on the side of `this` case being confusing. But I want to be clear that this is an example where somebody will definitely spend days tearing their hair out because of this decision.",,,,,,Anecdotal,comment,,,,,,,,2020-08-04,github/gaearon,https://github.com/facebook/react/issues/16265#issuecomment-668769356,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"> I empathize with this use case and I can see how it could be frustrating. I hope you also see where we're coming from here. In JavaScript, rifm.onChange() is the same as rifm.onChange.call(rifm), and rifm becomes an implicit argument. Sure, you personally may not write code this way, but it's easy to rely on this (imagine rifm object were a class instance), and then the value of this will be stale. The purpose of the linter is to prevent such mistakes, so we don't want to let them through. I …",,,,,,Anecdotal,comment,,,,,,,,2020-08-04,github/lewisl9029,https://github.com/facebook/react/issues/16265#issuecomment-668789864,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"@gaearon I've started calling `props.someFunction.call(undefined, someArguments)` to avoid this issue. It's slightly annoying since I never rely on `this` in any functions, but it's a fairly easy habit to get into. I'm still noticing odd situations with the ESLint rule though. The following snippet has the warning `React Hook React.useEffect has a missing dependency: 'someObj'.`. It asks for the whole object when I'm only using one field. ``` const someObj = { field: 1 }; React.useEffect(() => …",,,,,,Anecdotal,comment,,,,,,,,2020-08-06,github/GeoMarkou,https://github.com/facebook/react/issues/16265#issuecomment-669617270,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"the destructuring pattern should be used for other objects as well ? For example, I am using `history.push` in my effect, and the eslint rule complains that I have a missing dependency on `history` . I can add history to the dependency array, but that leads to a problem that the rule does not complain anymore for any nested properties from `history` which might change while `history` itself remains the same object reference. ``` useEffect( () => { // do something with history.location.hash and …",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/gaurav5430,https://github.com/facebook/react/issues/16265#issuecomment-675290897,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
> It asks for the whole object when I'm only using one field. This is because you’re *assigning* to that object. It doesn’t make sense to depend on a field you assign to since you never read it — it’s the surrounding object that matters for assignment. > but that leads to a problem that the rule does not complain anymore for any nested properties from history which might change while history itself remains the same object reference. The rule assumes you’re working with immutable objects that or…,,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/gaearon,https://github.com/facebook/react/issues/16265#issuecomment-675390288,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
> The rule assumes you’re working with immutable objects that originate in render. (Or mutable objects that originate outside of it.) useEffect won’t rerun it some random mutable fields on the history object change because React would not be notified about that mutation. So they don’t make sense as dependencies anyway. Thanks for clarifying this. For any future readers please see the discussion in https://github.com/facebook/react/issues/19636 as it might be relevant.,,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/gaurav5430,https://github.com/facebook/react/issues/16265#issuecomment-675666681,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"I'm also struggling this behavior. I understand https://github.com/facebook/react/issues/16265#issuecomment-517518539 https://github.com/facebook/react/issues/14920#issuecomment-467494468 and I agree that this is NOT a bug at all but an intended behavior. However, it's also true that some people feel this behavior is inconvenient and makes the rule useless. So I suggest configurations like below and I wonder if this is what people struggling this behavior need. ```jsonc { ""rules"": { // ... ""rea…",,,,,,Anecdotal,comment,,,,,,,,2020-09-02,github/seiyab,https://github.com/facebook/react/issues/16265#issuecomment-685723348,repo: facebook/react | issue: Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies | keyword: workaround
"Bug: `<dialog>` onClose and onCancel events bubbling React version: 19.1.1 Chrome version: 138.0.7204.169 ## Steps To Reproduce 1. Click ""Open Outer Dialog"" 2. Click ""Open Inner Dialog"" 3. Click ""Close Inner Dialog"" or press Esc on keyboard Link to code example: React repro: https://codesandbox.io/p/sandbox/qkndj4 Plain JS comparison: https://codepen.io/heguro/pen/XJmNeJr ## The current behavior In the React repro, clicking ""Close Inner Dialog"" produces the following logs: ``` inner dialog: onC…",,,,,,Anecdotal,issue,,,,,,,,2025-07-29,github/heguro,https://github.com/facebook/react/issues/34038,repo: facebook/react | keyword: workaround | state: open
"Hi everyone, I don't see anyone currently working on this, so I'd like to take a stab at fixing the bubbling behavior for the `close` and `cancel` events on `<dialog>` elements. I plan to investigate the handling in `DOMPluginEventSystem.js` and `SimpleEventPlugin.js` to bring the behavior in line with native implementations. Please let me know if anyone else is working on this or if there are any suggestions before I start. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2025-08-17,github/hardik118,https://github.com/facebook/react/issues/34038#issuecomment-3194559231,repo: facebook/react | issue: Bug: `<dialog>` onClose and onCancel events bubbling | keyword: workaround
"[Compiler]: Memoization not applying ### What kind of issue is this? - [x] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repro https://github.com/OliverJAsh/react-compiler-…",,,,,,Anecdotal,issue,,,,,,,,2025-08-14,github/OliverJAsh,https://github.com/facebook/react/issues/34202,repo: facebook/react | keyword: workaround | state: open
"Hi @OliverJAsh, Thanks for the clear reproduction case! I tested and have a few thoughts that might help narrow this down: Environment confirmation — Can you confirm you’re on React 19.1.1 and React Compiler 19.1.0-rc.2? Just making sure it matches your repro. Possible cause — My guess is that flow(...) is returning a new function instance on every render, which breaks function identity and prevents React Compiler from applying memoization. With a direct arrow function, the compiler can detect …",,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/entlv,https://github.com/facebook/react/issues/34202#issuecomment-3190411424,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"@OliverJAsh Thanks for posting! I took a quick look and didn’t immediately see what’s going on, but it definitely seems odd that it isn’t getting memoized. We’ll investigate. @entlv The OP already has enough information for us to debug.",,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/josephsavona,https://github.com/facebook/react/issues/34202#issuecomment-3190466259,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"Ok I took a look. What's happening is that in the ""WithFlow"" case, React Compiler doesn't know the type of `const myRef = flow(...)`, since it doesn't know what `flow()` returns. The compiler has to assume that flow() returns a new, mutable value (unless it can safely infer otherwise, which it can't in this case). Then, the call `composeRefs(myRef)` has to assume that `composeRefs()` may be mutating its inputs. So the compiler sees: ``` [0] const mutableObject = someFunction(); // flow(...) [1]…",,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/josephsavona,https://github.com/facebook/react/issues/34202#issuecomment-3190684150,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
Thanks @josephsavona! That clears up a lot. In that case I suppose this isn't a bug and we can close this issue?,,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/OliverJAsh,https://github.com/facebook/react/issues/34202#issuecomment-3190842446,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
It would be nice if we could somehow configure the compiler to teach it that `flow` returns functions. We use it a lot (it comes from [Effect](https://effect.website/)).,,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/OliverJAsh,https://github.com/facebook/react/issues/34202#issuecomment-3190843724,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"> It would be nice if we could somehow configure the compiler to teach it that flow returns functions The compiler actually does have a way to configure this, but it's still a bit experimental and undocumented. So long-term I think we have this case covered but in the short-term there will be cases like this that may require manual memoization if they're critical. One thing we can explore is having a lint rule to highlight missed memoization like this.",,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/josephsavona,https://github.com/facebook/react/issues/34202#issuecomment-3192132231,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"In this specific example we were relying on memoization for correctness rather than just a performance optimisation. I wonder if tooling could help to catch mistakes like this, where memoization is misused.",,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/OliverJAsh,https://github.com/facebook/react/issues/34202#issuecomment-3192156530,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
Can you say more about memoization for correctness? Were you using the value as an effect dependency?,,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/josephsavona,https://github.com/facebook/react/issues/34202#issuecomment-3192450115,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"The value was a ref callback that set state, so we had this problem: 1. On render, the ref has a new identity, so React calls the ref again. 2. Ref sets state (same object but with new identity), triggering a re-render. 3. Repeat, resulting in a render loop If the ref callback is memoized then there's no render loop, but it feels wrong to rely on memoization for this.",,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/OliverJAsh,https://github.com/facebook/react/issues/34202#issuecomment-3192493343,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"@OliverJAsh Thanks for raising this! You’re absolutely right — the render loop happens because the ref callback is recreated on every render, which causes React to call it again and trigger a state update. Memoizing the callback does prevent the loop, but I agree it feels more like a workaround than a proper solution. An alternative could be to avoid setting state directly inside the ref, and instead separate responsibilities: use the ref purely for DOM access, and trigger state updates in an e…",,,,,,Anecdotal,comment,,,,,,,,2025-08-16,github/entlv,https://github.com/facebook/react/issues/34202#issuecomment-3193636096,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"i've been digging into this issue and think I found a fix, but wanted to run it by you first to make sure I'm not missing something. So basically, the problem is that when the compiler sees an unknown function call (like `flow()` in the example), it plays it safe and assumes the result might be mutable. This happens around line 922 in [InferMutationAliasingEffects.ts](https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/Inference/InferMutationAliasingEff…",,,,,,Anecdotal,comment,,,,,,,,2025-08-16,github/dbarabashh,https://github.com/facebook/react/issues/34202#issuecomment-3193920761,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"@dbarabashh Unfortunately that isn’t a safe assumption. Simple example: `createArray<T>(count: number): Array<T>` - the argument is a primitive, the return is mutable. You can construct examples with frozen functions as arguments where the return is mutable too.",,,,,,Anecdotal,comment,,,,,,,,2025-08-17,github/josephsavona,https://github.com/facebook/react/issues/34202#issuecomment-3193976139,repo: facebook/react | issue: [Compiler]: Memoization not applying | keyword: workaround
"Formalize top-level ES exports Currently we only ship CommonJS versions of all packages. However we might want to ship them as ESM in the future (https://github.com/facebook/react/issues/10021). We can't quite easily do this because we haven't really decided on what top-level ES exports would look like from each package. For example, does `react` have a bunch of named exports, but also a default export called `React`? Should we encourage people to `import *` for better tree shaking? What about …",,,,,,Anecdotal,issue,,,,,,,,2017-11-09,github/gaearon,https://github.com/facebook/react/issues/11503,repo: facebook/react | keyword: workaround | state: open
"Imho `import *` is a way to go, Im not opposed to having a default export too, but it shouldnt be used to reexport other stuff like in this example: ```js export const Component = ... export default React React.Component = Component ```",,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-343229904,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
>but it shouldnt be used to reexport other stuff like in this example: Is there a technical reason why? (Aside from having two ways to do the same thing.) My impression is that people who would import `*` (and not use the default) wouldn't have problems tree shaking since default would stay unused. But maybe I overestimate Rollup etc.,,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-343236253,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"That questions can be probably best answered by @lukastaegert. Ain't sure if something has changed since https://github.com/facebook/react/issues/10021#issuecomment-335128611 Also Rollup is not the only tree shaker out there, and while webpack's tree-shaking algorithm is worse than the one in rollup, it's usage is probably way higher than rollup's (both tools do excellent jobs ofc, I don't want to offend anyone, just stating facts) and if we can (as the community) help both tools at once we sho…",,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-343273033,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"is tree-shaking going to _do_ anything in React's case, given that everything is preprocessed into a single flat bundle? I wonder what the primary import style is for React, personally i tend to treat it like a default export e.g. `React.Component`, `React.Children` but occasionally do the named thing with `cloneElement`",,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/jquense,https://github.com/facebook/react/issues/11503#issuecomment-343292936,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"As @gaearon already stated elsewhere, size improvements in case of react are expected to be minimal. Nevertheless, there ARE advantages: * React.Children might probably be removed in some cases (so I heard 😉) * React itself can be hoisted into the top scope by module bundlers that support this. This could again remove quite a few bytes and might also grant an oh-so-slight performance improvement. The main improvement would lie in the fact that there does not need to be another variable that ref…",,,,,,Anecdotal,comment,,,,,,,,2017-11-10,github/lukastaegert,https://github.com/facebook/react/issues/11503#issuecomment-343378081,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"This is also an interesting case: https://github.com/facebook/react/issues/11526. While monkeypatching for testing is a bit shady, we'll want to be conscious about breaking this (or having a workaround for it).",,,,,,Anecdotal,comment,,,,,,,,2017-11-13,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-343991941,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"Came here via [this Twitter conversation](https://twitter.com/dan_abramov/status/933754555124322305). For me, there's a clear correct answer to this question: React and ReactDOM should **only** export named exports. They're not objects that contain state, or that other libraries can mutate or attach properties to (#11526 notwithstanding) — the only reason they exist is as a place to 'put' `Component`, `createElement` and so on. In other words, namespaces, which should be imported as such. (It a…",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Rich-Harris,https://github.com/facebook/react/issues/11503#issuecomment-346678011,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"People have really come to like ```js import React, { Component } from 'react' ``` so convincing them to give it up might be difficult. I guess this is not too bad, even if a bit odd: ```js import * as React from 'react'; import { Component } from 'react'; ``` To clarify, we need `React` to be in scope (in this case, as a namespace) because JSX transpiles to `React.createElement()`. We could break JSX and say it depends on global `jsx()` function instead. Then imports would look like: ```js imp…",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-346678719,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"Confession: I always found it slightly odd that you have to explicitly import `React` in order to use JSX, even though you're not actually using that identifier anywhere. Perhaps in future, transpilers could insert `import * as React from 'react'` (configurable for the sake of Preact etc) on encountering JSX, if it doesn't already exist? That way you'd only need to do this... ```js import { Component } from 'react'; ``` ...and the namespace import would be taken care of automatically.",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Rich-Harris,https://github.com/facebook/react/issues/11503#issuecomment-346681964,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"In a distant future, maybe. For now we need to make sure transpilers work with other module systems (CommonJS or globals). Making this configurable is also a hurdle, and further splits the community.",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-346682287,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"What @Rich-Harris suggested (inserting a specific import when jsx is used) is easily done by transpilers plugin. The community would have to upgrade their `babel-plugin-transform-react-jsx` and that's it. And of course even existing setups would still work if only one adds `import * as React from 'react';` to the file. Of course we need to consider other module systems, but it doesn't seem like a hard problem to solve. Are there any specific gotchas in mind?",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-346691248,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
">Of course we need to consider other module systems, but it doesn't seem like a hard problem to solve. Are there any specific gotchas in mind? I don’t know, what is your specific suggestion as to how to handle it? Would what the default be for Babel JSX plugin?",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-346693159,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"> People have really come to like > >``` >import React, { Component } from 'react' >``` What people? Come forth so that I may mock thee.",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/jamiewinder,https://github.com/facebook/react/issues/11503#issuecomment-346693989,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"Default is at the moment [`React.createElement`](`https://github.com/babel/babel/tree/6d820a27578254603ad6d6623277f31d5410a37c/packages/babel-plugin-transform-react-jsx#pragma`) and it would pretty much stay the same. The only problem is that it assumes a global now (or already available in the scope). I think as es modules are basically the standard way (although not yet adopted by all) of doing modules, it is reasonable to assume majority is (or should) use it. Vast majority already uses vari…",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-346702610,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"> Should we encourage people to import * for better tree shaking? Thanks to @alexlamsl `uglify-es` has eliminated the `export default` penalty in common scenarios: ```js $ cat mod.js export default { foo: 1, bar: 2, square: (x) => x * x, cube: (x) => x * x * x, }; ``` ```js $ cat main.js import mod from './mod.js' console.log(mod.foo, mod.cube(mod.bar)); ``` ```js $ rollup main.js -f es --silent | tee bundle.js var mod = { foo: 1, bar: 2, square: (x) => x * x, cube: (x) => x * x * x, }; console…",,,,,,Anecdotal,comment,,,,,,,,2017-12-03,github/kzc,https://github.com/facebook/react/issues/11503#issuecomment-348753282,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"wow, that's great new 👏 is `uglify-es` considered to be stable now? I recall you mentioning few months back that it isn't there quite yet, but I can remember that incorrectly, so ain't sure. Anyway - that's all and nice in a rollup world, but considering that `React` is bundled mostly in apps and those use mostly `webpack` which does not do scope hoisting by default, I'd still say that exporting an object as default should be avoided to aid other tools than `uglisy-es`+`rollup` in their efforts…",,,,,,Anecdotal,comment,,,,,,,,2017-12-03,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-348756318,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"> is uglify-es considered to be stable now? As stable as anything else in the JS ecosystem. Over 500K downloads per week. > that's all and nice in a rollup world, but considering that React is bundled mostly in apps and those use mostly webpack which does not do scope hoisting by default Anyway, it's an option. Webpack defaults are not ideal anyway - you have to use `ModuleConcatenationPlugin` as you know.",,,,,,Anecdotal,comment,,,,,,,,2017-12-03,github/kzc,https://github.com/facebook/react/issues/11503#issuecomment-348795831,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"Adding a few cents here: * I totally agree with @Rich-Harris that semantically, named exports are the right choice * I really do not like either `import React from 'react'` or `import * as React from 'react'` just to be able to use JSX syntax. In my eyes, this design is clearly violating the Interface Segregation Principle in that it forces users to import all of React just to be able to use the `createElement` part (though admittedly with a namespace export, a bundler like Rollup will strip ou…",,,,,,Anecdotal,comment,,,,,,,,2017-12-04,github/lukastaegert,https://github.com/facebook/react/issues/11503#issuecomment-348880382,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"Personally I do not see much gain in migrating to `jsx` helper as the default IMHO for the babel plugin should be importing it from the `react` package, so the name of the actual helper doesn't really matter - the rest is just matter of having it configurable.",,,,,,Anecdotal,comment,,,,,,,,2017-12-04,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-348933167,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"This is probably slightly tangential to the main discussion, but I'm curious how well ES modules work with checking `process.env.NODE_ENV` to conditionally export dev/prod bundles? For example, https://github.com/facebook/react/blob/d9c1dbd61772f8f8ab0cdf389e70463d704c480b/packages/react/npm/index.js#L3-L7 I may be missing something obvious here, but I'm struggling to see how to translate this pattern into ES modules?",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/NMinhNguyen,https://github.com/facebook/react/issues/11503#issuecomment-350959095,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"`process.env.NODE_ENV` checks can be at more granular (code) level though, ready to be replaced by the bundler with appropriate values.",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-350996032,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"@Andarist @milesj Thanks for confirming my suspicion :) > `process.env.NODE_ENV` checks can be at more granular (code) level though, ready to be replaced by the bundler with appropriate values. From the React 16 [blog post](https://reactjs.org/blog/2017/09/26/react-v16.0.html#better-server-side-rendering) I thought that the `process.env.NODE_ENV` checks were pulled out to the very top on purpose (as opposed to them being more granular, which is what they are in the source, if I'm not mistaken),…",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/NMinhNguyen,https://github.com/facebook/react/issues/11503#issuecomment-351060910,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"> Like, I'm not sure how one could use the module field in package.json and differentiate between dev/prod for ESM while keeping ES bundles flat and not affecting Node.js perf This for sure is a drawback, because there is no standard way at the moment for doing this. OTOH it's just a matter of tooling, it is possible (and it's rather easy) to compile this in build steps of your application even today. Ofc it would be easier if package could expose dev/prod builds and the resolver would just kno…",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-351064030,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
For class: ```js import Component from 'react/Component' class MyButton extends Component{ constructor(){ this.state = {} } render() { return <button> Button <Button> } } ``` Where transform will use super.createElement() to transform to jsx or use static Component.createElement(). For stateless components: ```js import jsx from 'react/jsx' const MyButton = () => jsx`<button> Button <Button>`; ``` it is maybe possible to use tagged template literal? Node hopefully accept this PR https://github.…,,,,,,Anecdotal,comment,,,,,,,,2018-02-08,github/chyzwar,https://github.com/facebook/react/issues/11503#issuecomment-364253599,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"Just dropping a comment on this thread which hasn't really been mentioned specifically. I’m in a situation where I’m not using a bundler at all and just want to import react and various components for use natively through the browser (`<script type=""module"" src=""..."">`), i.e. ```js import React from “https://unpkg.com/react@16.4.1/umd/react.development.js”; import ReactDOM from “https://unpkg.com/react-dom@16.4.1/umd/react-dom.development.js”; ReactDOM.render( React.createElement(...), document…",,,,,,Anecdotal,comment,,,,,,,,2018-07-23,github/jimniels,https://github.com/facebook/react/issues/11503#issuecomment-407122820,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"Now, all of the modern browsers including mobile versions support ESM. ESM is no longer a future module system but a current defacto-standard. Please be aware of not providing the standardized module is a critical problem, especially for a defacto-standard web library. ``` import * as React from 'react'; import * as ReactDOM from 'react-dom'; ``` This is the typical code to apply React libraries, and the fact has been there are not actually libraries that can be imported, instead, 3rd party tra…",,,,,,Anecdotal,comment,,,,,,,,2018-08-09,github/ken-okabe,https://github.com/facebook/react/issues/11503#issuecomment-411909941,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
I started working on this [here](https://github.com/facebook/react/pull/13321) and [here](https://github.com/facebook/react/pull/13080),,,,,,Anecdotal,comment,,,,,,,,2018-08-09,github/TrySound,https://github.com/facebook/react/issues/11503#issuecomment-411912950,repo: facebook/react | issue: Formalize top-level ES exports | keyword: workaround
"[React 19] Controlled checkboxes are reset by form submission and form.reset() ## Summary After a form is submitted with an `action`, if one of the form's fields is a checkbox or radio input controlled by its `checked` prop, that element is reset as if it were uncontrolled. The same happens when the `reset()` method is called on the form. (Expected behavior: those fields are not reset.) ```js import { useState } from ""react"" export default function Page() { const [isChecked, setIsChecked] = use…",,,,,,Anecdotal,issue,,,,,,,,2024-12-07,github/jeremy-deutsch,https://github.com/facebook/react/issues/31695,repo: facebook/react | keyword: workaround | state: open
I'm seeing the same issue using latest Next15 version. Code sandbox: https://codesandbox.io/p/devbox/cocky-shannon-forked-8qlwzy?file=%2Fapp%2Fform%2Fcomponent.tsx%3A11%2C15&workspaceId=ws_YJunuyU6avBk8pMTbNjaGv,,,,,,Anecdotal,comment,,,,,,,,2024-12-17,github/ray-marr-ho,https://github.com/facebook/react/issues/31695#issuecomment-2548725758,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
"@eps1lon is there any chance this issue (as well as #30580) could be given the normal bug tags (""status:unconfirmed"" or ""type:bug""), since it's a bug in stable React? I'm worried that this issue (as well as many others) isn't being triaged because the ""React 19"" issue tag was supposed to refer to the React 19 beta, even though it's mostly now being used to tag problems with stable React.",,,,,,Anecdotal,comment,,,,,,,,2025-02-13,github/jeremy-deutsch,https://github.com/facebook/react/issues/31695#issuecomment-2657024456,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-06-07,github/github-actions[bot],https://github.com/facebook/react/issues/31695#issuecomment-2952477044,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
This is still an issue! We've needed to remember to manually reset controlled inputs when we use the form action system.,,,,,,Anecdotal,comment,,,,,,,,2025-06-09,github/jrenjilian,https://github.com/facebook/react/issues/31695#issuecomment-2955644748,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
"I've spent three days trying to understand what I was doing wrong, but turns out it was a React bug affecting very essential functionality, and it's over a year old!",,,,,,Anecdotal,comment,,,,,,,,2025-07-18,github/kirilledelman,https://github.com/facebook/react/issues/31695#issuecomment-3090053484,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
"Just ran into this issue. I did not expect this to be a bug with React, but here we are. My current workaround is to create my own checkbox component that uses a button and a hidden input. The boolean is just cast a string for the value of the hidden input. This does mean your form data will pass as a string, but that happens already normally with checkboxes as they get passed as ""on"" typically.",,,,,,Anecdotal,comment,,,,,,,,2025-07-23,github/LeonBlade,https://github.com/facebook/react/issues/31695#issuecomment-3110118780,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
@LeonBlade My workaround was to simply add a completely redundant `setRememberMe(rememberMe)` at the end of the useEffect that interpreted formState after the server call returned. You don't have to send the actual value to the server. Apparently then it behaves like other controlled fields.,,,,,,Anecdotal,comment,,,,,,,,2025-07-24,github/kirilledelman,https://github.com/facebook/react/issues/31695#issuecomment-3111608575,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
@kirilledelman It's a simple solution. I don't think I'll be using it though because it means having to add this logic to any form that might use checkboxes. That's why I opted to modify my component instead. Hopefully this can be addressed at some point.,,,,,,Anecdotal,comment,,,,,,,,2025-07-24,github/LeonBlade,https://github.com/facebook/react/issues/31695#issuecomment-3112454756,repo: facebook/react | issue: [React 19] Controlled checkboxes are reset by form submission and form.reset() | keyword: workaround
"[DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application ### Website or app N/A ### Repro steps When profiling a complex, proprietary app, I regularly get an error message, ""Message length exceeded maximum allowed length."" Steps to reproduce: 1. Within the Dev Tools, go to the Profiler tab. 2. Click the ""Start Profiling"" button. 3. Let the app run for a bit. Do some things in the app. 4. Click the ""Stop Profiling"" (""record"") button. At this point, th…",,,,,,Anecdotal,issue,,,,,,,,2022-10-04,github/joshkel,https://github.com/facebook/react/issues/25415,repo: facebook/react | keyword: workaround | state: open
Bumping. Any updates? I just had this happen to me and I can reproduce this. I can't post the code publicly because this is also an internal app but I am up for a screenshare or something to go through debugging it.,,,,,,Anecdotal,comment,,,,,,,,2023-03-22,github/elliot-huffman,https://github.com/facebook/react/issues/25415#issuecomment-1478851273,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
"Also have this issue, albeit a slightly different stacktrace: ```` proxy.js:1 Uncaught Error: Message length exceeded maximum allowed length. at handleMessageFromPage (proxy.js:1:779) handleMessageFromPage @ proxy.js:1 postMessage (async) send @ backendManager.js:1 (anonymous) @ bridge.js:72 setTimeout (async) (anonymous) @ bridge.js:79 setTimeout (async) send @ bridge.js:168 (anonymous) @ agent.js:405 emit @ events.js:37 (anonymous) @ bridge.js:136 listener @ backendManager.js:1 postMessage (a…",,,,,,Anecdotal,comment,,,,,,,,2024-02-21,github/jorge-fernandes,https://github.com/facebook/react/issues/25415#issuecomment-1957178188,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
"> @PiTiLeZarD @fgatti675 are either of you able to share a reproducible example? Hi, we face this issue when debugging FireCMS. It is a fairly large project. It is all open source and can be run locally: https://github.com/firecmsco/firecms If you would like to give it a try, running it should be as simple as `yarn` and `yarn dev`",,,,,,Anecdotal,comment,,,,,,,,2024-02-22,github/fgatti675,https://github.com/facebook/react/issues/25415#issuecomment-1959271602,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
I had the same issue in my program. In case it is useful to anyone: it turned out to be caused by a few runaway useEffects in my code that were constantly updating.,,,,,,Anecdotal,comment,,,,,,,,2024-04-16,github/danielsgriffin,https://github.com/facebook/react/issues/25415#issuecomment-2060038167,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
We experience this issue in our application aswell. Without the help of the react profiler performance optimizations are almost impossible so we would highly appreciate a fix.,,,,,,Anecdotal,comment,,,,,,,,2024-07-31,github/mgmrx,https://github.com/facebook/react/issues/25415#issuecomment-2260355387,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
"I just ran into this trying to profile a huge internal application and worked around it by reducing the number of components that I'm rendering (for example, don't map over the entire array but just a small slice). If you have bottlenecks in your application, they should still be visible when you profile the smaller version.",,,,,,Anecdotal,comment,,,,,,,,2024-08-08,github/Angelelz,https://github.com/facebook/react/issues/25415#issuecomment-2275963431,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
"Just ran into this while debugging a chainlit based ai chat app that streams in markdown from the backend and renders it, which leads to a couple thousand renders. I need to find out why that rendering slows down over time, so I let the recording run for a minute, but the dataset is too large for devtools to handle I assume.",,,,,,Anecdotal,comment,,,,,,,,2024-08-14,github/jbeckerdm,https://github.com/facebook/react/issues/25415#issuecomment-2288814927,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
Looks like it's a chrome/chromium specific issue (Message length exceeded maximum allowed length). I tried profiling using React DevTools in Firefox and didn't face this.,,,,,,Anecdotal,comment,,,,,,,,2024-08-21,github/rishitells,https://github.com/facebook/react/issues/25415#issuecomment-2301495646,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
"> I had the same issue in my program. In case it is useful to anyone: it turned out to be caused by a few runaway useEffects in my code that were constantly updating. That's the whole reason I'm profiling in the first place! This is quite a catch-22 situation, lol",,,,,,Anecdotal,comment,,,,,,,,2024-09-09,github/dir,https://github.com/facebook/react/issues/25415#issuecomment-2336884629,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
@bvaughn you seemed to look into this issue previously here: https://github.com/facebook/react-devtools/issues/1200 it is still occuring with the exact same repro. Any idea for a fix / workaround?,,,,,,Anecdotal,comment,,,,,,,,2024-11-01,github/ofersadgat,https://github.com/facebook/react/issues/25415#issuecomment-2451174610,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
"As this will not get fixed anytime soon the only workaround is to user another browser, it works fine in Safari.",,,,,,Anecdotal,comment,,,,,,,,2025-07-24,github/Zerebokep,https://github.com/facebook/react/issues/25415#issuecomment-3112774051,"repo: facebook/react | issue: [DevTools Bug]: ""Message length exceeded maximum allowed length"" when profiling a complex application | keyword: workaround"
"[Compiler Bug]: TypeError: isUndefined is not a function (it is undefined) ### What kind of issue is this? - [x] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repro https:/…",,,,,,Anecdotal,issue,,,,,,,,2025-04-29,github/Robert27,https://github.com/facebook/react/issues/33052,repo: facebook/react | keyword: workaround | state: open
"After further investigation, I found that the React compiler appears to drop the imported utility files of Luxon when using the default entry point. However, switching the import field in Luxon’s package.json to use the ES6 build (./build/es6/luxon.js) resolves this issue and works correctly with React Native and the new React compiler. Here is the patch I applied to Luxon’s package.json exports: ```json ""exports"": { ""."": { - ""import"": ""./src/luxon.js"", + ""import"": ""./build/es6/luxon.js"", ""requ…",,,,,,Anecdotal,comment,,,,,,,,2025-06-16,github/Robert27,https://github.com/facebook/react/issues/33052#issuecomment-2976640183,repo: facebook/react | issue: [Compiler Bug]: TypeError: isUndefined is not a function (it is undefined) | keyword: workaround
"I’m pretty sure this is an issue with an earlier version of Expo. When you enable React Compiler, that also causes Expo to use a different build mode which had a bug w circular dependencies (leading to the undefined error). I believe that issue has been fixed, can you try on latest Expo?",,,,,,Anecdotal,comment,,,,,,,,2025-08-04,github/josephsavona,https://github.com/facebook/react/issues/33052#issuecomment-3149192456,repo: facebook/react | issue: [Compiler Bug]: TypeError: isUndefined is not a function (it is undefined) | keyword: workaround
"Hello! 👋 I came across issue and would love to work on this. I’ve set up the repo locally and started digging into it. Just wanted to check in before starting — is anyone already working on this? If not, I’d love to take it up. Thanks!",,,,,,Anecdotal,comment,,,,,,,,2025-08-05,github/Shonferns004,https://github.com/facebook/react/issues/33052#issuecomment-3153568478,repo: facebook/react | issue: [Compiler Bug]: TypeError: isUndefined is not a function (it is undefined) | keyword: workaround
"Bug: Temporal objects (from temporal-polyfill, at least) can't be passed to a client component from server component Using temporal-polyfill, you can't pass temporal instants (presumably any temporal objects) from a RSC to a client component. I understand this is probably expected and correct, but it is a major pain point as JS transitions to using Temporal for Dates. This may only be a limitation of temporal-polyfill and not actual Temporal, but I wanted to get the official feedback on whether…",,,,,,Anecdotal,issue,,,,,,,,2025-08-08,github/rikbrown,https://github.com/facebook/react/issues/34142,repo: facebook/react | keyword: workaround | state: open
"You can't pass them, which is the expected behaviour, because RSC props only support JSON-serializable values, and Temporal objects aren't JSON-serializable in a way React understands. The workaround is to serialize the Temporal object yourself (use toJson() or toString()) before passing it to the client and then reconstruct it in the client. Hope this helps!",,,,,,Anecdotal,comment,,,,,,,,2025-08-09,github/s-gul,https://github.com/facebook/react/issues/34142#issuecomment-3172059257,"repo: facebook/react | issue: Bug: Temporal objects (from temporal-polyfill, at least) can't be passed to a client component from server component | keyword: workaround"
"> You can't pass them, which is the expected behaviour, because RSC props only support JSON-serializable values, and Temporal objects aren't JSON-serializable in a way React understands. > > The workaround is to serialize the Temporal object yourself (use toJson() or toString()) before passing it to the client and then reconstruct it in the client. > > Hope this helps! Thanks. I do understand the reason why it fails - but (maybe this is more of a feature request) the ergonomic of having to seri…",,,,,,Anecdotal,comment,,,,,,,,2025-08-09,github/rikbrown,https://github.com/facebook/react/issues/34142#issuecomment-3172096223,"repo: facebook/react | issue: Bug: Temporal objects (from temporal-polyfill, at least) can't be passed to a client component from server component | keyword: workaround"
"[Feature Request] Allow dependency length to change in hooks Not allowing dependency lists to change size limits the usefulness of `useMemo` in this particular use case but I imagine there are other similar use cases. To be clear I am talking about the error triggered here: https://github.com/facebook/react/blob/024a764310e64ef38963df16970364b9942a60cd/packages/react-reconciler/src/ReactFiberHooks.js#L322 For instance, in my app I have a bunch of items and the user can select an unlimited amoun…",,,,,,Anecdotal,issue,,,,,,,,2020-03-05,github/georeith,https://github.com/facebook/react/issues/18229,repo: facebook/react | keyword: workaround | state: open
"@vkurchatkin I can't guarantee the referential equality of the array (it is derived itself, a list of ids mapped against a dictionary). The items within it stay referentially the same unless explcitily modified. Trying to keep the array referentially equal creates a whole host of cache invalidation issues and becomes very fragile in its implementation. This is a problem anywhere where `useMemo` would want to reduce a variable length list.",,,,,,Anecdotal,comment,,,,,,,,2020-03-05,github/georeith,https://github.com/facebook/react/issues/18229#issuecomment-595456491,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"Generally in React you should: - use immutable structures - use pure functions to transform immutable structures If you follow these two rules, then `useMemo` just works. > is derived itself, a list of ids mapped against a dictionary If it is derived, then you should derive it using `useMemo` as well",,,,,,Anecdotal,comment,,,,,,,,2020-03-06,github/vkurchatkin,https://github.com/facebook/react/issues/18229#issuecomment-595811533,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"@vkurchatkin I am following all these rules. I can't use `useMemo` to create it because of the issue above. Consider this: I have normalized dictionary of objects, they are immutable and I change it by doing shallow clones down to the appropriate level of change. Elsewhere I store a list of selected IDs that reference the keys of that dictionary. I map that list into an array of the selected objects. I do not want to `useMemo` that because the IDs don't change but the items do, therefore due to…",,,,,,Anecdotal,comment,,,,,,,,2020-03-06,github/georeith,https://github.com/facebook/react/issues/18229#issuecomment-595849577,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"I don't understand the reasons behind this technical limitation, it feels weird to me that perhaps the simplest, cleanest, possible use of `useMemo` isn't supported out of the box: ```ts useMemo ( () => x, x ); ```",,,,,,Anecdotal,comment,,,,,,,,2020-04-26,github/fabiospampinato,https://github.com/facebook/react/issues/18229#issuecomment-619569632,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"I'd like to see this, too. As a slightly-contrived example, let's consider the following case: ```JavaScript function formValuesReducer(oldValues, update) { return { ...oldValues, [update[0]]: update[1] }; } const initialFormValues = { firstName: 'John', lastName: 'Doe', city: 'Boise', state: 'Idaho' }; const nameTemplatePieces = ['firstName', 'lastName']; const MyComponent = (props) => { const formValues = useReducer(formValuesReducer, initialFormValues); const nameValues = useMemo( () => name…",,,,,,Anecdotal,comment,,,,,,,,2020-05-21,github/Eli-Black-Work,https://github.com/facebook/react/issues/18229#issuecomment-631990756,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2020-08-22,github/stale[bot],https://github.com/facebook/react/issues/18229#issuecomment-678684689,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"I agree with OP, I also don't understand why instead of throwing an error `prevDeps.length !== nextDeps.length` can't just count as a change in the dependencies itself. I want to be able to memoize an array but spreading over the values inside the dependency would throw an error if the array changes in size. A temporary solution could be to use `JSON.stringify(arr)` inside hook's deps, but this will only work for serializable data.",,,,,,Anecdotal,comment,,,,,,,,2020-09-23,github/jrmyio,https://github.com/facebook/react/issues/18229#issuecomment-697261584,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2020-12-25,github/stale[bot],https://github.com/facebook/react/issues/18229#issuecomment-751246932,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
This issue still affects me. Recoil is an example of a library that attempts to overcome this issue of memorising n length derived data from other derived data.,,,,,,Anecdotal,comment,,,,,,,,2020-12-25,github/georeith,https://github.com/facebook/react/issues/18229#issuecomment-751251309,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"Yeah I've been bitten by this one too. Not a `useMemo`, but the same limitation and error: I wanted to fire a `useEffect` whenever the contents of a variable length array changes. The array could contain many different data shapes, and I want to check equality using `Object.is()` style strict equality, so tried to do this: ```js let items: T[] = []; // ^ or [{foo: true}], or [1,2,3], or [true] etc depending on the generics used outside of this component useEffect(() => { console.log(""changed"");…",,,,,,Anecdotal,comment,,,,,,,,2021-01-08,github/dxinteractive,https://github.com/facebook/react/issues/18229#issuecomment-756533082,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"> > is derived itself, a list of ids mapped against a dictionary > > If it is derived, then you should derive it using `useMemo` as well I don't understand this at all. Going with the example of an API function that I don't control that returns a newly created array of results, could you please elaborate on how I could ensure that a certain value is only recalculated when the length or elements of this array change?",,,,,,Anecdotal,comment,,,,,,,,2021-02-18,github/lbfalvy,https://github.com/facebook/react/issues/18229#issuecomment-781303268,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"I noticed that I can add the length of the array and then the elements and this works fine: `useMemo(() => x, [x.length, ...x]);` The nice thing about it is that it even works for multiple arrays `[x.length, ...x, y.length, ...y]` And for arrays of arrays `[x.length, ...x.map(y => [y.length, ...y]).flat(1)]` And any variation of the above. I actually think that this strategy is much better than just passing arrays because one might accidentally do this: `[...x, ...y]` which would treat `x=[1,2]…",,,,,,Anecdotal,comment,,,,,,,,2021-02-18,github/lbfalvy,https://github.com/facebook/react/issues/18229#issuecomment-781478424,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"I don't know how just adding the length and the elements is supposed to prevent the size of the dependencies from changing. I was thinking something might this might workaround the issue: ```typescript type DependencyList = ReadonlyArray<any>; function sameDeps(a: DependencyList, b: DependencyList): boolean { return a.length === b.length && a.every((value, index) => Object.is(value, b[index])); } function useMemoDynamic<T>(factory: () => T, deps: DependencyList): T { const ref = useRef<Dependen…",,,,,,Anecdotal,comment,,,,,,,,2021-09-24,github/steinybot,https://github.com/facebook/react/issues/18229#issuecomment-926482711,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"@steinybot the length of the dependency array can change and this should be detected, but that would only allow us to flatten one variable length collection into the dependency array, otherwise, eg. if we spread two arrays into a single dependency array, the arrays may change in a way that the resulting dependency array remains the same. Prepending the length of each variable length collection is a comparatively simple way to avoid this problem altogether such that we never even have to think a…",,,,,,Anecdotal,comment,,,,,,,,2021-10-03,github/lbfalvy,https://github.com/facebook/react/issues/18229#issuecomment-933015657,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"After a bit of consideration I've realised that we should special case variable length arrays because allowing them in any dependency list would lead people to make the mistake I've discussed above and there's no way to detect that and issue warnings. React may consider adding a special hook for this because it cannot be intuitively expressed with the current ones, but I went ahead and created this package [@lbfalvy/react-utils](https://www.npmjs.com/package/@lbfalvy/react-utils#usearray) becau…",,,,,,Anecdotal,comment,,,,,,,,2021-10-09,github/lbfalvy,https://github.com/facebook/react/issues/18229#issuecomment-939306991,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2022-01-08,github/stale[bot],https://github.com/facebook/react/issues/18229#issuecomment-1008183298,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"useMemo dependency length 发生改变的时候，建议是触发更新。就按字面意思来清楚 dependency 的改变，毕竟长度改变也的确证明依赖项发生了改变 ``` // 同时认为如下的方式 是合理的，他们应该被判定为等价 const x1 = [1]; const y1 = [2,3,4]; const x2 = [1, 2]; const y2 = [3,4]; [...x1, ...y1] === [...x2,...y2] ``` 另外一个问题 为什么 dev 和 prod. 模式下两者表现不一致？ 因为有如下代码 ``` // react-hot-loader var hookWrapper = function hookWrapper(hook) { var wrappedHook = function wrappedHook(cb, deps) { if (configuration.reloadHooks && deps) { var inputs = [].concat(deps); // 重点在于它在结尾统一增加了 函数callback 导致数组判…",,,,,,Anecdotal,comment,,,,,,,,2022-12-16,github/jxh150535011,https://github.com/facebook/react/issues/18229#issuecomment-1354145552,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"@georeith @Eli-Black-Work I encountered similar problem and written a package which do exactly what you want: It recalculates for each object reference in the array only once, and it is optimally synchronized with the initial array as if you were called **arra.map()**. Maybe you will want some additional features to it, then you can open an issue or pull request. Or even you can just use its source, i published it under **MIT license**. Its called [use-memo-mapped](https://www.npmjs.com/package…",,,,,,Anecdotal,comment,,,,,,,,2024-11-25,github/AndoGhevian,https://github.com/facebook/react/issues/18229#issuecomment-2498146815,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"I can't agree MORE with OP. Just consider length change as a normal change, this might be useful sometimes.",,,,,,Anecdotal,comment,,,,,,,,2024-12-29,github/NotYoojun,https://github.com/facebook/react/issues/18229#issuecomment-2564652867,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"I also agree with many people above, and would love to know the technical reason why this simple change from OP cannot be done. I have seen many people use `JSON.stringify()` as an alternative, but I do not believe strings are guaranteed to be interned in JS unless they are literals. I also believe that under the hood `useMemo()` uses `Object.is()` which would make comparing non-interned strings problematic as two identical strings can have different memory locations. This is a nice subtle bug …",,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/ravenscar,https://github.com/facebook/react/issues/18229#issuecomment-2689692838,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"> I also agree with many people above, and would love to know the technical reason why this simple change from OP cannot be done. > > I have seen many people use `JSON.stringify()` as an alternative, but I do not believe strings are guaranteed to be interned in JS unless they are literals. I also believe that under the hood `useMemo()` uses `Object.is()` which would make comparing non-interned strings problematic as two identical strings can have different memory locations. This is a nice subtl…",,,,,,Anecdotal,comment,,,,,,,,2025-02-28,github/steinybot,https://github.com/facebook/react/issues/18229#issuecomment-2689824940,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"> FYI, this hook is not safe. Setting a ref is an effect. The `useMemo` callback must be pure. > @steinybot I’m curious, do you know of anything that could actually go wrong here? I get that it should likely be ""conceptually pure"", but I don’t see how this would fail (due to the impurity, not because of an unrelated bug) in practice.",,,,,,Anecdotal,comment,,,,,,,,2025-08-09,github/FlorianWendelborn,https://github.com/facebook/react/issues/18229#issuecomment-3169973011,repo: facebook/react | issue: [Feature Request] Allow dependency length to change in hooks | keyword: workaround
"[React 19] allow opting out of automatic form reset when Form Actions are used ## Summary repo: https://github.com/stefanprobst/issue-react-19-form-reset react 19@beta currently will automatically reset a form with uncontrolled components after submission. it would be really cool if there was a way to opt out of this behavior, without having to fall back to using controlled components - especially since component libraries (e.g. [`react-aria`](https://react-spectrum.adobe.com/react-aria/forms.h…",,,,,,Anecdotal,issue,,,,,,,,2024-05-09,github/stefanprobst,https://github.com/facebook/react/issues/29034,repo: facebook/react | keyword: workaround | state: open
I think you should return current values from action in such case and update the default value. and return required!,,,,,,Anecdotal,comment,,,,,,,,2024-05-09,github/officialyashagarwal,https://github.com/facebook/react/issues/29034#issuecomment-2102893998,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"Be careful to handle if the action throws an error, your ""returning the new default"" at the end of the function will be ineffective. https://github.com/facebook/react/issues/29090",,,,,,Anecdotal,comment,,,,,,,,2024-05-16,github/tranvansang,https://github.com/facebook/react/issues/29034#issuecomment-2113904282,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"The automatic form reset in React 19 actually caught me off guard, where in my case, I was trying to validate the form inputs on the server, then return & display the input errors on the client, but React will reset all my uncontrolled inputs. For context, I wrote a library just for doing server-side validation https://github.com/chungweileong94/server-act?tab=readme-ov-file#useformstate-support. I know that you can pass the original input (`FormData` https://github.com/facebook/react/pull/2875…",,,,,,Anecdotal,comment,,,,,,,,2024-05-18,github/chungweileong94,https://github.com/facebook/react/issues/29034#issuecomment-2118657443,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"Now that I have played with React 19 form reset for a while, I think this behavior kind of forces us to write a more progressive enhancement code. This means that if you manually return the form data from the server and restore the form values, the user input will persist even without JavaScript enabled. Mixed feelings, pros and cons.",,,,,,Anecdotal,comment,,,,,,,,2024-05-27,github/chungweileong94,https://github.com/facebook/react/issues/29034#issuecomment-2132650120,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"If you want to opt-out of automatic form reset, you should continue using `onSubmit` like so: ```diff +function handleSubmit(event) { + event.preventDefault(); + const formData = new FormData(event.target); + startTransition(() => action(formData)); +} ... -<form action={action}> +<form onSubmit={handleSubmit}> ``` -- That way you still opt-into transitions but keep the old non-resetting behavior. And if you're a component library with your own action-based API that wants to maintain form-reset…",,,,,,Anecdotal,comment,,,,,,,,2024-06-01,github/eps1lon,https://github.com/facebook/react/issues/29034#issuecomment-2143595195,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"@eps1lon do you think using `onSubmit` over `action` is the right call here? A bit of context: I am surprised by this new default behavior here, because this forces essentially everyone to use `onSubmit` over `action`, because everyone wants to keep their form values intact in case of an (validation) error. So if this reset behavior is a 100% set in stone for React 19, why not suggest using `useActionState` then with a `payload` object then where all the form values in the case of an error are …",,,,,,Anecdotal,comment,,,,,,,,2024-06-05,github/rwieruch,https://github.com/facebook/react/issues/29034#issuecomment-2149269292,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> this forces essentially everyone to use `onSubmit` over `action`, because everyone wants to keep their form values intact in case of an (validation) error @rwieruch I'm not sure this is true. As @acdlite mentions in the PR below, it's for uncontrolled inputs. > It has no impact on controlled form inputs. - Source: https://github.com/facebook/react/pull/28804 Controlled inputs are probably in almost every form case still desirable with RSC (as Sebastian mentions [""I will also say that it's not…",,,,,,Anecdotal,comment,,,,,,,,2024-06-05,github/karlhorky,https://github.com/facebook/react/issues/29034#issuecomment-2149335023,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"EDIT: I have written about the solution over [HERE](https://www.robinwieruch.de/react-server-action-reset-form/). Thanks for the input here @karlhorky and putting all the pieces together. I have seen that this matches the native browser more closely, so I see the incentive for this change. Just wanted to double check here, because I am re-adjusting my teaching material again (my own fault here, because we are still quite early on this :)). So if I am not using a third-party library for forms or…",,,,,,Anecdotal,comment,,,,,,,,2024-06-05,github/rwieruch,https://github.com/facebook/react/issues/29034#issuecomment-2149403487,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> Thanks for the input here @karlhorky and putting all the pieces together. I have seen that this matches the native browser more closely, so I see the incentive for this change. Just wanted to double check here, because I am re-adjusting my teaching material again (my own fault here, because we are still quite early on this :)). > > So if I am not using a third-party library for forms or actions, would the following code look good for upserting an entity with form + server action, if I still w…",,,,,,Anecdotal,comment,,,,,,,,2024-06-05,github/pawelblaszczyk5,https://github.com/facebook/react/issues/29034#issuecomment-2149408559,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"Resetting the form automatically is a real head-scratcher. How should we preserve the state of a form when errors occur? Using `defaultValue` doesn't work on all input types (e.g. `<select>`). Using controlled components defeats the purpose of `useActionState()`. The example [here](https://react.dev/reference/react/useActionState#display-information-after-submitting-a-form) is deceptively simple, as there are no visible form inputs. What am I missing?",,,,,,Anecdotal,comment,,,,,,,,2024-07-10,github/adammark,https://github.com/facebook/react/issues/29034#issuecomment-2221492687,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"The docs are misleading on this topic because on the React 19 docs, it's the React 18 canary version that is shown as an example which does not reset the form. https://19.react.dev/reference/react-dom/components/form#handling-multiple-submission-types This in this very example completely defeats the purpose of saving a draft. So rather than allowing opting out of automatic form reset, I believe it's the reset itself that should be an option. Because the current decision is tantamount to breakin…",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/LutherTS,https://github.com/facebook/react/issues/29034#issuecomment-2232881023,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> Because the current decision is tantamount to breaking every form that would upgrade to React 19. Automatic form reset only applies when passing functions to the `action` or `formAction` prop. A new feature that wasn't available before React 19. The original issue description isn't explicit about this. @LutherTS If there was a change in behavior to APIs available in previous React stable versions, please include a reproduction.",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/eps1lon,https://github.com/facebook/react/issues/29034#issuecomment-2232945812,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"@eps1lon You're correct, the feature has only been available since the React 18 canary version so it's only going to be breaking for those using the canary version. However, the canary version is the default version running on Next.js, so the change may be breaking for a significant number of codebases there. But what is most important to me then is that the React docs need to correctly reflect these changes at the very least on their https://19.react.dev/ site. Because again, automatically res…",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/LutherTS,https://github.com/facebook/react/issues/29034#issuecomment-2232987087,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> Automatic form reset only applies when passing functions to the action or formAction prop. A new feature that wasn't available before React 19. The same thing doesn't apply to NextJS app router tho, where both `action` & `formAction` is available and marked as stable via React 18 canary for over a year or two, so it's pretty unfair to most NextJS users, where they kinda get screwed by the way NextJS/React handles the feature rollout or versioning.",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/chungweileong94,https://github.com/facebook/react/issues/29034#issuecomment-2232993943,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"Sure, but that would be an issue for Next.js. I don't think we rolled this change out in a 14.x Next.js stable release. The automatic form reset was enabled in https://github.com/facebook/react/pull/28804 which was included in https://github.com/vercel/next.js/pull/65058 which is not part of any stable Next.js release as far as I can tell.",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/eps1lon,https://github.com/facebook/react/issues/29034#issuecomment-2233202520,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"OK, so what you're saying is this behavior only happens in Next.js 15 RC which uses React 19 RC, both of which being currently unstable, and therefore this is a trade-off for using unstable versions. Then at the very least the React 19 docs should reflect these changes. And I reiterate that if these changes are reflected in the React 19 docs, the entire example for ""Handling multiple submission types"" is completely irrelevant, because there is no point in saving a draft if after saving said dra…",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/LutherTS,https://github.com/facebook/react/issues/29034#issuecomment-2233355463,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> Sure, but that would be an issue for Next.js. True, fair enough. > I don't think we rolled this change out in a 14.x Next.js stable release. Yes, it is not. But that's the whole points right, where we feedback on a feature before stable release. I do think that auto form reset behaviour does bring some benefits in terms of progressive enhancement, but if you think again, React is kinda doing extra stuff unnecessarily. By default, the browser will reset the form when we submit it, then when we…",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/chungweileong94,https://github.com/facebook/react/issues/29034#issuecomment-2233357538,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> Yes, it is not. But that's the whole points right, where we feedback on a feature before stable release. And that's certainly appreciated. Though there's an important difference between a change in behavior and the behavior of a new feature. The comments here read as though this breakage is not the norm when we didn't change any behavior between stable, SemVer minor React releases nor between stable, SemVer minor Next.js releases. Changes in behavior between Canary releases should be expected…",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/eps1lon,https://github.com/facebook/react/issues/29034#issuecomment-2233546401,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> Maybe we should focus why using onSubmit as shown in https://github.com/facebook/react/issues/29034#issuecomment-2143595195 doesn't work in that case? I have no minimal example at hand, but it seems like `useFormStatus` does not work as expected (as in pending is never set to true) when using the onSubmit solution. I am using said solution with a v18 canary version though (because the automatic form reset in v19 will cause problems for me in the future). It does work when using action.",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/renke,https://github.com/facebook/react/issues/29034#issuecomment-2234377298,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> I have no minimal example at hand, but it seems like useFormStatus does not work as expected (as in pending is never set to true) when using the onSubmit solution. That seems like something you should be able to highlight starting with https://react.new. Though I believe `useFormStatus` only works with `action`. Though this is best served as a separate issue.",,,,,,Anecdotal,comment,,,,,,,,2024-07-17,github/eps1lon,https://github.com/facebook/react/issues/29034#issuecomment-2234601140,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"> I have no minimal example at hand, but it seems like useFormStatus does not work as expected (as in pending is never set to true) when using the onSubmit solution. This is actually intended. `useFormStatus` is a convenience wrapper when using the `action` and `formAction` prop. Since you manually use `startTransition`, you can just use the pending indicator returned from this particular `useTransition`. I updated my original example to call this out.",,,,,,Anecdotal,comment,,,,,,,,2024-08-01,github/eps1lon,https://github.com/facebook/react/issues/29034#issuecomment-2263285962,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"It would be really great to make this opt-in instead of opt-out! I understand react is trying to mirror the default behavior of the browser here, but, as the people commenting on this issue seem to suggest, that isn't the *expected* behavior. My use case (and the use case that is [highlighted on the nextjs docs](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#server-side-form-validation)) is server-side validation. If you receive an error back fr…",,,,,,Anecdotal,comment,,,,,,,,2024-08-25,github/quick007,https://github.com/facebook/react/issues/29034#issuecomment-2308598414,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"Unfortunately, MGSimard's comment appears to have disappeared but it was factually on point. Here's a situation I've just encountered. I submit a form to be validated on the server. On the server, I notice that one of the fields was not compatible with the database, so I return an error object. The only thing that would need to be fixed to resend the form would be this one field, but since my action is on the form itself (in order to have access to the formData) which triggers when the form is …",,,,,,Anecdotal,comment,,,,,,,,2024-09-28,github/LutherTS,https://github.com/facebook/react/issues/29034#issuecomment-2380861007,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"Hmm, I back the decision to reset the form on submit to be fair. Since it is a good old fashioned POST request, it seems nice and RESTful to match browser behaviour; even if it is inconvenient. However, this is `$CURRENT_YEAR`, and I'd love to see a `pleaseDontResetMyForm` option for these actions. Good stuff either way 💯",,,,,,Anecdotal,comment,,,,,,,,2024-10-02,github/awcot,https://github.com/facebook/react/issues/29034#issuecomment-2389121997,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"So I took the time to control every single one of my form fields in order to successfully implement server-side validations. Turns out, by using the action prop of the form for my action, even though I actually control my `<select>`s, this current state of React 19 resets the `<select>`s to their first valid entry, bypassing my control. After having my mind blown and legitimately throwing a tantrum at seeing my controlled React components getting controlled by React, I implemented a loose worka…",,,,,,Anecdotal,comment,,,,,,,,2024-10-02,github/LutherTS,https://github.com/facebook/react/issues/29034#issuecomment-2389645200,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"Continuing on from @LutherTS's great points and questions, I'd love to hear the official react/nextjs teams view on the plan for handling default values for inputs such as select and what the recommended approach is now. Do we have to just write that boilerplate code with onSubmit + preventing default? (yayyy, back to that again) I'm not really deep into the understanding of how these forms/actions/react stuff are working, but isn't there a way similar to what Remix did with their Form componen…",,,,,,Anecdotal,comment,,,,,,,,2024-10-06,github/JClackett,https://github.com/facebook/react/issues/29034#issuecomment-2395461390,repo: facebook/react | issue: [React 19] allow opting out of automatic form reset when Form Actions are used | keyword: workaround
"""Should not already be working"" in Firefox after a breakpoint/alert **Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** I'm seeing ""Error: Should not already be working"" after upgrading to React 16.11 **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** This is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7 I was unable to reproduce this in a VM enviro…",,,,,,Anecdotal,issue,,,,,,,,2019-11-13,github/gzzo,https://github.com/facebook/react/issues/17355,repo: facebook/react | keyword: workaround | state: open
"Is there any way you can provide a code sample that reproduces the problem? That error should only occur if there's a bug in React, so it'd be very helpful if we could reproduce.",,,,,,Anecdotal,comment,,,,,,,,2019-11-13,github/aweary,https://github.com/facebook/react/issues/17355#issuecomment-553657988,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"I see the same error message in sentry, and the breadcrumbs show an ""out of memory"" error - and then further down some react errors. Not sure if it'll be useful, but here's some the breadcrumbs. **OS**: Windows 7, **Browser**: Firefox 70.0 **React**: 16.9.0 ``` out of memory out of memory 08:21:52 Error: Minified React error #327; visit https://reactjs.org/docs/error-decoder.html?invariant=327 for the full message or use the non-minified dev environment for full errors and additional helpful wa…",,,,,,Anecdotal,comment,,,,,,,,2019-11-17,github/CoryDanielson,https://github.com/facebook/react/issues/17355#issuecomment-554700523,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"To add some more data points: I'm not seeing out of memory errors on my end. We downgraded to React 16.10.2 and are still seeing errors. Will keep downgrading and report back. Also to the FB team, we're happy to share Sentry reports with you.",,,,,,Anecdotal,comment,,,,,,,,2019-11-18,github/gzzo,https://github.com/facebook/react/issues/17355#issuecomment-555083162,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
I just updated my comment to include the React version (v16.9.0) ---- **Edit**: Also I searched outside of the last 24h and we've received this error many times. **Browser**: Firefox 70.0 & 68.0 **OS**: Windows 10 **Browser**: Firefox 70.0 **OS**: Mac OS X 10.14 **Browser**: IE 11 **OS**: Windows 10,,,,,,Anecdotal,comment,,,,,,,,2019-11-18,github/CoryDanielson,https://github.com/facebook/react/issues/17355#issuecomment-555106887,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"We're seeing this in Sentry, too. OS: Windows 10 Browser: Edge 18.18362 React 16.11.0 (from `yarn.lock`) AFAICT it happens before the user did anything; here's the stack trace: ```Error: Should not already be working. at Lj(../node_modules/react-dom/cjs/react-dom.production.min.js:5382:1) at Anonymous function(../node_modules/react-dom/cjs/react-dom.production.min.js:2829:1) at t.unstable_runWithPriority(../node_modules/scheduler/cjs/scheduler.production.min.js:266:1) at fg(../node_modules/reac…",,,,,,Anecdotal,comment,,,,,,,,2019-11-27,github/jhou,https://github.com/facebook/react/issues/17355#issuecomment-559180446,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
@gzzo Are you by any chance in any of your ```componentDidMount``` functions attempting to update the ```state``` as the first thing to do in that function? I was getting the error ```Should not already be working``` when I had the following line in my ```componentDidMount``` function : ```this.setState({ hasLaunched: true });```,,,,,,Anecdotal,comment,,,,,,,,2019-12-04,github/shriniketsarkar,https://github.com/facebook/react/issues/17355#issuecomment-561703011,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Interesting. We do call setState in a couple of `componentDidMount`. The [React docs specify](https://reactjs.org/docs/react-component.html#componentdidmount) this is okay though: > You may call setState() immediately in componentDidMount(). It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the render() will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because i…",,,,,,Anecdotal,comment,,,,,,,,2019-12-04,github/gzzo,https://github.com/facebook/react/issues/17355#issuecomment-561717105,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Hello, We've also noticed this error in our sentry. It's only occurred once so far under these conditions: OS: Windows 10 Browser: IE 11 React: 16.11.0 The stack trace does not appear to provide much additional info: ``` Error: Should not already be working. at Lj(webpack://[name]/./node_modules/react-dom/cjs/react-dom.production.min.js:223:104) at Anonymous function(webpack://[name]/./node_modules/react-dom/cjs/react-dom.production.min.js:121:110) at t.unstable_runWithPriority(webpack://[name]…",,,,,,Anecdotal,comment,,,,,,,,2019-12-16,github/rfboykin,https://github.com/facebook/react/issues/17355#issuecomment-566202935,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
I had this same issue. Was not a problem in Chrome however I received a blank screen and the error. Error: Should not already be working. React 16.12.0 I had two(2) this.setState calls in conditional if statements in componentDidMount. This should have been ok however I removed them and figured a way to set them a little later and the error stopped. this.setState should have been ok to run in componentDidMount so I hope this gets resolved.,,,,,,Anecdotal,comment,,,,,,,,2020-01-15,github/davineyard,https://github.com/facebook/react/issues/17355#issuecomment-574891990,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
We also experience this issue. React 16.12.0 OS: IOS 13.3 Browser: Safari We have tons of cases were we call one or multiple 'setState' in 'componentDidMount'. It has never been an issue. Moving these calls to other places is not an option.,,,,,,Anecdotal,comment,,,,,,,,2020-01-29,github/magnetnation,https://github.com/facebook/react/issues/17355#issuecomment-579783035,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
I am able to reproduce the issue when stepping through a function after a breakpoint in an otherwise working development build application. Console output: Error: Should not already be working. react-dom.development.js:24247 performSyncWorkOnRoot React performSyncWorkOnRoot self-hosted:920 flushSyncCallbackQueueImpl React unstable_runWithPriority scheduler.development.js:697 React 2 runWithPriority$2 flushSyncCallbackQueueImpl workLoop scheduler.development.js:641 flushWork scheduler.developmen…,,,,,,Anecdotal,comment,,,,,,,,2020-02-07,github/xUSERxNAMEx,https://github.com/facebook/react/issues/17355#issuecomment-583630904,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"We also experience this issue since we bumped React. React 16.12.0 Browser: Firefox 72/73/74 OS: Window 10, Mac OS 10.0/10.10/10.14 The stack traces point us to [this function call](https://github.com/facebook/react/blob/master/packages/scheduler/npm/umd/scheduler.production.min.js#L57) ##### More detail > InvalidStateError > An attempt was made to use an object that is not, or is no longer, usable",,,,,,Anecdotal,comment,,,,,,,,2020-02-25,github/alexandcote,https://github.com/facebook/react/issues/17355#issuecomment-590940548,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
Any movement on this? I am also getting these errors in FireFox (73.0.1 (64-bit) but not in Chrome (Version 80.0.3987.122 (Official Build) (32-bit) React - 16.12 React-Redux 7.1.3 It is happening when trying to initialize data from props: ``` //Parent Page <SimpleForm sampleData = {sampleData} /> //SimpleForm.js componentDidMount (){ if (this.props.sampleData) { this.props.initialize(this.props.sampleData); } ``` Error: ``` performSyncWorkOnRoot React performSyncWorkOnRoot self-hosted:920 flush…,,,,,,Anecdotal,comment,,,,,,,,2020-02-26,github/rralbritton,https://github.com/facebook/react/issues/17355#issuecomment-591570825,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"I got the same error 'Should not already be working' because I created a pipe write stream in my dataActions, shifting the function to a util file outside the action file fixed the issue for me.",,,,,,Anecdotal,comment,,,,,,,,2020-03-06,github/nikhil3000,https://github.com/facebook/react/issues/17355#issuecomment-595735782,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
I got the same error reported on sentry ```js Error: Should not already be working. at Lj(/node_modules/react-dom/cjs/react-dom.production.min.js:223:129) at b(/node_modules/react-dom/cjs/react-dom.production.min.js:121:115) at Lf(/node_modules/scheduler/cjs/scheduler.production.min.js:18:437) at fg(/node_modules/react-dom/cjs/react-dom.production.min.js:120:325) at ig(/node_modules/react-dom/cjs/react-dom.production.min.js:121:61) at X(/node_modules/scheduler/cjs/scheduler.production.min.js:17…,,,,,,Anecdotal,comment,,,,,,,,2020-03-26,github/hinok,https://github.com/facebook/react/issues/17355#issuecomment-604407815,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Getting this error in React Native as well. react: ""16.11.0"" react-native: ""0.62.2"" Based on my understanding of this [reddit comment](https://www.reddit.com/r/reactjs/comments/fi39sm/thissetstate_in_componentdidmount_is_this_not/fknienc/). I think if user land code throws an error in componentDidMount, React does not reset state and next time render occurs, this Error ""Should not already be working"" gets thrown.",,,,,,Anecdotal,comment,,,,,,,,2020-04-27,github/azizhk,https://github.com/facebook/react/issues/17355#issuecomment-619707315,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"I has this issue and the problem was related toan ajax call with jquery made in componentDidMount with async parameter to false, this causes some issues with latest react release to synchronise the state I assume. setting async to true solved the issue",,,,,,Anecdotal,comment,,,,,,,,2020-05-11,github/rtremblet-fr,https://github.com/facebook/react/issues/17355#issuecomment-626583116,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"This happens to me if I set a breakpoint in `componentDidMount`, either by clicking the line number in Firefox's debugger or by calling `debugger` in the code.",,,,,,Anecdotal,comment,,,,,,,,2020-05-19,github/dimaryaz,https://github.com/facebook/react/issues/17355#issuecomment-630596341,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Ok, at least in my case, this looks like a... thread-safety issue? Firefox has no problem running JavaScript event handlers while stopped at a breakpoint, causing all kinds of bizarre behavior. I must've missed the memo that JavaScript is no longer single-threaded.",,,,,,Anecdotal,comment,,,,,,,,2020-05-19,github/dimaryaz,https://github.com/facebook/react/issues/17355#issuecomment-630613798,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"@aweary Can we add some more diagnostic info, like what component React is working on, maybe that might give us some information on where to concentrate. Right now, we are getting multiple reports about users facing App Crashes (React Native)",,,,,,Anecdotal,comment,,,,,,,,2020-05-20,github/azizhk,https://github.com/facebook/react/issues/17355#issuecomment-631182392,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"@cristianoccazinsp I've created an issue on react-native repo as well, because its a different renderer: https://github.com/facebook/react-native/issues/28948 Please do subscribe there as well.",,,,,,Anecdotal,comment,,,,,,,,2020-05-25,github/azizhk,https://github.com/facebook/react/issues/17355#issuecomment-633590019,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Same here if we run `$.ajax()` in `componentDidMount()`. Our solution is to use a `setTimeout()`: ```js { componentDidMount() { setTimeout(() => { $.ajax(); }, 300); } } ```",,,,,,Anecdotal,comment,,,,,,,,2020-05-29,github/guoyunhe,https://github.com/facebook/react/issues/17355#issuecomment-636030996,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Hi @acdlite (sorry for tagging you here), Just wanted to know what React features would trigger the usage of `unstable_runWithPriority`. Maybe that might help in figuring out what is causing this issue and help with creating a reproduction.",,,,,,Anecdotal,comment,,,,,,,,2020-06-05,github/azizhk,https://github.com/facebook/react/issues/17355#issuecomment-639267944,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Hi Team, I am facing this issue now in firefox browser. How to resolve this issue ? Any suggestion please?",,,,,,Anecdotal,comment,,,,,,,,2020-08-29,github/karthikravichandran94,https://github.com/facebook/react/issues/17355#issuecomment-683250590,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
My error reporting system has been reporting me this error in production for my react app https://twisti.app. anyone know what is causing it or how to fix it? the error message is not very helpful user info: ``` Firefox 60.0 Windows 7 Windows ``` `Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0` error: ```Error ?(2.27fae31b.chunk) error Should not already be working. ``` `/static/js/2.27fae31b.chunk.js at line 2` ``` /*! For license information please see 2.27fae31…,,,,,,Anecdotal,comment,,,,,,,,2020-09-07,github/KyleAsaff,https://github.com/facebook/react/issues/17355#issuecomment-688030101,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"> > > This happens to me if I set a breakpoint in `componentDidMount`, either by clicking the line number in Firefox's debugger or by calling `debugger` in the code. same with me, when i set a breakpoint between setState and Axios request in componentDidUpdate, this error will appear. But if i delete the breakpoint, everything is fine.",,,,,,Anecdotal,comment,,,,,,,,2020-09-27,github/oopsRookie,https://github.com/facebook/react/issues/17355#issuecomment-699591398,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
Also seeing this reported all of a sudden by my application monitoring service. All on `Windows 10` and `Firefox 80` so far.,,,,,,Anecdotal,comment,,,,,,,,2020-09-30,github/leojh,https://github.com/facebook/react/issues/17355#issuecomment-701155763,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"Also having this problem. This only happened in Firefox for me; couldn't reproduce in Chrome (dev version 87). Tried to isolate it - as far as I can tell, after a call to setState in componentDidMount, invoking the debugger anywhere in that method after that call will cause the error, _and_ anywhere in subsequent calls to componentDidMount in _any_ component, including subsequent children, parent components (since a parent calls its componentDidMount after its children) and even higher up & dow…",,,,,,Anecdotal,comment,,,,,,,,2020-10-06,github/NuclearFej,https://github.com/facebook/react/issues/17355#issuecomment-704090853,"repo: facebook/react | issue: ""Should not already be working"" in Firefox after a breakpoint/alert | keyword: workaround"
"[React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> React version: 19.0.0 Related Issues: #30408, #31697 This may be the intended behavior, but I'm opening this issue anyway because enough discussion hasn't been done in the related issues I…",,,,,,Anecdotal,issue,,,,,,,,2024-12-17,github/uhyo,https://github.com/facebook/react/issues/31819,repo: facebook/react | keyword: workaround | state: open
"The alternative of quickly flashing the Suspense boundary fallback isn't better from our experience. In real apps, that would usually mean unmounting a large chunk of the screen for a very short period which doesn't make for a pleasant UX. There isn't a correct number here since this is just a heuristic. 300ms felt like a good middleground between avoiding jank and feeling too sluggish. A real-world example would help illustrate the issue. Keep in mind, that you can always wrap the update in `s…",,,,,,Anecdotal,comment,,,,,,,,2024-12-18,github/eps1lon,https://github.com/facebook/react/issues/31819#issuecomment-2551561752,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"@eps1lon Thank you for the response. I have two questions now: First, I understand that flashing UI isn't good user experience, but I still don't see any reason to make user wait for extra hundreds milliseconds, especially when the situation is this simple where there is only one ongoing suspension. 300ms at maximum isn't always a reasonable cost for making the UI look a bit less janky IMO. Secondly, I see that `useTransition` could work. However if I understand correctly transitions are for no…",,,,,,Anecdotal,comment,,,,,,,,2024-12-18,github/uhyo,https://github.com/facebook/react/issues/31819#issuecomment-2551726010,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"There are use cases where the suspense bound components are very small and can take less than 100ms to load (depends on the server as well). We used to not show anything as a fallback to avoid the jankiness. This is intentional, so that initial bundle size is low but end user also doesn't have to see these fallbacks for every little lazy loaded components. Now with this 300ms hold up, there's no other way than showing a fallback, which in turn feels like a worse UX. Instead of making this behav…",,,,,,Anecdotal,comment,,,,,,,,2024-12-22,github/Tasin5541,https://github.com/facebook/react/issues/31819#issuecomment-2558463270,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"It appears that any time a lazy component is initialised it also kicks in the 300ms suspense, even if there is nothing that needs to load. We have our bundle split so we may have 10 or so lazy wrapped component (views) in one chunk, so the first time you hit one of the views the chunk is loaded, then switching between the views is instant. Now it seems that you have to wait 300ms and show a spinner even though nothing is being loaded after the initial chunk load, which is a notable degradation …",,,,,,Anecdotal,comment,,,,,,,,2025-01-06,github/domarmstrong,https://github.com/facebook/react/issues/31819#issuecomment-2572875072,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"> Instead of making this behavior the default, it should be opt in based. I'm fine with defaults, as long as there are escape hatches. This should 100% be configurable, with the option to disable it entirely. It's not really React's responsibility to make this kind of choice for every app.",,,,,,Anecdotal,comment,,,,,,,,2025-01-06,github/rossipedia,https://github.com/facebook/react/issues/31819#issuecomment-2573442053,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"> It appears that any time a lazy component is initialised it also kicks in the 300ms suspense, even if there is nothing that needs to load. We have our bundle split so we may have 10 or so lazy wrapped component (views) in one chunk, so the first time you hit one of the views the chunk is loaded, then switching between the views is instant. Now it seems that you have to wait 300ms and show a spinner even though nothing is being loaded after the initial chunk load, which is a notable degradatio…",,,,,,Anecdotal,comment,,,,,,,,2025-01-08,github/Janpot,https://github.com/facebook/react/issues/31819#issuecomment-2577362449,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"So I can remove the 'always 300ms' fallback by using `useDeferredValue` in tandem with a use of `useSyncExternalStore` as noted [here](https://github.com/reactwg/react-18/discussions/86?sort=top#discussioncomment-1345270) (which honestly makes no sense as a dev/lib user, sync updates cause an async fallback, but making it async avoids the async fallback to show, wat?) . Similarly you could wrap any state calls that cause lazy components to render in `startTransition` for a similar solution. How…",,,,,,Anecdotal,comment,,,,,,,,2025-01-08,github/domarmstrong,https://github.com/facebook/react/issues/31819#issuecomment-2578018839,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
A Reddit discussion about this https://www.reddit.com/r/reactjs/comments/1hjoplz/react_19_scheduler_does_something_silly/,,,,,,Anecdotal,comment,,,,,,,,2025-01-15,github/oliviertassinari,https://github.com/facebook/react/issues/31819#issuecomment-2593274820,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
I'm also encountering this issue when using [lazy routes on tanstack router](https://tanstack.com/router/latest/docs/framework/react/guide/code-splitting#using-the-lazytsx-suffix) and it's not clear to me how I could use `startTransition` there. This behaviour should really be opt-in not opt-out.,,,,,,Anecdotal,comment,,,,,,,,2025-03-31,github/eg-bernardo,https://github.com/facebook/react/issues/31819#issuecomment-2765320510,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"300ms is still a significant amount of time. Many people have tried to pinpoint this exact problem, as their web applications significantly slowed down in terms of UX after migrating from React 18 to 19.",,,,,,Anecdotal,comment,,,,,,,,2025-04-01,github/olekolek1000,https://github.com/facebook/react/issues/31819#issuecomment-2768524695,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
> Wow this is horrible. My UI which was previously instant (because a suspense React Query would resolve instantly when cached) is now always waiting 300ms. > > This has to be reverted. It happens when triggering suspense boundaries. Was yours doing that but just resolving super fast so no one noticed? The canonical solution for now is to put the state change in a transition and it'll appear as before. But watch out if you're using useSyncExternalStore as the transitions don't work with it... w…,,,,,,Anecdotal,comment,,,,,,,,2025-04-11,github/itsdouges,https://github.com/facebook/react/issues/31819#issuecomment-2798035552,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"This is really really really frustrating, my ""loaders"" are skeleton components that perfectly match the dimensions of my content, eg squares that should have photos. ""flashing"" the skeleton for 1ms and then fading into the loaded photo is totally fine and not at all jank. Now with react 19, even if all of my content is immediately available in a local cache, i still need to load all my content for 300ms?! why?!",,,,,,Anecdotal,comment,,,,,,,,2025-05-04,github/Mikephii,https://github.com/facebook/react/issues/31819#issuecomment-2849050543,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
> The alternative of quickly flashing the Suspense boundary fallback isn't better from our experience. Then make it configurable. This isn't a decision the React gods should have over every React app.,,,,,,Anecdotal,comment,,,,,,,,2025-05-05,github/jvandenaardweg,https://github.com/facebook/react/issues/31819#issuecomment-2850743042,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"I put together a hackish `React.lazy` alternative that solves the situation where the `Suspense` fallback is shown even when the component had already been imported before it was rendered. Basically, I am storing the resolved import in the SWR cache, with the stringified importer function (with [toString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString)) serving as the cache key. This can also be adapted for usage with other caching solutions t…",,,,,,Anecdotal,comment,,,,,,,,2025-05-07,github/bogdanailincaipnt,https://github.com/facebook/react/issues/31819#issuecomment-2860210005,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
I also ended up reimplementing lazy without suspense and removing any other suspense boundaries. It was fairly simple and resolved the problems with this unfortunate decision. I just hope I can continue to avoid having to use these 'async' features.,,,,,,Anecdotal,comment,,,,,,,,2025-05-07,github/domarmstrong,https://github.com/facebook/react/issues/31819#issuecomment-2860285580,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
Does anyone have an example that shows how to bypass this issue when doing simple data fetching? I'm not sure the best way to use `useDeferredValue` and `useSyncExternalStore` to get back the near-instant behavior from before.,,,,,,Anecdotal,comment,,,,,,,,2025-06-11,github/skoshy,https://github.com/facebook/react/issues/31819#issuecomment-2963944443,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
We are likely experiencing this problem (https://github.com/facebook/react/issues/31122 also seems related) during initial SPA load - a lot of components are waiting for some moment instead of getting resolved (and continuing the waterfall) as they are ready. ➡️ Observed behavior - lots of fallbacks are displayed as they are displayed and unmounted roughly at one time (tracked via `useEffect`) I wonder if we cannot followup https://github.com/facebook/react/issues/30408 and make `FALLBACK_THROT…,,,,,,Anecdotal,comment,,,,,,,,2025-07-08,github/theKashey,https://github.com/facebook/react/issues/31819#issuecomment-3048466104,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"I can stomach the 300ms delay for UX (although I agree, this should absolutely be configurable) What is harder to eat is the cumulative effect of many 300ms's on my test suite? Does anyone have a work around for these?",,,,,,Anecdotal,comment,,,,,,,,2025-08-02,github/msaspence,https://github.com/facebook/react/issues/31819#issuecomment-3146096521,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"> I can stomach the 300ms delay for UX (although I agree, this should absolutely be configurable) > > What is harder to eat is the cumulative effect of many 300ms's on my test suite? Does anyone have a work around for these? Does it help to make the tests async and run them concurrently? Also, there's an issue for testing at https://github.com/facebook/react/issues/30408",,,,,,Anecdotal,comment,,,,,,,,2025-08-02,github/nilsbunger,https://github.com/facebook/react/issues/31819#issuecomment-3146668519,repo: facebook/react | issue: [React 19] Suspense throttling behavior (`FALLBACK_THROTTLE_MS`) kicks in too often | keyword: workaround
"head > meta > content escaping issue <!-- Note: if the issue is about documentation or the website, please file it at: https://github.com/reactjs/reactjs.org/issues/new --> **Do you want to request a *feature* or report a *bug*?** I'm guessing it's a bug. **What is the current behavior?** The following source code, ```jsx <meta property=""og:image"" content=""https://onepixel.imgix.net/60366a63-1ac8-9626-1df8-9d8d5e5e2601_1000.jpg?auto=format&q=80&mark=watermark%2Fcenter-v5.png&markalign=center%2C…",,,,,,Anecdotal,issue,,,,,,,,2018-10-12,github/oliviertassinari,https://github.com/facebook/react/issues/13838,repo: facebook/react | keyword: workaround | state: open
"We are solving the problem this way: ```js import Entities from 'html-entities/lib/html5-entities' const entities = new Entities() const contentRegExp = /content=""([^""]+)""/g const handleContent = (match, content) => { return `content=""${entities.decode(content)}""` } html = html.replace(contentRegExp, handleContent) ``` We spend ~1ms per request in the path. It's not too bad. I can give it a look at some point.",,,,,,Anecdotal,comment,,,,,,,,2018-11-01,github/oliviertassinari,https://github.com/facebook/react/issues/13838#issuecomment-435165942,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"I have found this related issue: #6873. Digging into the implementation, the behavior comes from https://github.com/facebook/react/blob/0005d1e3f54b79fe4707fbccc44b89e0fb4ce565/packages/react-dom/src/server/DOMMarkupOperations.js#L61 ⬇️ https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/server/quoteAttributeValueForBrowser.js#L17 ⬇️ https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/server/es…",,,,,,Anecdotal,comment,,,,,,,,2019-01-14,github/oliviertassinari,https://github.com/facebook/react/issues/13838#issuecomment-454020009,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"I have the same problem in the content of `<style>` elements: ```jsx const React = require(""react""); const ReactDOMServer = require(""react-dom/server""); console.log(ReactDOMServer.renderToStaticMarkup( <html> <head> <link href=""https://fonts.googleapis.com/css?family=Source+Sans+Pro"" rel=""stylesheet"" /> <style>{` html { font-family: ""Source Sans Pro"", sans-serif; } `}</style> </head> <body> <p>Test.</p> </body> </html> )); ``` This outputs: ```html <html><head><link href=""https://fonts.googleap…",,,,,,Anecdotal,comment,,,,,,,,2019-03-06,github/andreubotella,https://github.com/facebook/react/issues/13838#issuecomment-470294454,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"@andreubotella This is a different problem, you should use `dangerouslySetInnerHTML`. Can an admin mark the comments as ""resolved""?",,,,,,Anecdotal,comment,,,,,,,,2019-03-06,github/oliviertassinari,https://github.com/facebook/react/issues/13838#issuecomment-470296607,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contribution.,,,,,,Anecdotal,comment,,,,,,,,2020-01-10,github/stale[bot],https://github.com/facebook/react/issues/13838#issuecomment-572899451,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2020-01-17,github/stale[bot],https://github.com/facebook/react/issues/13838#issuecomment-575500893,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"This is not a bug in React. Using an entity reference for `&` (e.g. `&amp;`) is the correct behavior for [xhtml documents](https://www.w3.org/TR/xhtml1/guidelines.html#C_12): > In both SGML and XML, the ampersand character (""&"") declares the beginning of an entity reference (e.g., &reg; for the registered trademark symbol ""®""). Unfortunately, many HTML user agents have silently ignored incorrect usage of the ampersand character in HTML documents - treating ampersands that do not look like entit…",,,,,,Anecdotal,comment,,,,,,,,2020-08-17,github/jbraithwaite,https://github.com/facebook/react/issues/13838#issuecomment-675120125,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"This is the change needed to get the behavior you expect: Replace https://github.com/facebook/react/blob/ee409ea3b577f9ff37d36ccbfc642058ad783bb0/packages/react-dom/src/server/ReactPartialRenderer.js#L383 with an escape hatch: ```js if (tagVerbatim === 'meta' && propKey === 'content') { markup = 'content=""' + propValue + '""'; } else { markup = createMarkupForProperty(propKey, propValue); } ``` This would explicitly exempt the `meta` tag's `content` attribute from being properly escaped which wo…",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/jbraithwaite,https://github.com/facebook/react/issues/13838#issuecomment-675270594,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"@equinusocio Anything reading the meta tags from the HTML should handle decoding the HTML encoded characters that React produces here. It's a bug with anything consuming the HTML if it doesn't decode the `&amp;`s correctly. If you're trying to test your work and want to read HTML-decoded value, then in dev tools element inspector, pick the meta tag element, and in the console run `$0.content`. That will return the proper value because the browser handles HTML decoding properly as anything parsi…",,,,,,Anecdotal,comment,,,,,,,,2021-03-24,github/Macil,https://github.com/facebook/react/issues/13838#issuecomment-806247708,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Hello, I'm having this problem and can't find any fix. I'm on React 17.0.1. Would anyone have a hint ?",,,,,,Anecdotal,comment,,,,,,,,2021-05-04,github/YoannBuzenet,https://github.com/facebook/react/issues/13838#issuecomment-831822113,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"I’ve spent the last little while trying to figure out this issue since the encoded URLs cause LinkedIn to not see Open Graph images. I’ve come up with a workaround for our Gatsby site that uses `ReactDOMServer.renderToStaticMarkup`, replacing `&amp;` to `&` in the string, then rendering using `dangerouslySetInnerHTML`: ```jsx const headHtml = ReactDOMServer.renderToStaticMarkup(headComponents).replace( /&amp;/g, '&' ) return ( <html> <head dangerouslySetInnerHTML={{ __html: headHtml }} /> ... `…",,,,,,Anecdotal,comment,,,,,,,,2021-06-11,github/notsidney,https://github.com/facebook/react/issues/13838#issuecomment-859236290,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
Do I understand correctly that the issue is primarily due to the content scrapers that don’t consider encoded characters? So the React output is technically correct but some scrapers are too naïve? Or is there a reason why React behavior is technically incorrect?,,,,,,Anecdotal,comment,,,,,,,,2021-09-06,github/gaearon,https://github.com/facebook/react/issues/13838#issuecomment-913875218,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Yes and no. For example `https://resoc.io/setup` will fail showing you an image if you provide encoded characters (that means this service is unusable for React users). Same behavior is for `Next.JS`. Inspired by https://github.com/vercel/next.js/issues/2006#issuecomment-900696618 `<meta property=""og:image"" content='/api/share?one=1&two=2' />` will become `<meta property=""og:image"" content='/api/share?one=1&amp;two=2' />`. In the `api/share.ts`, (automatically) parsed request (`req.query`), wil…",,,,,,Anecdotal,comment,,,,,,,,2021-09-06,github/ihmpavel,https://github.com/facebook/react/issues/13838#issuecomment-913877631,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
">Yes and no ""No"" to which part? >For example https://resoc.io/setup will fail showing you an image if you provide encoded characters (that means this service is unusable for React users). I understand that _particular services_ may not work. What I'm asking is — technically would you agree that the problem is on _their_ end, or is the problem unambiguously on _our_ end? I don't mean to turn this into ""not our problem, bye"" kind of argument, but I think we need to get clarity on the ideal situat…",,,,,,Anecdotal,comment,,,,,,,,2021-09-06,github/gaearon,https://github.com/facebook/react/issues/13838#issuecomment-913892749,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"In my view it's just naïve scrapers, some if which are run by Facebook, see https://github.com/facebook/react/issues/6873#issuecomment-403089412",,,,,,Anecdotal,comment,,,,,,,,2021-09-07,github/depoulo,https://github.com/facebook/react/issues/13838#issuecomment-914332194,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
fwiw afaict this makes you unable to write [inline scripts in NextJS](https://github.com/vercel/next.js/issues/26240).,,,,,,Anecdotal,comment,,,,,,,,2021-11-03,github/devanshj,https://github.com/facebook/react/issues/13838#issuecomment-958587918,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Whilst React's approach might be technically correct, it doesn't work in the real world, because we have naive scrapers, from massive organisations like LinkedIn, Slack and WhatsApp. So you can choose to be technically correct and pedantic or to have your code work, in the real world, right now. I for one choose the latter. I'm trying to get open graph images with query params to work, now I need to look for a hacky workaround because I can't go and force these massive tech organisations to ""fi…",,,,,,Anecdotal,comment,,,,,,,,2022-02-23,github/phawk,https://github.com/facebook/react/issues/13838#issuecomment-1048629521,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"I'm wondering if most of the people who believe this is an issue for themselves are mistaken. I first found this issue because I was trying to figure out why Twitter wasn't showing an image from one of my `<meta>` tags. I viewed the HTML my server was rendering with React, copied the URL from the content=""..."" part of my meta tag, and found that it didn't work in my browser, so I assumed the reason that didn't work was the same reason Twitter wasn't loading my image. However, the reason that co…",,,,,,Anecdotal,comment,,,,,,,,2022-02-23,github/Macil,https://github.com/facebook/react/issues/13838#issuecomment-1049340430,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Same issue, using `og:image` where the url uses query parameters, twitter sees these and sends them to my server which doesn't recognize `&amp;query=value` instead of `&query=value`.",,,,,,Anecdotal,comment,,,,,,,,2022-05-24,github/apecollector,https://github.com/facebook/react/issues/13838#issuecomment-1135577946,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"@apecollector I had the similar experience with `renderToStaticMarkup` method, which escapes html tags, new line etc. I used [unescape](https://lodash.com/docs/4.17.15#unescape) from lodash to fix it. ```js _.unescape('&amp;query=value'); ``` outputs ``` &query=value ```",,,,,,Anecdotal,comment,,,,,,,,2022-06-16,github/talentedandrew,https://github.com/facebook/react/issues/13838#issuecomment-1157445441,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Hi all, I know this is a 4 year old issue and probably most of you have probably moved on, but I'm new to it and feel I must be missing something obvious. I suspect we're all adding content security policies to our React apps by now, and those policies have a `content` value often with single quotes in them. I'm running Next.JS with static site generation, and their advice is to add it into `/pages/_document.tsx`. But this happens: ``` <meta httpEquiv=""Content-Security-Policy"" content=""default-…",,,,,,Anecdotal,comment,,,,,,,,2022-09-09,github/sc0ttdav3y,https://github.com/facebook/react/issues/13838#issuecomment-1241593329,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Hi, I have the same issue as @sc0ttdav3y has, but in my case single quotes are escaping with `&#x27;` (Next.JS 12.3.0, ssg).",,,,,,Anecdotal,comment,,,,,,,,2022-09-14,github/devilportez,https://github.com/facebook/react/issues/13838#issuecomment-1246305603,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"(I just tried the same thing with NextJS and the exact output I got is `<meta http-equiv=""Content-Security-Policy"" content=""default-src &#x27;self&#x27;""/>`, consistent with https://github.com/facebook/react/issues/13838#issuecomment-1246305603, so I'm going to assume the different value in https://github.com/facebook/react/issues/13838#issuecomment-1241593329 was a copy-paste error of some kind.) @sc0ttdav3y @devilportez It should be fine that the value is html-encoded like that. The browser w…",,,,,,Anecdotal,comment,,,,,,,,2022-09-14,github/Macil,https://github.com/facebook/react/issues/13838#issuecomment-1246362862,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Still happening in `next@13.1.6` and `react@18.2.0`. Kind of killing my SEO because I can't use: ```html <meta property=""og:image"" content=""url-with-&"" /> ```",,,,,,Anecdotal,comment,,,,,,,,2023-03-14,github/BrodaNoel,https://github.com/facebook/react/issues/13838#issuecomment-1469019312,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"I ran into this escaping issue and tried a [hack from another issue](https://stackoverflow.com/a/64635334) I had also ran into. It seemed to have fixed the escaping for me. You get a few unnecessary `<style></style>` elements injected, but may be a better option for some than parsing the final content. YMMV ``` <style dangerouslySetInnerHTML={{ __html: `</style> ${yourCode} <style>`, }} ></style>",,,,,,Anecdotal,comment,,,,,,,,2023-06-02,github/aaronbarker,https://github.com/facebook/react/issues/13838#issuecomment-1573845170,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Wound up here investigating why a link-preview was missing its preview image on Twitter. The escaping turned out to be a red herring; Twitter's link-preview bot handles escaped URLs just fine. The problem was that it wasn't using our own mirror of the image, it was using a user-submitted image URL on `pbs.twimg.com`, which apparently blocks all bot traffic (including from Twitter's own link-preview bot).",,,,,,Anecdotal,comment,,,,,,,,2023-11-27,github/jimrandomh,https://github.com/facebook/react/issues/13838#issuecomment-1828776704,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Running into this issue as well using Next.js and `generateMetadata` `<meta description=""we're"" />` becomes `<meta description=""we&#x27;re"" />`",,,,,,Anecdotal,comment,,,,,,,,2024-05-03,github/erickreutz,https://github.com/facebook/react/issues/13838#issuecomment-2093155783,repo: facebook/react | issue: head > meta > content escaping issue | keyword: workaround
"Bug: useFormStatus pending state is reset when component state is updated If you have a component that relies on the `pending` return value of `useFormStatus`, the `pending` state will incorrectly reset to `false` if the component is updated due to a `useState` update. This does not happen if the `useState` hook is placed in a child component. React version: 19.0.0-rc-512b09b2-20240718 ## Steps To Reproduce [codesandbox.io/p/sandbox/react-useformstatus-pending-reset-on-unrelated-state-update-m5…",,,,,,Anecdotal,issue,,,,,,,,2024-07-18,github/jatwood,https://github.com/facebook/react/issues/30368,repo: facebook/react | keyword: workaround | state: open
"Basically, if you want it to show status as not-pending once counter is updated then create another state variable(lets say pendinggg) whose initial value is same as that of pending and you immediately have to set pendinggg as false once counter is updated and inside useeffect have a condition that once pending is false then not to re-run the useeffect. import React, { useState, useEffect } from 'react'; const useFormStatus = () => { return { pending: true }; // Example status, replace with act…",,,,,,Anecdotal,comment,,,,,,,,2024-07-19,github/yup1771,https://github.com/facebook/react/issues/30368#issuecomment-2238860529,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
Can be reproduced with latest RC and just Client Actions: https://codesandbox.io/p/sandbox/react-useformstatus-pending-reset-on-unrelated-state-update-m59zw8,,,,,,Anecdotal,comment,,,,,,,,2024-07-22,github/eps1lon,https://github.com/facebook/react/issues/30368#issuecomment-2243010673,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
@ujshaikh We don't assign people to issues since they might stop working on the issue and then it looks like the issue is still being worked on. Assigning issues hasn't helped us manage issues. We just recommend to people start working on a bug immediately.,,,,,,Anecdotal,comment,,,,,,,,2024-08-01,github/eps1lon,https://github.com/facebook/react/issues/30368#issuecomment-2263278094,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
Any news on this topic? I recently started using React 19 RC as part of the upgrade of Next.js to v15 and I'm facing this issue in most places where I'm using `useFormStatus`. If we don't get a fix for this issue I'll have to think of getting rid of `useFormStatus` and replace it with a custom solution.,,,,,,Anecdotal,comment,,,,,,,,2024-10-28,github/lopesmartinz,https://github.com/facebook/react/issues/30368#issuecomment-2441113634,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
"I have a similar issue. ""pending"" does not work if a child-component updates its own state (useState), and the form is submitted without that child-component being rerendering at least once before submitting (you initiate the form and submit right away). I printed the value of pending to the console log and It looks like pending becomes true but changes back to false immediately (before submit action is finished). This code (from a child component in a form) breaks pending from useFormStatus: `…",,,,,,Anecdotal,comment,,,,,,,,2025-02-05,github/Kreynux,https://github.com/facebook/react/issues/30368#issuecomment-2637065650,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
"@eps1lon Any chance you'd be able to take a look at @vordgi's PR, #30718? This bug still exists in the latest canary build ([updated fork of your codesandbox](https://codesandbox.io/p/devbox/react-useformstatus-pending-reset-on-unrelated-state-update-forked-9k7vzr)) and is preventing me from being able to update to NextJS 15 and React 19. It looks like a pretty simple fix and there's a test included, but the PR went stale. I'm not able to get the workaround @jatwood mentioned to work either. Th…",,,,,,Anecdotal,comment,,,,,,,,2025-03-20,github/redbmk,https://github.com/facebook/react/issues/30368#issuecomment-2741103705,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
I can confirm that this bug exists. My workaround at the moment is using useActionState's pending state instead. But it would be great to get useFormStatus stay stable.,,,,,,Anecdotal,comment,,,,,,,,2025-04-23,github/rwieruch,https://github.com/facebook/react/issues/30368#issuecomment-2823920171,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
@eps1lon Any chance you could have a look at https://github.com/facebook/react/pull/33351? This issue is currently blocking us from upgrading to React 19 (we are still on the React 18 canary used by Next.js 14). I'd love to get it resolved.,,,,,,Anecdotal,comment,,,,,,,,2025-06-25,github/joshuajaco,https://github.com/facebook/react/issues/30368#issuecomment-3005795067,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
"This issue has been open for over a year and still impacts `useFormStatus` in a way that makes it nearly unusable. I've opened a [PR](https://github.com/facebook/react/pull/33351) that fixes it and it would really help to get some eyes on it. I understand the team is busy, but it's frustrating to see a critical issue go unaddressed for so long. cc @sebmarkbage @eps1lon @josephsavona @poteto @gaearon (Anyone, please)",,,,,,Anecdotal,comment,,,,,,,,2025-07-31,github/joshuajaco,https://github.com/facebook/react/issues/30368#issuecomment-3139088250,repo: facebook/react | issue: Bug: useFormStatus pending state is reset when component state is updated | keyword: workaround
"[DevTools Bug]: Firefox devtools extension doesn't work with React 19 ### Website or app https://vite.new/react ### Repro steps I am using React 19 for my project and when I tried to access the components and profiler in Firefox. I got the following message: ``` Unsupported React version detected This version of React DevTools supports React DOM v15+ and React Native v61+. In order to use DevTools with an older version of React, you'll need to [install an older version of the extension](https:/…",,,,,,Anecdotal,issue,,,,,,,,2025-04-09,github/shardul-b,https://github.com/facebook/react/issues/32836,repo: facebook/react | keyword: workaround | state: open
This could be related to: 1. https://github.com/facebook/react/issues/17033 2. https://github.com/facebook/react/issues/32771,,,,,,Anecdotal,comment,,,,,,,,2025-04-09,github/shardul-b,https://github.com/facebook/react/issues/32836#issuecomment-2789809474,repo: facebook/react | issue: [DevTools Bug]: Firefox devtools extension doesn't work with React 19 | keyword: workaround
"[Workaround](https://github.com/facebook/react/issues/32771#issuecomment-2944855034): > In the meantime you can use [this version of the React DevTools Firefox extension](https://github.com/facebook/react/actions/runs/14900631612/artifacts/3084173366)* via ""[Install Add-on from file](https://support.mozilla.org/en-US/kb/find-and-install-add-ons-add-features-to-firefox)"".",,,,,,Anecdotal,comment,,,,,,,,2025-06-05,github/zeorin,https://github.com/facebook/react/issues/32836#issuecomment-2945007375,repo: facebook/react | issue: [DevTools Bug]: Firefox devtools extension doesn't work with React 19 | keyword: workaround
"> [Workaround](https://github.com/facebook/react/issues/32771#issuecomment-2944855034): > > > In the meantime you can use [this version of the React DevTools Firefox extension](https://github.com/facebook/react/actions/runs/14900631612/artifacts/3084173366)* via ""[Install Add-on from file](https://support.mozilla.org/en-US/kb/find-and-install-add-ons-add-features-to-firefox)"". it is not working with firefox 115.24.0esr",,,,,,Anecdotal,comment,,,,,,,,2025-06-13,github/kn-92,https://github.com/facebook/react/issues/32836#issuecomment-2970113550,repo: facebook/react | issue: [DevTools Bug]: Firefox devtools extension doesn't work with React 19 | keyword: workaround
"(I'm assuming that ""not working"" in your case means that you're not able to install it). The CI artifacts are unsigned. For security reasons Firefox doesn't allow you to install unsigned extensions. You can either [sign it yourself](https://support.mozilla.org/en-US/kb/add-on-signing-in-firefox), or switch to using Firefox Developer Edition, which does allow you to install unsigned extensions.",,,,,,Anecdotal,comment,,,,,,,,2025-06-13,github/zeorin,https://github.com/facebook/react/issues/32836#issuecomment-2970221035,repo: facebook/react | issue: [DevTools Bug]: Firefox devtools extension doesn't work with React 19 | keyword: workaround
"> (I'm assuming that ""not working"" in your case means that you're not able to install it). > > The CI artifacts are unsigned. For security reasons Firefox doesn't allow you to install unsigned extensions. You can either [sign it yourself](https://support.mozilla.org/en-US/kb/add-on-signing-in-firefox), or switch to using Firefox Developer Edition, which does allow you to install unsigned extensions. I am sorry for not being precised. What I ment by saying ""not working"" was that this version of …",,,,,,Anecdotal,comment,,,,,,,,2025-06-13,github/kn-92,https://github.com/facebook/react/issues/32836#issuecomment-2970482124,repo: facebook/react | issue: [DevTools Bug]: Firefox devtools extension doesn't work with React 19 | keyword: workaround
"Ah I see. I'm afraid I can't help with that. Firefox Developer Edition can be installed alongside other versions, though.",,,,,,Anecdotal,comment,,,,,,,,2025-06-13,github/zeorin,https://github.com/facebook/react/issues/32836#issuecomment-2970654456,repo: facebook/react | issue: [DevTools Bug]: Firefox devtools extension doesn't work with React 19 | keyword: workaround
"Thanks for the workaround. I'm curious if there's a potential (even ballpark) ETA on this. Looks like it's been in unconfirmed status for roughly 16 weeks. I'm experiencing the same issue. TIA **EDIT**: Nevermind, appears to be a duplicate with active handling on https://github.com/facebook/react/issues/32771",,,,,,Anecdotal,comment,,,,,,,,2025-07-29,github/SteveSonoa,https://github.com/facebook/react/issues/32836#issuecomment-3133641386,repo: facebook/react | issue: [DevTools Bug]: Firefox devtools extension doesn't work with React 19 | keyword: workaround
Bug: Using custom elements with createPortal() in a documentPictureInPicture window is failing <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> Trying to use a custom element with createPortal() in a new documentPictureInPicture window is failing with an error. React version: 19.1.0 ## Steps To Reproduce 1. Create a doc…,,,,,,Anecdotal,issue,,,,,,,,2025-07-13,github/derwebcoder,https://github.com/facebook/react/issues/33783,repo: facebook/react | keyword: workaround | state: open
"Hey @derwebcoder , I ran into the same issue and found out what’s causing it. Basically, the problem happens because when we use createPortal() with a documentPictureInPicture window, React is still creating the elements using the main document, not the new window’s document. In the non-React example, it works because pipWindow.document.createElement() is used directly — so the element is created in the right document. But React doesn’t automatically know it should use the PiP window’s document…",,,,,,Anecdotal,comment,,,,,,,,2025-07-14,github/inject3r,https://github.com/facebook/react/issues/33783#issuecomment-3068253417,repo: facebook/react | issue: Bug: Using custom elements with createPortal() in a documentPictureInPicture window is failing | keyword: workaround
"Thank you @inject3r, that's a good idea I didn't think of yet. Though I also can't get it to work, see my try at https://codesandbox.io/p/devbox/amazing-wilbur-ll62kc I might be missing something?",,,,,,Anecdotal,comment,,,,,,,,2025-07-14,github/derwebcoder,https://github.com/facebook/react/issues/33783#issuecomment-3070776130,repo: facebook/react | issue: Bug: Using custom elements with createPortal() in a documentPictureInPicture window is failing | keyword: workaround
"Hey @derwebcoder 👋 — thanks for reporting and explaining this issue so clearly! I came across your sandbox and was wondering if you're still exploring a fix or workaround for this? From what I understand, the core problem is that `ReactDOM.createPortal` tries to create elements in the main document, which breaks when trying to insert into the `documentPictureInPicture` window. One possible workaround is to create a separate React root directly inside the PiP window so that the DOM context stays…",,,,,,Anecdotal,comment,,,,,,,,2025-07-29,github/Shonferns004,https://github.com/facebook/react/issues/33783#issuecomment-3133483719,repo: facebook/react | issue: Bug: Using custom elements with createPortal() in a documentPictureInPicture window is failing | keyword: workaround
"[React 19] Bug: `cloneElement` in client component with async server component as children not working React version: 19 ## Steps To Reproduce 1. Clone the reproduction 2. `npm i` 3. `npm run dev` 4. Open http://localhost:3000/ and observe error Link to code example: https://github.com/darthmaim-reproductions/vercel-next.js-72034 ## The current behavior When using `cloneElement` in a client component, and the children is an async server component, this error is thrown: > Error: Element type is …",,,,,,Anecdotal,issue,,,,,,,,2025-02-15,github/darthmaim,https://github.com/facebook/react/issues/32392,repo: facebook/react | keyword: workaround | state: open
"Hey @darthmaim, Thanks for reporting this issue! It seems like React 19 handles async server components differently when passed as children to `cloneElement`. Given that in React 18, the component was recognized as `<Lazy/>` in dev tools but now appears as `{ $$typeof: Symbol(react.lazy) }`, this suggests a potential change in how React processes async components internally. Your workaround using: if (children.$$typeof === Symbol.for('react.lazy')) { children = use(children._payload); } suggest…",,,,,,Anecdotal,comment,,,,,,,,2025-02-15,github/umeshyadav7988,https://github.com/facebook/react/issues/32392#issuecomment-2660981194,repo: facebook/react | issue: [React 19] Bug: `cloneElement` in client component with async server component as children not working | keyword: workaround
"Hey @jlking18333 / @umeshyadav7988, please contact GitHub support to sort out your account issues, this is the react repository.",,,,,,Anecdotal,comment,,,,,,,,2025-02-17,github/darthmaim,https://github.com/facebook/react/issues/32392#issuecomment-2663237143,repo: facebook/react | issue: [React 19] Bug: `cloneElement` in client component with async server component as children not working | keyword: workaround
"Chiming in just to say that the workaround works great but is a bit cumbersome when you have a LOT of server/client inter-dependencies 🥲. If it's by design, maybe `use` should be called directly by `cloneElement`. And at the very least, all of this should be documented in the 18 -> 19 migration docs 😔",,,,,,Anecdotal,comment,,,,,,,,2025-05-12,github/dackmin,https://github.com/facebook/react/issues/32392#issuecomment-2871544012,repo: facebook/react | issue: [React 19] Bug: `cloneElement` in client component with async server component as children not working | keyword: workaround
"~~FYI, the workaround stopped working for me in some specific cases with Next.js 15.3.1 (see https://github.com/vercel/next.js/issues/72034#issuecomment-2862840715).~~ Edit: The workaround started working again with Next.js 15.3.3",,,,,,Anecdotal,comment,,,,,,,,2025-05-12,github/darthmaim,https://github.com/facebook/react/issues/32392#issuecomment-2871656568,repo: facebook/react | issue: [React 19] Bug: `cloneElement` in client component with async server component as children not working | keyword: workaround
cloneElement is basically soft deprecated. It works against any ability to optimize by inlining. One form of inlining is Server Components so it's hard for the client to see what it observes.,,,,,,Anecdotal,comment,,,,,,,,2025-07-29,github/sebmarkbage,https://github.com/facebook/react/issues/32392#issuecomment-3133110279,repo: facebook/react | issue: [React 19] Bug: `cloneElement` in client component with async server component as children not working | keyword: workaround
"Bug: Hydration mismatch error due to plugins generating script tag on top <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> React version: 18.0.0, 18.1.0-next-fc47cb1b6-20220404 (latest version in codesandbox) ## Steps To Reproduce 1. Install a plugin that creates a script tag at the top(ex: [Apollo Client Devtools](http…",,,,,,Anecdotal,issue,,,,,,,,2022-04-24,github/yongdamsh,https://github.com/facebook/react/issues/24430,repo: facebook/react | keyword: workaround | state: open
"Might be related to (or same as) https://github.com/facebook/react/issues/22833, but let's keep both open for now",,,,,,Anecdotal,comment,,,,,,,,2022-04-24,github/gaearon,https://github.com/facebook/react/issues/24430#issuecomment-1107692200,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Is the `hydrateRoot` function expecting the whole html document to be exactly what gets rendered by `renderToPipeableStream`? The best would be to just try to hydrate the React root element where the app is rendered? It does seem that to use `renderToPipeableStream` I need to render the whole HTML document with a React component, but this is not ideal when e.g. using Vite with SSR in development, since it needs to transform the html to inject custom scripts.",,,,,,Anecdotal,comment,,,,,,,,2022-04-24,github/marcusthelin,https://github.com/facebook/react/issues/24430#issuecomment-1107917525,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"From my understanding, if anything else other than document was passed in into hydrateRoot, it doesn't seem to crash when I have chrome extensions that modify the DOM installed (e.g. Dark Reader / Apollo DevTools). Here is the code sandbox: https://codesandbox.io/s/react-18-root-div-hydrateroot-1f5d5q?file=/src/Html.js:193-941 In the above example, I changed the following: Html.js ```diff export default function Html({ assets, children, title }) { return ( <html lang=""en""> <head> <meta charSet=…",,,,,,Anecdotal,comment,,,,,,,,2022-04-25,github/hrgui,https://github.com/facebook/react/issues/24430#issuecomment-1108058368,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
I don’t think the “stricter” behavior here is intentional. I’ll be checking with the team but my current understanding is that this is a bug.,,,,,,Anecdotal,comment,,,,,,,,2022-04-25,github/gaearon,https://github.com/facebook/react/issues/24430#issuecomment-1108499455,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Something I've noticed is that when React does encounter a hydration mismatch, it attempts to fallback to client side rendering. Which does show up in the example codesandbox (the one where we are hydrating the document): ``` Warning: An error occurred during hydration. The server HTML was replaced with client content in <#document>. ``` ``` Uncaught Error: There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client render…",,,,,,Anecdotal,comment,,,,,,,,2022-04-30,github/hrgui,https://github.com/facebook/react/issues/24430#issuecomment-1113895118,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Yes, that issue is https://github.com/facebook/react/issues/22833. I believe the fix we wanted to do is changing which top-level element we modify. (Maybe body instead of html?) It would be nice to not have to introduce a separate “host config” method (which we’d have to do if we added a call to “replace”). So ideally the fix should use the methods we already use.",,,,,,Anecdotal,comment,,,,,,,,2022-04-30,github/gaearon,https://github.com/facebook/react/issues/24430#issuecomment-1113991200,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Not an ideal solution but in my use case, I'm only concerned with generating/modifying the `head` during SSR, and the following hack allows me to work around errors that occur as the result of modifications to the `head` outside of React by Cypress, various chrome plugins, etc. ```typescript const Head: React.FC = () => { if (globalThis.document?.head) { return ( <head dangerouslySetInnerHTML={{ __html: document.head.innerHTML }} /> ); } return ( <head> {/* ... Do important things on the server…",,,,,,Anecdotal,comment,,,,,,,,2022-05-19,github/rdadoune,https://github.com/facebook/react/issues/24430#issuecomment-1132209213,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"I think I have the same error. But mine is from using styled-components. Initially, they put a style tag in the body, but then the style tag gets moved up to the head. You can check this repo here: https://github.com/adbutterfield/fast-refresh-express/tree/react-18 I tried just now using react@next/react-dom@next, but I still get the error. Of course, it's always possible that I'm doing something stupid in my code...",,,,,,Anecdotal,comment,,,,,,,,2022-06-03,github/adbutterfield,https://github.com/facebook/react/issues/24430#issuecomment-1145516329,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"I tried React 18.2.0, but it still breaks the page when Apollo Client DevTools extension is used. So my _ugly_ solution for this problem is fix the DOM before `hydrateRoot`: ```js document.querySelectorAll('html > script').forEach((s) => { s.parentNode.removeChild(s); }); const root = hydrateRoot( document, <React.StrictMode> <AppWithFullDocument /> </React.StrictMode>, ); ``` Note: You can replace the selector more strict query .. e.g. `'html > script[src^=chrome-extension]'` (remix-run/remix#…",,,,,,Anecdotal,comment,,,,,,,,2022-06-15,github/Mordred,https://github.com/facebook/react/issues/24430#issuecomment-1156537554,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Getting the issue with Cypress tests, as suggested in Remix Discord, my workaround for those coming here: ```jsx if (process.env.NODE_ENV === 'test') { require('react-dom').hydrate(<RemixBrowser />, document); } else { hydrateRoot(document, <RemixBrowser />); } ``` 🙏 for a fix soon, thx all!",,,,,,Anecdotal,comment,,,,,,,,2022-06-21,github/dbashford,https://github.com/facebook/react/issues/24430#issuecomment-1162415060,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
@dbashford Which in particular issue are you hitting? We’ve released a short-term fix for the most urgent part of the problem in 18.2 (document fallback didn’t work at all). Now it should work by doing a full client render but this will lose the third party things. There is a possible fix to do something smarter but it’s a bigger project and a bit further on the timeline. So it would help to know what exactly broke for you. Is there a repro? Particular scenario? Thanks.,,,,,,Anecdotal,comment,,,,,,,,2022-06-22,github/gaearon,https://github.com/facebook/react/issues/24430#issuecomment-1162484233,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Mine is the Cypress case. Everything works fine in dev and in prod, but Cypress when it kicks up fails (418), and only after making the `hydrateRoot` switch. I haven't dug into it too far to really understand the problem, but I've read in this thread and in the Remix discord that the problem may be that Cypress monkey's with the head causing the hydration issue. I admit that SSR/hydration are still voodoo/witchcraft to me, so I'm struggling a bit to work my way through it. Baby steps.",,,,,,Anecdotal,comment,,,,,,,,2022-06-22,github/dbashford,https://github.com/facebook/react/issues/24430#issuecomment-1162498538,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Hey @Mordred thanks a lot for this quick hack, I modified it slightly to also get rid of `input`s within `html` as the Yoroi extensions injects a hidden input directly into the `<html/>` (not `<body/>`) ```ts document.querySelectorAll(""html > script, html > input"").forEach((s) => { s.parentNode?.removeChild(s); }); ``` > Using this now in my [Remix Deno Stack](https://github.com/CanRau/remix-new-age-stack) with Streaming 🥳",,,,,,Anecdotal,comment,,,,,,,,2022-06-22,github/CanRau,https://github.com/facebook/react/issues/24430#issuecomment-1162514926,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Nevermind this, was local NODE_ENV issue (cypress issue above is still a problem, though) ~~Also having issues with google analytics writing script tags to the head~~ <img width=""1127"" alt=""image"" src=""https://user-images.githubusercontent.com/581127/175034712-1ecc43a7-00cd-4f67-b1fd-7159e2309d51.png""> ~~In this case `/blog/gtag` pulls in the tag manager snippet...~~ ~~Google tag manager starts adding scripts to the head, like google-analytics, and things go sideways from there. I've got micros…",,,,,,Anecdotal,comment,,,,,,,,2022-06-22,github/dbashford,https://github.com/facebook/react/issues/24430#issuecomment-1163074335,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
@dbashford Can you share a minimal project? It always helps to have concrete examples to check fixes against. This goes for everyone else too.,,,,,,Anecdotal,comment,,,,,,,,2022-06-22,github/gaearon,https://github.com/facebook/react/issues/24430#issuecomment-1163151481,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"@gaearon Can call off the dogs on that latest comment, was something I introduced myself while trying to debug a real hydration issue with dates. The Cypress issue is still a problem, that's all local and consistent. I'll work to get a repro up over the next few weeks when I get a second.",,,,,,Anecdotal,comment,,,,,,,,2022-06-22,github/dbashford,https://github.com/facebook/react/issues/24430#issuecomment-1163453345,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"I just updated my repo with some instructions to more easily reproduce the issue, and test that it works when not using styled components. See here: https://github.com/adbutterfield/fast-refresh-express/tree/react-18",,,,,,Anecdotal,comment,,,,,,,,2022-06-24,github/adbutterfield,https://github.com/facebook/react/issues/24430#issuecomment-1165167168,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Hi @gaearon I have a repro repo for the hydration errors with cypress. It's not exactly ""minimal"", it's a freshly-created [Remix grunge stack](https://github.com/remix-run/grunge-stack) app, which has quite a bit of stuff in it. Here it is: https://github.com/camjackson/remix-cypress-error. Here are the steps to repro the error locally: 1. `git clone git@github.com:camjackson/remix-cypress-error.git` 2. `cd remix-cypress-error` 3. `yarn` 4. `yarn test:e2e:run` The test will fail with a hydratio…",,,,,,Anecdotal,comment,,,,,,,,2022-06-25,github/camjackson,https://github.com/facebook/react/issues/24430#issuecomment-1166181328,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
I have replicated same behaviour - it can be replicated anywhere with `hydrateRoot` with any Chrome extension that injects the script. It then switches to client-side rendering. `Uncaught Error: Hydration failed because the initial UI does not match what was rendered on the server.`,,,,,,Anecdotal,comment,,,,,,,,2022-06-26,github/BleedingDev,https://github.com/facebook/react/issues/24430#issuecomment-1166648049,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
it's also preventing loom (extension) to work as the extension add a to the dom. Seems like it just break any extension that update the dom and having a workaround every potential extension is going to be a nightmare fix for loom ``` document.querySelectorAll('loom-container').forEach((s) => { s.parentNode.removeChild(s); }); ``` additionally this also cause warning if the extension is adding attributes like this one with colorzilla ![image](https://user-images.githubusercontent.com/15112753/17…,,,,,,Anecdotal,comment,,,,,,,,2022-06-27,github/0Lucifer0,https://github.com/facebook/react/issues/24430#issuecomment-1166982437,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Also causing issue with LastPass, can confirm Loom as well, causing issues across multiple plugins for us.",,,,,,Anecdotal,comment,,,,,,,,2022-10-31,github/dbashford,https://github.com/facebook/react/issues/24430#issuecomment-1297765994,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Apart from extensions, this issue is affecting libraries that hot load scripts or styles on bootstrapping. In [Clerk](https://clerk.dev/) we use this technique to ensure that users of Clerk-powered applications always have the latest fixes in their authentication components. A workaround is to delay the hot loading of the components code on the client side. Unfortunately, this is not acceptable for authentication as it will increase the necessary load time before the user is able to interact wi…",,,,,,Anecdotal,comment,,,,,,,,2022-11-01,github/SokratisVidros,https://github.com/facebook/react/issues/24430#issuecomment-1298798791,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Still an issue for react apps that render full document. If anyone is using browser extension that injects scripts during the page load, there is an hydration error occuring. Is it safe to use hydrate instead of hydrateRoot, since someone mentioned that it is working with react-dom hydrate as intended.",,,,,,Anecdotal,comment,,,,,,,,2022-11-21,github/dejanr,https://github.com/facebook/react/issues/24430#issuecomment-1321863484,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Happening with Grammarly and Vimeo Recorder too 😞 If I disable LastPass, and the other two, it's fine.",,,,,,Anecdotal,comment,,,,,,,,2022-12-08,github/kamranayub,https://github.com/facebook/react/issues/24430#issuecomment-1342930749,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"This problem makes me unable to use Remix framework normally. Although we know that disabling Chrome extensions can solve the problem, we cannot ask our users to disable Chrome extensions. However, many Chrome extensions will inject content into Html documents now, so I wonder when the authorities will pay attention to this problem?",,,,,,Anecdotal,comment,,,,,,,,2022-12-14,github/Ryongyon,https://github.com/facebook/react/issues/24430#issuecomment-1350786492,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
@gaearon It looks like the problem appears only when u try to stream html into `document` because of additional scripts from browser extensions. So when I tried to stream the app in the `div#root` it really worked fine and solved all hydration issues (because now hydration only work on our div#root which doesn't have any extra browser scripts etc..). This is the [working code example (branch: feat/stream)](https://github.com/denchiklut/ssr-boilerplate/blob/feat/stream/src/server/middleware/rend…,,,,,,Anecdotal,comment,,,,,,,,2022-12-26,github/denchiklut,https://github.com/facebook/react/issues/24430#issuecomment-1365033132,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
I was able to resolve my issue by invoking [`clearBrowserExtensionInjectionsBeforeHydration()`](https://gist.github.com/OnurGvnc/31f03f0d5237b78224aa083493fda645#file-clearbrowserextensioninjectionsbeforehydration-ts-L5-L40) prior to executing `hydrateRoot()`. https://gist.github.com/OnurGvnc/31f03f0d5237b78224aa083493fda645,,,,,,Anecdotal,comment,,,,,,,,2023-01-13,github/OnurGvnc,https://github.com/facebook/react/issues/24430#issuecomment-1381601899,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
> I was able to resolve my issue by invoking [`clearBrowserExtensionInjectionsBeforeHydration()`](https://gist.github.com/OnurGvnc/31f03f0d5237b78224aa083493fda645#file-clearbrowserextensioninjectionsbeforehydration-ts-L5-L40) prior to executing `hydrateRoot()`. https://gist.github.com/OnurGvnc/31f03f0d5237b78224aa083493fda645 Yeah it's not really a good fix as it just remove all the potential dom changes... Still useful as a temp fix until better solution... not sure why this bug is still tagg…,,,,,,Anecdotal,comment,,,,,,,,2023-01-13,github/0Lucifer0,https://github.com/facebook/react/issues/24430#issuecomment-1381698561,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"Hi, still having issues with this ... I saw/read a lot of issues and did not see a universal solution (if there is one) ... maybe someone can help me with an answer? Also on a side note... not sure it is related but I have CSS flickers and not sure if is related to this or not. Thanks.",,,,,,Anecdotal,comment,,,,,,,,2023-01-13,github/Mihai-github,https://github.com/facebook/react/issues/24430#issuecomment-1381708085,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"> Hi, still having issues with this ... I saw/read a lot of issues and did not see a universal solution (if there is one) ... maybe someone can help me with an answer? Also on a side note... not sure it is related but I have CSS flickers and not sure if is related to this or not. > > Thanks. Same for the css flickers not sure why. I don’t think it’s related as I didn’t use to have it it appeared recently",,,,,,Anecdotal,comment,,,,,,,,2023-01-13,github/erwan-joly,https://github.com/facebook/react/issues/24430#issuecomment-1381735538,repo: facebook/react | issue: Bug: Hydration mismatch error due to plugins generating script tag on top | keyword: workaround
"[compiler] RFC: Add reactiveSourceIdentifiers option <!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory. Before submitting a pull request, please make sure the following is done: 1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`. 2. Run `yarn` in the repository root. 3. If you've fix…",,,,,,Anecdotal,issue,,,,,,,,2025-08-18,github/paulshen,https://github.com/facebook/react/pull/34231,repo: facebook/react | keyword: workaround | state: closed
"Thanks for your interest in contributing! Before proceeding with a fix, the first step is to align on what problem you're trying to solve. We're aware that Mobx is incompatible with memoization in React (and by extension React Compiler). The approach here does not scale, since Mobx values can have arbitrary names. We'd need to understand more specifically the exact scenarios you're running into in order to discuss a possible remediation.",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/josephsavona,https://github.com/facebook/react/pull/34231#issuecomment-3198802596,repo: facebook/react | issue: [compiler] RFC: Add reactiveSourceIdentifiers option | keyword: workaround
"@josephsavona Thanks for quick reply! Really appreciate it. We have an in-house signals library (that currently uses mobx internally but is an implementation detail). We'd like to get the best of both worlds of signals and React compiler 😄 To use signals inside React components, we currently have a `useObserve` hook. This works out of box with React compiler because hooks are a source of reactivity. All signal reads must occur inside `useObserve`. ```tsx function MyComponent() { const value = u…",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/paulshen,https://github.com/facebook/react/pull/34231#issuecomment-3199107861,repo: facebook/react | issue: [compiler] RFC: Add reactiveSourceIdentifiers option | keyword: workaround
"Thanks for expanding on the use-case. React Compiler is designed to support applications that follow the Rules of React. We understand that these rules were not fully or precisely documented prior to building the compiler, but fundamentals like immutability have been something we've talked about since React's earliest days (we even open-sourced the `immutable` library) and the majority of libraries either already conform to these rules or can conform with reasonable changes. For example, Mobx b…",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/josephsavona,https://github.com/facebook/react/pull/34231#issuecomment-3202017133,repo: facebook/react | issue: [compiler] RFC: Add reactiveSourceIdentifiers option | keyword: workaround
Appreciate the thoughtful response and understand not supporting unintended use patterns. The non-signals use case still is an issue (using `use` inside a non-hook). [Playground link](https://playground.react.dev/#N4Igzg9grgTgxgUxALhAMygOzgFwJYSYAEAsgJ4DCEAtgA6EKY4AUwRUYCMAkgCZEBfAJRFgAHWJEANghztOMIgF4iAc1kBVBcw5c+QgNwSiRGLNjEAPLzwA3AHzBdMAZYD0Nh0cwCJEjNj4hGqa2s76osam5jDEusxaXFRMCAAeOEIA2uG8ALreAiACQA) Is it okay to call `use` within non-hook (ie `useXXX`) functions? Maybe `getUser` should be `…,,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/paulshen,https://github.com/facebook/react/pull/34231#issuecomment-3202405151,repo: facebook/react | issue: [compiler] RFC: Add reactiveSourceIdentifiers option | keyword: workaround
"[Compiler Bug]: Compiler fails to memoize hooks with no hook calls ### What kind of issue is this? - [ ] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [X] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repro https://github.…",,,,,,Anecdotal,issue,,,,,,,,2024-12-10,github/billyjanitsch,https://github.com/facebook/react/issues/31727,repo: facebook/react | keyword: workaround | state: closed
"Thanks for reporting @billyjanitsch. As you observed, currently the compiler only optimizes functions that look to contain react code (such as hook calls or JSX) <img width=""500"" alt=""image"" src=""https://github.com/user-attachments/assets/1e5e35b7-e858-427c-9264-58e71b22fe93"" /> We know that this isn't a perfect heuristic -- internally, we use [Flow's component and hook syntax](https://flow.org/en/docs/react/component-syntax/) which unambiguously indicates which functions are eligible for optim…",,,,,,Anecdotal,comment,,,,,,,,2024-12-16,github/mofeiZ,https://github.com/facebook/react/issues/31727#issuecomment-2546787291,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
"@mofeiZ Sure! Building off of the general case that I mentioned: >I understand that it generally doesn't make sense to write a custom hook that doesn't use any other hooks, but the exception is when the custom hook would have used only useMemo and/or useCallback, such as useBaz. I expect the compiler to let me remove those hooks without losing memoization. Here are some simplified concrete examples of hooks that only use `useCallback` and/or `useMemo`: ```tsx function useMergedRefs(refA, refB) …",,,,,,Anecdotal,comment,,,,,,,,2024-12-16,github/billyjanitsch,https://github.com/facebook/react/issues/31727#issuecomment-2547117189,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
"I see, you're moving code out of your component / custom hook body, and you'd like React Compiler to apply the same granular memoization to it. The main issue with loosening the heuristic is that false positives currently error at runtime (producing an error like reported in #31802). There are two approaches you could take here: 1. Rename your custom hook-named functions to non-hook names. This will let the compiler memoize your code at the function callsite (within the function body of a hook …",,,,,,Anecdotal,comment,,,,,,,,2024-12-26,github/mofeiZ,https://github.com/facebook/react/issues/31727#issuecomment-2563175254,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
"The code for the createFastHash function currently uses MD5. To replace MD5 with SHA-256, we can modify the function to use the sha256 algorithm instead. Here's the updated code: import {createHash} from 'crypto'; // Other imports and code... export function createFastHash(input: string): string { const hash = createHash('sha256'); hash.update(input); return hash.digest('hex'); } // Rest of the code...``",,,,,,Anecdotal,comment,,,,,,,,2024-12-27,github/anukaal,https://github.com/facebook/react/issues/31727#issuecomment-2563938218,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
"~@mofeiZ I think it wasn't mentioned here (or in the docs) that hooks need to be in a `.tsx` file to be memoizable?~ ~I'm seeing an issue where the compiler does not memoize hooks defined in `.ts` files.~ nvm, [it was nextjs](https://github.com/vercel/next.js/issues/78867).",,,,,,Anecdotal,comment,,,,,,,,2025-07-05,github/tusharsnx,https://github.com/facebook/react/issues/31727#issuecomment-3038267908,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
@tusharsnx the compiler should be targeting .ts files as well. Can you file a separate issue with more details on your setup?,,,,,,Anecdotal,comment,,,,,,,,2025-07-05,github/josephsavona,https://github.com/facebook/react/issues/31727#issuecomment-3038895213,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
@josephsavona [It was nextjs](https://github.com/vercel/next.js/issues/78867). Resolved after downgrading to `next@15.2`. Feel free to mark this 'off-topic'.,,,,,,Anecdotal,comment,,,,,,,,2025-07-05,github/tusharsnx,https://github.com/facebook/react/issues/31727#issuecomment-3039246401,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
"Following up here, applying optimizations to all functions that start with ""use"" could break code that isn't meant to be a hook. The existing heuristic is the best compromise we've found. I'm going to close for now.",,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/josephsavona,https://github.com/facebook/react/issues/31727#issuecomment-3201445573,repo: facebook/react | issue: [Compiler Bug]: Compiler fails to memoize hooks with no hook calls | keyword: workaround
"[Compiler Bug]: ""Ref values (the `current` property) may not be accessed during render"" but there is no value access ### What kind of issue is this? - [ ] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [x] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the hea…",,,,,,Anecdotal,issue,,,,,,,,2025-01-29,github/fdelu,https://github.com/facebook/react/issues/32261,repo: facebook/react | keyword: workaround | state: closed
"Thanks for posting about this. In this case, the compiler cannot know what the `renderVideo(videoRef)` call is doing. It doesn't know whether that function will access the `videoRef.current` or not, but realistically most such functions are likely to do so (if all you can do is store a reference to `videoRef` itself, then there's not much a helper function can do). Therefore, we report an error since you are likely violating the rule about accessing refs during render. I'll leave this open as a…",,,,,,Anecdotal,comment,,,,,,,,2025-01-29,github/josephsavona,https://github.com/facebook/react/issues/32261#issuecomment-2622207572,"repo: facebook/react | issue: [Compiler Bug]: ""Ref values (the `current` property) may not be accessed during render"" but there is no value access | keyword: workaround"
"> Thanks for posting about this. In this case, the compiler cannot know what the `renderVideo(videoRef)` call is doing. It doesn't know whether that function will access the `videoRef.current` or not, but realistically most such functions are likely to do so (if all you can do is store a reference to `videoRef` itself, then there's not much a helper function can do). Therefore, we report an error since you are likely violating the rule about accessing refs during render. > > I'll leave this ope…",,,,,,Anecdotal,comment,,,,,,,,2025-01-30,github/fdelu,https://github.com/facebook/react/issues/32261#issuecomment-2624276959,"repo: facebook/react | issue: [Compiler Bug]: ""Ref values (the `current` property) may not be accessed during render"" but there is no value access | keyword: workaround"
"Thanks again for reporting! Note that you can now pass refs to functions if their result is directly interpolated into JSX, so the original `<div>{renderVideo(ref)}</div>` call is now allowed in your example. There's a different issue where the compiler thinks a value is getting mutated and it can't preserve memoization, but the original ref issue is fixed. I'll leave this open because the example seems like it should compile. https://github.com/facebook/react/pull/34006 for the ref fix though.",,,,,,Anecdotal,comment,,,,,,,,2025-07-29,github/josephsavona,https://github.com/facebook/react/issues/32261#issuecomment-3133712895,"repo: facebook/react | issue: [Compiler Bug]: ""Ref values (the `current` property) may not be accessed during render"" but there is no value access | keyword: workaround"
I'm moving the memoization issue to #34232 and closing this since the ref thing is fixed. Thanks again for posting!,,,,,,Anecdotal,comment,,,,,,,,2025-08-19,github/josephsavona,https://github.com/facebook/react/issues/32261#issuecomment-3201438764,"repo: facebook/react | issue: [Compiler Bug]: ""Ref values (the `current` property) may not be accessed during render"" but there is no value access | keyword: workaround"
"Bug: element.current.scrollIntoView() not working as expected in chrome. Hey 🙋‍♂️ I have built a simple chatbot using react, and when the user sends a message i want to show the last message in the chatWindow component, so I used the following code: ```js useEffect( function () { if (lastmessageRef.current !== null) { lastmessageRef.current.scrollIntoView() } }, [lastmessageRef] ) ``` It works as expected in edge and Firefox, but on chrome it is behaving weird llink-to-the-chatbot: https://kart…",,,,,,Anecdotal,issue,,,,,,,,2022-03-02,github/karthik2265,https://github.com/facebook/react/issues/23396,repo: facebook/react | keyword: workaround | state: closed
"Note that `lastmessageRef` as a dependency won't do anything and can be removed. The effect won't fire if `lastmessageRef.current` changes. Could you include a video of the behavior in Firefox and Chrome and explain with words what's ""weird"" about this behavior? Also please include the exact version of those browsers and the operating system you're using. Bonus: Could you convert the repro into a codesandbox.io? Makes it easier to debug the issue.",,,,,,Anecdotal,comment,,,,,,,,2022-03-02,github/eps1lon,https://github.com/facebook/react/issues/23396#issuecomment-1056734057,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"I'm having the same problem. scrollIntoView api doesn't work inside useEffect, while it fires by onClick. Worth mentioning that it works in Firefox. Here is the code: ``` import React, { useEffect, useRef, useState } from 'react' import FirstPage from './components/FirstPage' import SecondPage from './components/SecondPage' import ThirdPage from './components/ThirdPage' import './App.css' const App = () => { const [atPage, setAtPage] = useState<number>(0) const refs = useRef<(null | HTMLDivElem…",,,,,,Anecdotal,comment,,,,,,,,2022-09-16,github/noviceGuru,https://github.com/facebook/react/issues/23396#issuecomment-1248978460,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"> I'm having the same problem. scrollIntoView api doesn't work inside useEffect, while it fires by onClick. Worth mentioning that it works in Firefox. Here is the code: > > ``` > import React, { useEffect, useRef, useState } from 'react' > import FirstPage from './components/FirstPage' > import SecondPage from './components/SecondPage' > import ThirdPage from './components/ThirdPage' > > import './App.css' > > const App = () => { > const [atPage, setAtPage] = useState<number>(0) > const refs = …",,,,,,Anecdotal,comment,,,,,,,,2022-09-26,github/vigneshvjay,https://github.com/facebook/react/issues/23396#issuecomment-1257673172,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"Come accross this issue with ``` React: 18.2.0 Chrome: Version 108.0.5359.125 (Official Build) (64-bit) FireFox Developer Edition 109.0b9 ``` , that `element.current.scrollIntoView` works in FF but not in Chrome, is there any progress?",,,,,,Anecdotal,comment,,,,,,,,2023-01-08,github/ValenW,https://github.com/facebook/react/issues/23396#issuecomment-1374692884,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"I had the same problem So I solved this by using setTimeout. (The flicker looks weird, but it works.) ``` // move to todo post useEffect(() => { ... const timer = setTimeout(() => { const todoPost = document.querySelector(`[data-post=""${selectedTodoPost}""]`); if (!todoPost) { return; } todoPost.scrollIntoView({ block: 'center' }); }, 500); return () => clearTimeout(timer); }, [...]); ```",,,,,,Anecdotal,comment,,,,,,,,2023-01-10,github/hwangyena,https://github.com/facebook/react/issues/23396#issuecomment-1376887787,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"@hwangyena cool little thing I found out -- you can do what you did `setTimeout(..., 0)` and it works as well without delay, at least in my use case. It's basically just a trick to defer until next tick in JS.",,,,,,Anecdotal,comment,,,,,,,,2023-02-03,github/jalexy12,https://github.com/facebook/react/issues/23396#issuecomment-1414567176,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"I had the same problem and managed to fix it by using the `scroll` [method](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll) for the parent node instead of `scrollIntoView` for the children node: ``` const ref = useRef<HTMLDivElement>(null); useEffect(() => { const scrollToTheBottom = () => { const scrollEl = ref.current; scrollEl?.scroll({ top: scrollEl?.scrollHeight, behavior: 'smooth', }); }; scrollToTheBottom(); }, []); return ( <Wrap> <Scroll ref={ref}> <MessageGroup messag…",,,,,,Anecdotal,comment,,,,,,,,2023-02-09,github/eugenegodun,https://github.com/facebook/react/issues/23396#issuecomment-1424301408,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"The problem doesn't seem to be limited to `lastmessageRef.current` if you fetch the component by ID, it also does not work on chrome, but works fine in firefox.",,,,,,Anecdotal,comment,,,,,,,,2023-02-10,github/danielo515,https://github.com/facebook/react/issues/23396#issuecomment-1425717920,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"Not working in Electron 19 (Chromium) This was working in React 16, I've since updated the project to React 18",,,,,,Anecdotal,comment,,,,,,,,2023-02-26,github/ajoslin103,https://github.com/facebook/react/issues/23396#issuecomment-1445503052,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"For me it works if I remove the `behavior: 'smooth',` prop, however, I really want the smooth scrolling behaviour :(",,,,,,Anecdotal,comment,,,,,,,,2023-03-06,github/pjm4,https://github.com/facebook/react/issues/23396#issuecomment-1456538386,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"@pjm4 Yeah, that was the case for me as well. This is what I did as a workaround: ```js const [shouldScrollToRow, setShouldScrollToRow] = useState(false); useEffect(() => { if (shouldScrollToRow) { setTimeout(() => { elemRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' }); }, 100); setShouldScrollToRow(false); } }, [shouldScrollToRow]); useEffect(() => { // Listening for items getting added if (itemsUpdated) { setShouldScrollToRow(true); setItemsUpdated(false); } // eslint-disable…",,,,,,Anecdotal,comment,,,,,,,,2023-03-08,github/subhamayd2,https://github.com/facebook/react/issues/23396#issuecomment-1460074001,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"A workaround I've found it to use `window.requestAnimationFrame`: ``` useEffect(() => { if (itemsUpdated) { window.requestAnimationFrame(() => elRef.current?.scrollIntoView() ) } }, []) ```",,,,,,Anecdotal,comment,,,,,,,,2023-05-12,github/jordanl17,https://github.com/facebook/react/issues/23396#issuecomment-1545962611,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
Just wanted to shed some light into this issue and why it can probably be closed. This has nothing to do with react. This is a problem that is related to the chromium implementation of the `scrollIntoView` method. There's been some open issues for a long time in the chromium project regarding this issue. https://bugs.chromium.org/p/chromium/issues/detail?id=1121151 https://bugs.chromium.org/p/chromium/issues/detail?id=1043933 https://bugs.chromium.org/p/chromium/issues/detail?id=833617 So from …,,,,,,Anecdotal,comment,,,,,,,,2023-05-22,github/mateussilva92,https://github.com/facebook/react/issues/23396#issuecomment-1557694564,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"Thanks for the digging and, I always wanted a one-trick pony! This shows up at just the right time! Cheers!",,,,,,Anecdotal,comment,,,,,,,,2023-05-23,github/ajoslin103,https://github.com/facebook/react/issues/23396#issuecomment-1559136400,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"I ended up creating my own helper function. ``` export const smoothScroll = (targetY: number, duration: number) => { const startingY = window.pageYOffset; const diff = targetY - startingY; let start: number; window.requestAnimationFrame(function step(timestamp) { if (!start) start = timestamp; const time = timestamp - start; const percent = Math.min(time / duration, 1); window.scrollTo(0, startingY + diff * percent); if (time < duration) { window.requestAnimationFrame(step); } }); } ``` To call…",,,,,,Anecdotal,comment,,,,,,,,2023-09-28,github/bn1ck,https://github.com/facebook/react/issues/23396#issuecomment-1739885639,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"IMO almost all the answers above are not correct. You are trying to invoke scrolling in `Effect` but it should be done in `LayoutEffect`. Function inside effect executes in parallel to DOM update commits and in 99% it will be invoked **faster**. So normally real DOM (according to the vDOM built up with your render function) is not ready yet at that point of time. This is why ""workarounds"" using `setTimeout` work somehow. But [using `LayoutEffect` is more accurate](https://react.dev/reference/re…",,,,,,Anecdotal,comment,,,,,,,,2023-12-28,github/iuriikomarov,https://github.com/facebook/react/issues/23396#issuecomment-1870718915,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2024-04-10,github/github-actions[bot],https://github.com/facebook/react/issues/23396#issuecomment-2046827224,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
This is not fixed for sure. `behavior: 'smooth'` does work on FF but not on Chrome. I have codes to reproduce if you wish.,,,,,,Anecdotal,comment,,,,,,,,2024-04-17,github/hypo-thesis,https://github.com/facebook/react/issues/23396#issuecomment-2061068146,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"I want to add that the `useRef`, `useEffect` combo didn't work for me (no movement at all, because `elementRef.current` wasn't defined until after the effect had run). Instead, I updated to `useCallback`. ``` const elementRef = useCallback((domEl) => { if (domEl !== null ) { domEl.scrollIntoView({ behavior: 'smooth', }); } }, []); ... <div ref={elementRef} >...</div> ```",,,,,,Anecdotal,comment,,,,,,,,2024-04-25,github/missalyss,https://github.com/facebook/react/issues/23396#issuecomment-2078163812,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"Hello. After checking different scenarios, I also concluded that there is an issue with the way Chrome behaves with `scrollIntoView()` when you set the behavior to `smooth`. In my case, the scroll randomly stops at the start or middle of the scroll. A **temporary** solution for me would be to disable the smooth scroll for Chrome browsers. ``` const behavior = navigator.userAgent.includes('Chrome') ? 'auto' : 'smooth' ref.current?.scrollIntoView({ behavior: behavior, block: 'start' }) ```",,,,,,Anecdotal,comment,,,,,,,,2024-04-27,github/alexpeev9,https://github.com/facebook/react/issues/23396#issuecomment-2080451528,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"In my case I`ve encountered weird behavior with simple onPress event with window.scrollTo({ top: scrollRef.current.offsetTop, behavior: 'smooth' }); So I've wrapped this call with setTimeout 0ms and it fixed unexpected behavior (stops mid scroll) completely.",,,,,,Anecdotal,comment,,,,,,,,2024-06-24,github/Qnemes,https://github.com/facebook/react/issues/23396#issuecomment-2187281529,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"> Hello. > > After checking different scenarios, I also concluded that there is an issue with the way Chrome behaves with `scrollIntoView()` when you set the behavior to `smooth`. > > In my case, the scroll randomly stops at the start or middle of the scroll. A **temporary** solution for me would be to disable the smooth scroll for Chrome browsers. > > ``` > const behavior = navigator.userAgent.includes('Chrome') ? 'auto' : 'smooth' > ref.current?.scrollIntoView({ behavior: behavior, block: 'st…",,,,,,Anecdotal,comment,,,,,,,,2024-06-26,github/subzeta,https://github.com/facebook/react/issues/23396#issuecomment-2192361933,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
Any updates on this? I still seem to be getting this exact issue on Chrome. Removing `behaviour: smooth` works.,,,,,,Anecdotal,comment,,,,,,,,2024-09-02,github/satejbidvai,https://github.com/facebook/react/issues/23396#issuecomment-2324826336,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"> Any updates on this? > > I still seem to be getting this exact issue on Chrome. Removing `behaviour: smooth` works. You should probably look into related chrome issue instead. This is a chrome bug that has nothing to do with react. https://issues.chromium.org/issues/325081538 The recent comment says they are changing how smooth in to view smooth work in chrome, which may fix this issue.",,,,,,Anecdotal,comment,,,,,,,,2024-09-04,github/mmis1000,https://github.com/facebook/react/issues/23396#issuecomment-2328520987,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"Still not working for me in either Chrome or Firefox on desktop. I enclose an excerpt from some messaging functionality - users can open and close a chat window from a list of available conversations. The first time I open the window, the content appears but the window doesn't scroll. If I then close and reopen the window it works as intended, as does posting new text to the window. Note: The placement of scrollIntoView() is in two different places within these methods - this is intentionally d…",,,,,,Anecdotal,comment,,,,,,,,2024-09-21,github/scath999,https://github.com/facebook/react/issues/23396#issuecomment-2365263097,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"> Still not working for me in either Chrome or Firefox on desktop. > > I enclose an excerpt from some messaging functionality - users can open and close a chat window from a list of available conversations. > > The first time I open the window, the content appears but the window doesn't scroll. If I then close and reopen the window it works as intended, as does posting new text to the window. > > Note: The placement of scrollIntoView() is in two different places within these methods - this is i…",,,,,,Anecdotal,comment,,,,,,,,2024-12-02,github/Kodiererin,https://github.com/facebook/react/issues/23396#issuecomment-2511617042,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"In my use case, the following code snippet worked very well: ```javascript divRef.current?.scroll({ top: divRef.current?.scrollHeight, behavior: 'smooth' });",,,,,,Anecdotal,comment,,,,,,,,2024-12-05,github/JulioMacedo0,https://github.com/facebook/react/issues/23396#issuecomment-2520157922,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"`setTimeout` with `window.scrollTo` works better. ```ts useEffect(() => { if (itemsUpdated) { setTimeout(() => { window.scrollTo({ top: ref.current.offsetTop, }); }, 100); } }, [ itemsUpdated // when you needed ]); ```",,,,,,Anecdotal,comment,,,,,,,,2025-01-03,github/say8425,https://github.com/facebook/react/issues/23396#issuecomment-2568743034,repo: facebook/react | issue: Bug: element.current.scrollIntoView() not working as expected in chrome. | keyword: workaround
"Input type=""number"" fields don't call onChange <!-- Note: if the issue is about documentation or the website, please file it at: https://github.com/reactjs/reactjs.org/issues/new --> **Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** `<input type=""number"">` fields do not call onChange, and ignore their controlled value if text is entered into them. Upon a number being entered, they start to use onChange correctly. **What is the expected behavior?** I…",,,,,,Anecdotal,issue,,,,,,,,2019-08-23,github/CluEleSsUK,https://github.com/facebook/react/issues/16554,repo: facebook/react | keyword: workaround | state: closed
"Hey @CluEleSsUK, thanks for filing this! I had a question about your example: ```javascript function App(props) { return <input type=""number"" value={props.value} onChange={props.onChange} />; } const rootElement = document.getElementById(""root""); var value = """"; const onChange = event => { console.log(""onChange called""); value = event.target.value; }; ReactDOM.render(<App value={value} onChange={onChange} />, rootElement); ``` With this code, no state change occurs, so the controlled input does…",,,,,,Anecdotal,comment,,,,,,,,2019-08-23,github/nhunzaker,https://github.com/facebook/react/issues/16554#issuecomment-524355496,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"I'm running into the same issue as well, with both examples. I think the problem he's describing is that when you type in non-numeric characters in `<input type=""number""/>`, the input field is rendering with the characters being typed in, but the `onChange` function is not being called. `onChange` seems to only get called if the user types in a number In chrome, you can try typing characters like ""e"", ""E"", ""-"" etc. You can see the characters being added to the input, but `onChange` is not calle…",,,,,,Anecdotal,comment,,,,,,,,2019-08-23,github/canytra,https://github.com/facebook/react/issues/16554#issuecomment-524495473,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"Now that I look at it again, it looks like `input.value` (from the dom node) will be an empty string if the value in the input isn't a valid number. Since typing in just ""e"" is invalid, `input.value` doesn't change hence why `onChange` is not triggered. I'm guessing this is intentional",,,,,,Anecdotal,comment,,,,,,,,2019-08-24,github/canytra,https://github.com/facebook/react/issues/16554#issuecomment-524505415,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
Oops yes my example was a little buggy; I still get the same behaviour on your example however. I am using Firefox developer edition 69.0b16,,,,,,Anecdotal,comment,,,,,,,,2019-08-24,github/CluEleSsUK,https://github.com/facebook/react/issues/16554#issuecomment-524558870,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"Ah right. If I remember correctly, Chrome does not emit change events for invalid values. Characters like `e` and `-` are valid text entry for number inputs because they are associated with scientific notation and negative numbers. I believe we've hit this in the past, and there isn't anything we can do. For complete and utter control of the text, using an input with a type of `text` yields the best results. Still, I can check to make sure this is consistent with what we've hit in the past befo…",,,,,,Anecdotal,comment,,,,,,,,2019-08-25,github/nhunzaker,https://github.com/facebook/react/issues/16554#issuecomment-524590902,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"I have resorted to using a text field indeed, which was a nice easy workaround; perhaps this could be reflected somewhere in the docs though, just to save others time and heartache 🤡",,,,,,Anecdotal,comment,,,,,,,,2019-08-25,github/CluEleSsUK,https://github.com/facebook/react/issues/16554#issuecomment-524617179,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"@CluEleSsUK Usually reading the docs (not just React, but about HTML/JS too) helps to avoid such situations.",,,,,,Anecdotal,comment,,,,,,,,2019-08-26,github/miraage,https://github.com/facebook/react/issues/16554#issuecomment-524739690,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"@CluEleSsUK AFAIK there are also some issues with number input on Android systems (not sure if they are still present, but definitely there were issues in the past). So it totally makes sense to be aware of different nuances in order to save nerves during development 🙂",,,,,,Anecdotal,comment,,,,,,,,2019-08-26,github/miraage,https://github.com/facebook/react/issues/16554#issuecomment-524770250,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"There doesn’t seem to be much react can do here. I’m going to close this issue, but feel free to discuss",,,,,,Anecdotal,comment,,,,,,,,2019-08-26,github/threepointone,https://github.com/facebook/react/issues/16554#issuecomment-524797311,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"> I solved this issue by type=""tel"" this should be in the documentation 😄 saved me after hours of tries",,,,,,Anecdotal,comment,,,,,,,,2021-10-07,github/softwarenacho,https://github.com/facebook/react/issues/16554#issuecomment-938017179,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"> I solved this issue by type=""tel"" Thanks for sharing the solution! Saved me a lot of frustration.",,,,,,Anecdotal,comment,,,,,,,,2022-01-29,github/aelmi03,https://github.com/facebook/react/issues/16554#issuecomment-1024861333,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"Especially frustrating when wanting to type a float into an input without a leading zero: `.15` versus `0.15`, the latter firing onChange, the former does not",,,,,,Anecdotal,comment,,,,,,,,2023-02-14,github/shmup,https://github.com/facebook/react/issues/16554#issuecomment-1430187274,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"> I solved this issue by type=""tel"" Warning for the ones who are about to implement this: **It is against a11y rules! Number input should be number input.**",,,,,,Anecdotal,comment,,,,,,,,2023-03-17,github/kerematam,https://github.com/facebook/react/issues/16554#issuecomment-1473810246,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"I found this issue while searching online and it doesn't include a solution. **Do not use `type=""number""`.** It has too many inherent problems (including this one) that are native to the HTML spec and cannot be fixed. Use `type=""text"" inputmode=""numeric""` instead, or a variation. Read more here: https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/",,,,,,Anecdotal,comment,,,,,,,,2025-08-17,github/sam-k,https://github.com/facebook/react/issues/16554#issuecomment-3194033092,"repo: facebook/react | issue: Input type=""number"" fields don't call onChange | keyword: workaround"
"Make React resilient to DOM mutations from Google Translate ## Coming from search? See workaround here: https://github.com/facebook/react/issues/11538#issuecomment-417504600. And star this issue: https://bugs.chromium.org/p/chromium/issues/detail?id=872770. **Do you want to request a *feature* or report a *bug*?** Bug, though there's a decent chance it's a Chrome/Google Translate one **What is the current behavior?** When using Google Translate on a page using React 16, a certain code pattern p…",,,,,,Anecdotal,issue,,,,,,,,2017-11-13,github/fritz-c,https://github.com/facebook/react/issues/11538,repo: facebook/react | keyword: workaround | state: closed
We can also reproduce this bug on our own app. Thanks for the report. **Edit**: About the next comment: we also ended up applying this “fix”. It obviously hurts accessibility and users are still triggering this error by right clicking “Translate to X” on Chrome as this meta tag only removes the top-bar translation suggestion.,,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Tom-Bonnike,https://github.com/facebook/react/issues/11538#issuecomment-346581809,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I ""fixed"" my app for users running into this by disabling Chrome's translation using this method (until the underlying issue is fixed): https://stackoverflow.com/a/12238414/684353 # Edit 2024: Skip to my write-up that covers the entire issue and all of the listed fixes: https://github.com/facebook/react/issues/11538#issuecomment-2136914960 (the one in the OP is broken)",,,,,,Anecdotal,comment,,,,,,,,2017-12-07,github/MartijnHols,https://github.com/facebook/react/issues/11538#issuecomment-350110297,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
This error also occurs if you use https://localizejs.com for translation. I'm assuming since they manipulate the DOM and React can't reconcile the changes. This took forever to track down and I'm putting it here in case anyone else is trying use localizejs and React16. The issue is with localizejs. The workaround is to add `notranslate` tags to the containers of your react components so that localize doesn't mutate the dom. Obviously they will stop getting translated until localizejs comes up w…,,,,,,Anecdotal,comment,,,,,,,,2018-01-22,github/f0urfingeredfish,https://github.com/facebook/react/issues/11538#issuecomment-359558410,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"`Failed to execute 'removeChild' on 'Node'` can be caused by various chrome extensions that replace text on a page. For example, one of our users reported that the ""[3CX Click to Call](https://chrome.google.com/webstore/detail/3cx-click-to-call/ingddacbmngapennhhfhnpjnaklakach)"" extension was also causing this crash. @gaearon can you provide any guidance about if and when React could be patched to be resilient against this sort of bug?",,,,,,Anecdotal,comment,,,,,,,,2018-02-07,github/vsiao,https://github.com/facebook/react/issues/11538#issuecomment-363928516,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"4 of 7 customers had this problem with react, but it's not happen in all computers, chrome last version 63 working ok for some users but not in others, so it's produces by: no use some keys in react elements, google translate plugins and anothers plugins.. the only solutions is to tell people turn of his plugins...",,,,,,Anecdotal,comment,,,,,,,,2018-02-23,github/webmobiles,https://github.com/facebook/react/issues/11538#issuecomment-368127821,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I've just run into this issue as well, which was really hard to figure out. The only clue was that all the strings in Sentry reports were non-English. How is this not causing problems across all major websites using React 16? Any extension modifying the DOM (which there are a **lot**, translators, password managers, etc.) can totally break a React website. The only workaround I found right now is to: ``` <meta name=""google"" content=""notranslate""> ``` As recommended above.",,,,,,Anecdotal,comment,,,,,,,,2018-04-02,github/hyperknot,https://github.com/facebook/react/issues/11538#issuecomment-378033961,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"Is there any workaround for this? How is it solved on facebook.com, where Chrome translate works with React 16?",,,,,,Anecdotal,comment,,,,,,,,2018-04-09,github/hyperknot,https://github.com/facebook/react/issues/11538#issuecomment-379893416,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"it's ok: <meta name=""google"" content=""notranslate""> with that works, it's means you can't use google translate same time .. but I did realize to repair some errors still without <meta name=""google"" content=""notranslate""> for that I had to implements ""key"" properties everywhere in my <objects> still when react did not complaint about keys absents and another things and another things that i don't remember well, it's about the render, google translate do lost some keys ...",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/webmobiles,https://github.com/facebook/react/issues/11538#issuecomment-379989008,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"If you want to help fix this, please create a small reproducing case that *doesn't* involve extensions, but manually reproduces what they might do to the DOM. Then we can take a look.",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-380128029,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
@gaearon: @fritz-c 's original snippet doesn't involve extensions: https://codesandbox.io/s/qq49kwjynj Full page here: https://qq49kwjynj.codesandbox.io/,,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/hyperknot,https://github.com/facebook/react/issues/11538#issuecomment-380129788,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"It involves using Google Translate. I'm asking to create a reproduction case that does what Google Translate *would* do, but with DOM API calls. So that we can see what exactly is causing the issue.",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-380130886,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I don't think anyone can answer that, except Google Chrome team. I'm not even sure if Translate is part of the open source Chromium project.",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/hyperknot,https://github.com/facebook/react/issues/11538#issuecomment-380132690,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I don't think you need to know the internals of what Google Translate is doing. Look at DOM before and after for a single word, set some DOM breakpoints, and that should tell you the manipulations necessary to reproduce it. A mutation observer can help too.",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-380140252,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"OK, just simply looking at the DOM it's obvious that it gets changed significantly: ``` original <div>無選択</div> translated: <div> <font style=""vertical-align: inherit;""> <font style=""vertical-align: inherit;"">No choice</font> </font> </div> ``` It's interesting that this works well in React 15.",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/hyperknot,https://github.com/facebook/react/issues/11538#issuecomment-380142708,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"Right, so I encourage you to write a minimal case in CodeSandbox that does similar mutations and try to reproduce the problem 🙂",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-380143789,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I did the mutation observers, but haven't been able to replicate it in a way which wouldn't break React 15 as well. I pass it on to a more experienced person from here: https://codesandbox.io/s/lrz2zwp5wl",,,,,,Anecdotal,comment,,,,,,,,2018-04-10,github/hyperknot,https://github.com/facebook/react/issues/11538#issuecomment-380153334,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I used Chrome DOM breakpoints to see what Google Translate was doing under the hood, and created a minimal reproduction that closely emulates how it replaces text. Demo: https://5k0q7pl5y4.codesandbox.io/ Source: https://codesandbox.io/s/5k0q7pl5y4 Now with cross-browser compatibility, it breaks in Safari, Firefox and Chrome. The key lines are at the bottom: ```js // Get the text node ""checked"" const myEl = document.querySelector(""div > div > div"").childNodes[0]; // Create an arbitrary font ele…",,,,,,Anecdotal,comment,,,,,,,,2018-04-11,github/fritz-c,https://github.com/facebook/react/issues/11538#issuecomment-380284873,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
Thanks! Any idea why it inserts `<font>` tags instead of modifying the text node? There's probably a good reason for this but it's not obvious to me.,,,,,,Anecdotal,comment,,,,,,,,2018-04-27,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-385095953,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I have no idea. If I had to venture a guess, I'd say it's related to how they incrementally translate large blocks of text (only what's on the screen), and inconsistency between browsers in how bare text nodes are handled.",,,,,,Anecdotal,comment,,,,,,,,2018-04-27,github/fritz-c,https://github.com/facebook/react/issues/11538#issuecomment-385114841,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
Adding a bit more of information. The examples below are based on the ones by @hyperknot and @fritz-c. The problem is that Google Translate replaces text nodes with `<font>` tags containing translations while React keeps references to the text nodes that are no longer in the DOM tree. React throws in the following cases: 1. A text node is conditionally rendered and it's not the only child of its parent. Then React calls `parent.removeChild(textNode)` when the text node is removed and throws bec…,,,,,,Anecdotal,comment,,,,,,,,2018-05-19,github/shuhei,https://github.com/facebook/react/issues/11538#issuecomment-390386520,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"Just curious, has anyone found an existing eslint rule that warns or errors on this? Our Sentry logs have been filled with these errors for a few months now, so it's great to identify the issue. Not sure we'll be able to have our team ""remember"" to do this convention, though, but it _seems_ lintable.",,,,,,Anecdotal,comment,,,,,,,,2018-07-10,github/jasonrhodes,https://github.com/facebook/react/issues/11538#issuecomment-403884317,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"What is React’s common behaviour for dealing with modified DOM trees? I assume it is to override the changes and regain certainty about the DOM’s state. Would it be ok to fully invalidate and rerender the `currentParent`, if `removeChild()` fails? https://github.com/facebook/react/blob/9f78913b20d52a5849dd26aafebfbc3caf190812/packages/react-reconciler/src/ReactFiberCommitWork.js#L721",,,,,,Anecdotal,comment,,,,,,,,2018-07-19,github/jaller94,https://github.com/facebook/react/issues/11538#issuecomment-406396278,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"I guess this worked in React 15 because it inserted the (much derided) comments around text nodes and relied *on those comments* as a way to hold onto the node position. So even if the text node in between got replaced, React 15 didn't care.",,,,,,Anecdotal,comment,,,,,,,,2018-08-07,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-411002563,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
I don't think it's possible to make React resilient to arbitrary mutations. But if we scope this to being resilient to replacement of text nodes maybe we can make it work.,,,,,,Anecdotal,comment,,,,,,,,2018-08-07,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-411014129,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"Soo.. I don't think we can fix this in React without making legitimate mistakes hard to find, or making performance worse for common cases. But I talked to some Google folks and got this issue filed: https://bugs.chromium.org/p/chromium/issues/detail?id=872770. If you're affected by this, please feel free to star it and/or share details about how this affects you and why this is important for you to get this fixed. Finally, **there is a workaround you can use that will fix the error**. It will …",,,,,,Anecdotal,comment,,,,,,,,2018-08-30,github/gaearon,https://github.com/facebook/react/issues/11538#issuecomment-417504600,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"At the risk of this being a stupid non-performant idea, did you consider this approach: 1. Try to do the normal insertBefore 2. If that doesn't work, check that the expected parent node contains the descendant node 3. If confirmed at step 2, then search up the tree for the ancestor element that is a child of the expected parent node, and use that element instead",,,,,,Anecdotal,comment,,,,,,,,2018-08-31,github/benwiley4000,https://github.com/facebook/react/issues/11538#issuecomment-417551292,repo: facebook/react | issue: Make React resilient to DOM mutations from Google Translate | keyword: workaround
"Bug: ""Rendered more hooks than ..."" throws when it shouldn't with multiple suspends React version: 19.1.0 I've tried hard to create a minimal reproduction for this one with just React and failed, but for reasons I'll describe I still suspect this might be a React bug and not only a Next.js one. There are several reproductions over in the Next.js repo: [#63121](https://github.com/vercel/next.js/issues/63121) [#63388](https://github.com/vercel/next.js/issues/63388) [#78396](https://github.com/ver…",,,,,,Anecdotal,issue,,,,,,,,2025-06-17,github/Ephem,https://github.com/facebook/react/issues/33556,repo: facebook/react | keyword: workaround | state: closed
"This is a tricky issue that involves the interaction between React Suspense, transitions, and hook counting. The ""Rendered more hooks than during the previous render"" error typically indicates a violation of the Rules of Hooks, but as you mentioned, the code paths involved do not have conditional hooks. ## Understanding the Issue The error occurs in the `updateWorkInProgressHook` function when React expects more hooks in the hook chain than are actually present. Based on your debugging details,…",,,,,,Anecdotal,comment,,,,,,,,2025-06-18,github/xabierlameiro,https://github.com/facebook/react/issues/33556#issuecomment-2985817374,"repo: facebook/react | issue: Bug: ""Rendered more hooks than ..."" throws when it shouldn't with multiple suspends | keyword: workaround"
"Hello everyone, Following up on this complex issue, I dedicated some time to create a targeted minimal reproduction based on the excellent analysis provided by @Efem and @xabierlameiro. Methodology The reproduction environment was specifically engineered to trigger the scenario where a promise passed to the use() hook (encapsulated within useActionState) is swapped for a different promise mid-transition. This was achieved using a single Server Action that can either perform a slow async operati…",,,,,,Anecdotal,comment,,,,,,,,2025-06-19,github/lucasfiduniv,https://github.com/facebook/react/issues/33556#issuecomment-2988277543,"repo: facebook/react | issue: Bug: ""Rendered more hooks than ..."" throws when it shouldn't with multiple suspends | keyword: workaround"
"I'm closing this as a duplicate of #33580 since that has a proper reproduction, thanks Rob for finding it!",,,,,,Anecdotal,comment,,,,,,,,2025-08-11,github/Ephem,https://github.com/facebook/react/issues/33556#issuecomment-3174057145,"repo: facebook/react | issue: Bug: ""Rendered more hooks than ..."" throws when it shouldn't with multiple suspends | keyword: workaround"
"[DOM] Add support for the `inert` attribute <!-- Note: if the issue is about documentation or the website, please file it at: https://github.com/reactjs/reactjs.org/issues/new --> **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** When specifying `inert={false}` on an element, React throws the following message: ``` Warning: Received `false` for a non-boolean attribute `inert`. ``` However, `inert={undefined}` works fine as a replacement for `fal…",,,,,,Anecdotal,issue,,,,,,,,2019-10-21,github/kripod,https://github.com/facebook/react/issues/17157,repo: facebook/react | keyword: workaround | state: closed
"Also, type declarations are [required](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/39289) for TypeScript development, so `DOMAttributes` and `JSX.IntrinsicAttributes` should also be updated.",,,,,,Anecdotal,comment,,,,,,,,2019-10-21,github/kripod,https://github.com/facebook/react/issues/17157#issuecomment-544485407,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"@kripod it looks like the spec doesn't explicitly define an `inert` attribute yet > This section **does not** define or create any content attribute named ""inert"". This section merely defines an abstract concept of inertness. We should probably wait until the spec defines this as a boolean attribute before adding it to the list. In the meantime the workaround you mentioned with `inert=""""` should be sufficient!",,,,,,Anecdotal,comment,,,,,,,,2019-10-21,github/aweary,https://github.com/facebook/react/issues/17157#issuecomment-544612636,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contribution.,,,,,,Anecdotal,comment,,,,,,,,2020-01-19,github/stale[bot],https://github.com/facebook/react/issues/17157#issuecomment-576028521,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2020-01-26,github/stale[bot],https://github.com/facebook/react/issues/17157#issuecomment-578528845,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
The `inert` attribute will be [supported by all major engines](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert#browser_compatibility) very soon and this issue should be reopened.,,,,,,Anecdotal,comment,,,,,,,,2022-06-14,github/MidnightDesign,https://github.com/facebook/react/issues/17157#issuecomment-1155528612,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"Seems like `inert` in React does not match `<div inert="""" />` in HTML: https://codesandbox.io/s/react-inert-lb4beo?file=/src/index.js",,,,,,Anecdotal,comment,,,,,,,,2022-06-14,github/eps1lon,https://github.com/facebook/react/issues/17157#issuecomment-1155620703,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"Trying to use `inert` today and... no surprise React once again won't let me use completely valid vanilla HTML features🤦‍♂️ When your framework is perpetually struggling to be compatible with the web that's kind of sign, right? Can we get #24730 merged please!",,,,,,Anecdotal,comment,,,,,,,,2023-05-02,github/jfbrennan,https://github.com/facebook/react/issues/17157#issuecomment-1531843301,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"@jfbrennan behind every framework we use, there are human beings with feelings. No one forces you to use React as-is: you could either fix in on your own through a fork or use another library. Please be respectful to the maintainers and evaluate your own contributions before blaming anyone. I’ve got tired of open source due to the attitude shown above. As a community, I think we should call this behavior out and remind consumers to be grateful towards contributors.",,,,,,Anecdotal,comment,,,,,,,,2023-05-02,github/kripod,https://github.com/facebook/react/issues/17157#issuecomment-1532228550,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"@kripod oh I understand and I'm with you about respecting and collaborating with open-source folks. But let's not get it twisted, React is totally different.",,,,,,Anecdotal,comment,,,,,,,,2023-05-03,github/jfbrennan,https://github.com/facebook/react/issues/17157#issuecomment-1533453514,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
Workaround (thank you @kripod!): https://github.com/DefinitelyTyped/DefinitelyTyped/issues/39289#issue-509909553 > [...] the following has to be added into a project-specific `declarations.d.ts` file: > > ```ts > declare module 'react' { > interface DOMAttributes<T> { > inert?: '' | undefined; > } > } > > declare global { > namespace JSX { > interface IntrinsicAttributes { > inert?: '' | undefined; > } > } > } > > export {}; > ``` Edit: if you run into: > 'T' is defined but never used. eslint[@…,,,,,,Anecdotal,comment,,,,,,,,2023-05-28,github/mrienstra,https://github.com/facebook/react/issues/17157#issuecomment-1566276314,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"Yeah, I used to be compelled to workaround IE too. I already stuck this hack into our app and moved on (not the first time). This is absolutely a step backwards for the frontend community and we all know it. This kind of thing should have died with IE never to be tolerated again. It's been 3.5 years since this issue was opened - ample time to get React prepared for the day when browsers support this attribute (not to the mention error of a design that requires a framework to be maintained along…",,,,,,Anecdotal,comment,,,,,,,,2023-05-31,github/jfbrennan,https://github.com/facebook/react/issues/17157#issuecomment-1570659863,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"> you could either fix in on your own through a fork Namely the fork https://github.com/eps1lon/react/tree/feat/inert Hopefully, the react project will find this suitable for merging in #24730",,,,,,Anecdotal,comment,,,,,,,,2023-06-01,github/pauldraper,https://github.com/facebook/react/issues/17157#issuecomment-1572218201,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"Workaround (JS): ```jsx <div inert="""" /> ``` Workaround (TS): ```tsx <div {...{inert:""""}} /> ```",,,,,,Anecdotal,comment,,,,,,,,2023-06-01,github/pauldraper,https://github.com/facebook/react/issues/17157#issuecomment-1572230721,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"I'm currently using it like this: ``` <div inert={isShown ? undefined : ''} // React doesn't support inert yet /> ``` Would be nice if it could be supported by default, though.",,,,,,Anecdotal,comment,,,,,,,,2023-08-22,github/Benimation,https://github.com/facebook/react/issues/17157#issuecomment-1687842532,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"In 2019, @aweary wrote: > We should probably wait until the spec defines this as a boolean attribute before adding it to the list. Which I think was quite sensible. I don't know when exactly this changed, but as of now it looks like [the HTML spec officially defines it as a boolean](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute).",,,,,,Anecdotal,comment,,,,,,,,2023-10-26,github/effulgentsia,https://github.com/facebook/react/issues/17157#issuecomment-1781814272,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"When I, as of 2024 January 18, go to [canisue](https://caniuse.com/mdn-html_global_attributes_inert), it seems that all browsers support the `inert` attribute. Caniuse also links to the [specification for inert](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute). It seems like its time to add support for `inert` at this time in react? <img width=""1197"" alt=""Skjermbilde 2024-01-18 kl 10 56 59"" src=""https://github.com/facebook/react/assets/25029220/8eba1d21-57d6-4f4a-abd…",,,,,,Anecdotal,comment,,,,,,,,2024-01-18,github/johann1301s,https://github.com/facebook/react/issues/17157#issuecomment-1898154489,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"@johann1301s, it's gotten better over the years, but React's design effectively makes it a browser and needs its own column on caniuse. I originally opened this request as a troll, but your comment and all the frequent disappointment here makes me think we might need to take this more seriously https://github.com/Fyrd/caniuse/issues/6699 A framework should not be a web standards gatekeeper - that was IE's job!",,,,,,Anecdotal,comment,,,,,,,,2024-01-18,github/jfbrennan,https://github.com/facebook/react/issues/17157#issuecomment-1899060621,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"`boolean` values for `inert` landed in the Experimental release channel (`react-dom@experimental`). `inert=""""` will then be treated as `false` instead of `true` in experimental builds. We plan to land it in stable in React 19.",,,,,,Anecdotal,comment,,,,,,,,2024-03-18,github/eps1lon,https://github.com/facebook/react/issues/17157#issuecomment-2003750544,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"Hi @eps1lon, we just got an update for the `@types/react` package for patch version [18.2.67](https://renovatebot.com/diffs/npm/@types%2freact/18.2.65/18.2.67) from Renovate. We are using `inert` as type `'' | undefined` so we had some type failures after the update since the attribute now expects `boolean | undefined`. Unfortunately, React 18 doesn't add the attribute to the DOM node with `inert={true}`. As you mentioned this was only meant for experimental and stable in React 19 so the patch …",,,,,,Anecdotal,comment,,,,,,,,2024-03-21,github/Cuuki,https://github.com/facebook/react/issues/17157#issuecomment-2012464024,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"@Cuuki Something in your app is pulling in types for the `experimental` release channel e.g. a `import react/experimental` or `/// <reference types=""react/experimental"" />` somewhere in your app. The stable types do not have types for `inert`. I'd need a full repro to see the issue. But we defintiely didn't add the types for `inert` in stable types",,,,,,Anecdotal,comment,,,,,,,,2024-03-21,github/eps1lon,https://github.com/facebook/react/issues/17157#issuecomment-2012599497,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"I confirm I have the same issue as @Cuuki and I am definitely not importing `react/experimental`. EDIT: Though maybe Next.js, which I use, is doing it?",,,,,,Anecdotal,comment,,,,,,,,2024-03-21,github/benface,https://github.com/facebook/react/issues/17157#issuecomment-2012758822,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
I think I did that in Next.js for convenience a while ago not realizing they vendor Canary not Experimental. I'll check how we can fix it. Might need to break users of experimental features. I recommend upgrading and annotating breakages with `@ts-expect-error`.,,,,,,Anecdotal,comment,,,,,,,,2024-03-21,github/eps1lon,https://github.com/facebook/react/issues/17157#issuecomment-2012795215,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"We are authoring a component library with multiple packages in a monorepo, other than `emotion` and `react-aria` we don't depend on much here. So at least in this context, Next.js is only used in one of the example apps, outside of the library scope where the error was thrown. I had already checked for experimental occurence usage earlier but it could of course be that some of the dependencies pull in the experimental types but I can't be sure. If I find some time in the upcoming days I can try…",,,,,,Anecdotal,comment,,,,,,,,2024-03-21,github/Cuuki,https://github.com/facebook/react/issues/17157#issuecomment-2013173975,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"Same happening here (I'm also using NextJs, so there's definitely a pattern here). We have very strict rules agains using `@ts-expect-error`, so for now I disabled the updates for `@types/react`, no problem. :)",,,,,,Anecdotal,comment,,,,,,,,2024-04-29,github/lgenzelis,https://github.com/facebook/react/issues/17157#issuecomment-2083749318,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
Should this issue be reopened until React 19? 🤷 [i.e. this comment](https://github.com/facebook/react/issues/17157#issuecomment-2003750544),,,,,,Anecdotal,comment,,,,,,,,2024-05-21,github/thathurtabit,https://github.com/facebook/react/issues/17157#issuecomment-2123103517,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"@eps1lon > `boolean` values for `inert` landed in the Experimental release channel (`react-dom@experimental`). `inert=""""` will then be treated as `false` instead of `true` in experimental builds. We plan to land it in stable in React 19. We shipped the `inert ? """" : undefined` workaround in a library. Is it possible for us to still support both React v18 and v19 at the same time? Does react 19 ship something we can detect and then change behavior based on that? cc @xec",,,,,,Anecdotal,comment,,,,,,,,2024-05-23,github/h3rmanj,https://github.com/facebook/react/issues/17157#issuecomment-2127062967,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
> Does react 19 ship something we can detect and then change behavior based on that? Other maintainers check for existence of `React.use` since that exists in 19 but 18.,,,,,,Anecdotal,comment,,,,,,,,2024-05-23,github/eps1lon,https://github.com/facebook/react/issues/17157#issuecomment-2127180687,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"> inert="""" will then be treated as false instead of true in experimental builds. We plan to land it in stable in React 19. Would `inert=""anyNonEmptyString""` be treated as true in React 19? That would allow it to work in both React 18 and React 19",,,,,,Anecdotal,comment,,,,,,,,2024-08-22,github/filipw01,https://github.com/facebook/react/issues/17157#issuecomment-2303979702,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"> Would inert=""anyNonEmptyString"" be treated as true in React 19? That would allow it to work in both React 18 and React 19 For now but no guarantees that it won't break later. 3rd party tooling may complain about non-standard values.",,,,,,Anecdotal,comment,,,,,,,,2024-08-22,github/eps1lon,https://github.com/facebook/react/issues/17157#issuecomment-2304118471,repo: facebook/react | issue: [DOM] Add support for the `inert` attribute | keyword: workaround
"React devtools stuck at Loading React Element Tree... ##### Have tried re-installing both extension and chrome. OS: Ubuntu 20.10 Chrome: 107.0.5304.87 (Official Build) (64-bit) Scenario: Dev tools shows ``` Loading React Element Tree... If this seems stuck, please follow the [troubleshooting instructions](https://github.com/facebook/react/tree/main/packages/react-devtools#the-issue-with-chrome-v101-and-earlier-versions). ``` on local development servers.",,,,,,Anecdotal,issue,,,,,,,,2022-12-26,github/ananthakrishna-hs,https://github.com/facebook/react/issues/25939,repo: facebook/react | keyword: workaround | state: closed
"Same, it is not working since a full month. Works fine in other browsers. I tried reinstalling the extension several times and it didn't help. ![image](https://user-images.githubusercontent.com/84586440/209949147-84cd7b4a-1312-4664-a8c2-839b1037b70b.png)",,,,,,Anecdotal,comment,,,,,,,,2022-12-29,github/Konigj,https://github.com/facebook/react/issues/25939#issuecomment-1367275654,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
Same here but only at work. Works fine on personal computer. Tested on react website. In both cases Chrome 108 and extension version 4.27.1 When I inspect the devtools inspector I can see following errors in console: ![image](https://user-images.githubusercontent.com/96032/210915429-a6c056ad-1ddd-49fc-9c70-71c0d93b438c.png),,,,,,Anecdotal,comment,,,,,,,,2023-01-06,github/mwisnicki,https://github.com/facebook/react/issues/25939#issuecomment-1373047927,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"To fix this problem, you can update Chrome browser. I could not update it from the Settings > About Chrome page, so I just downloaded Chrome again, then installed it and it was fixed.",,,,,,Anecdotal,comment,,,,,,,,2023-01-09,github/Konigj,https://github.com/facebook/react/issues/25939#issuecomment-1375731596,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"I have the same problem as @johnhunter, I see this exception in the console. <img width=""401"" alt=""Screenshot 2023-02-23 at 4 40 23 PM"" src=""https://user-images.githubusercontent.com/7662849/221047037-6debabd0-a271-4572-a08d-8b638911281b.png"">",,,,,,Anecdotal,comment,,,,,,,,2023-02-23,github/aagarw33,https://github.com/facebook/react/issues/25939#issuecomment-1442524077,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"Still happening for me with Chrome Version 111.0.5563.146, extension Version 4.27.3 This is on localhost. The following workaround is less than ideal but gets me out of a bind: - Close devtools panel - Go to the extension details - Toggle the extension off and on again - open devtools panel again - reload the page Seems worse the bigger the React app is. The workaround restores functionality for a while but it ends up failing again after a while. Seems similar to https://github.com/facebook/rea…",,,,,,Anecdotal,comment,,,,,,,,2023-03-30,github/johnhunter,https://github.com/facebook/react/issues/25939#issuecomment-1490145423,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
Same here. Chrome Version 111.0.5563.147. On localhost. Next JS 13 project. @johnhunter s solution worked for me for a bit.,,,,,,Anecdotal,comment,,,,,,,,2023-03-31,github/anders-kaffia,https://github.com/facebook/react/issues/25939#issuecomment-1491702260,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"Closing as duplicate of https://github.com/facebook/react/issues/25818, lets consolidate conversation there.",,,,,,Anecdotal,comment,,,,,,,,2023-04-26,github/hoxyq,https://github.com/facebook/react/issues/25939#issuecomment-1523999947,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
> Remove the extension and install it again. This did not resolve the problem. Still happening with fresh install of extension 4.27.8 and Chrome 114.0.5735.133,,,,,,Anecdotal,comment,,,,,,,,2023-06-21,github/johnhunter,https://github.com/facebook/react/issues/25939#issuecomment-1600407100,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
@hoxyq can we reopen this issue please. It does not appear to be resolved and the behaviour is different from #25818 - thanks.,,,,,,Anecdotal,comment,,,,,,,,2023-06-21,github/johnhunter,https://github.com/facebook/react/issues/25939#issuecomment-1600413474,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"> @hoxyq can we reopen this issue please. It does not appear to be resolved and the behaviour is different from #25818 - thanks. Thanks for notifying. Opening only this one, lets keep all discussion here. I need more information about the problem: 1. Any chance you have reproducible example? Or more details on when exactly it gets stuck? 2. When it gets stuck, can you please check if there are some errors in Chrome's DevTools console? Not your application's console, but Chrome's DevTools, here …",,,,,,Anecdotal,comment,,,,,,,,2023-06-21,github/hoxyq,https://github.com/facebook/react/issues/25939#issuecomment-1600544936,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
> I need more information about the problem Thanks. I see a lot of `TimeoutError: Timed out while inspecting element nnn` errors once I undock the panel. But so far closing and reopening the DevTools seems to reload the react tree ok. I'll see if I can reproduce the issue over the day and report back.,,,,,,Anecdotal,comment,,,,,,,,2023-06-21,github/johnhunter,https://github.com/facebook/react/issues/25939#issuecomment-1600663533,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"When the stuck condition occurs; undocking the panel and opening the console shows the following: <img width=""955"" alt=""image"" src=""https://github.com/facebook/react/assets/219160/20fe5c4c-7bd5-4d92-b8f7-a5bb5f444f82""> Closing and reopening the DevTools panel seems to reset the tree. This is different to the initial problem where I had to toggle the extension off and on to reset the tree. So definitely an improvement but still occurring. Its happening on a large React app that I cannot share an…",,,,,,Anecdotal,comment,,,,,,,,2023-06-21,github/johnhunter,https://github.com/facebook/react/issues/25939#issuecomment-1600715035,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"> When the stuck condition occurs; undocking the panel and opening the console shows the following: <img alt=""image"" width=""955"" src=""https://user-images.githubusercontent.com/219160/247539507-20fe5c4c-7bd5-4d92-b8f7-a5bb5f444f82.png""> > > Closing and reopening the DevTools panel seems to reset the tree. This is different to the initial problem where I had to toggle the extension off and on to reset the tree. > > So definitely an improvement but still occurring. Its happening on a large React a…",,,,,,Anecdotal,comment,,,,,,,,2023-06-21,github/hoxyq,https://github.com/facebook/react/issues/25939#issuecomment-1600730197,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"Yep, that was the console in the screenshot. Here is the issue reproduced again. <img width=""1372"" alt=""image"" src=""https://github.com/facebook/react/assets/219160/29a62450-1ef4-4309-b104-a8bd03263498""> In this case the error log did not appear until I selected another DevTools panel tab and then reselected the react Components tab (that also triggered the unrelated violation warning). The ""stuck"" message appeared in the react panel the whole time.",,,,,,Anecdotal,comment,,,,,,,,2023-06-22,github/johnhunter,https://github.com/facebook/react/issues/25939#issuecomment-1602214520,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"I'm getting the same behavior as the OP. I am using the stand alone server with a React plugin in Obsidian.md. Obsidian is built off of electron. It was working before but I recently upgraded my version of Obsidian. react: 18.2.0 react-dom: 18.2.0 react-devtools: 4.28.0 electron: 24.3.1 chromium: 112.0.5615.183 os: Mac Ventura 13.2 My import statement is ```javascript import ""react-devtools"";` import { createRoot, Root } from ""react-dom/client""; ``` Here is the socket log <img width=""1197"" alt=…",,,,,,Anecdotal,comment,,,,,,,,2023-08-14,github/decaf-dev,https://github.com/facebook/react/issues/25939#issuecomment-1676617296,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"I'm still seeing this issue, even on fairly small projects. react: 18.2.0 react-dom: 18.2.0 react-devtools: 4.28.0 os: MacOS 13.5.2",,,,,,Anecdotal,comment,,,,,,,,2023-09-18,github/johnhunter,https://github.com/facebook/react/issues/25939#issuecomment-1724079512,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"Hey, the browser extension v4.28.4 has been published today on Chrome's extensions store. This version includes various changes to the content scripts injection logic, which should be more reliable now. Can someone please check if this error is still reproducible? cc @johnhunter",,,,,,Anecdotal,comment,,,,,,,,2023-10-04,github/hoxyq,https://github.com/facebook/react/issues/25939#issuecomment-1746863108,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
@johnhunter i don't if this is the same case as mine but i tried to update my nodejs to LTS and it solved the case,,,,,,Anecdotal,comment,,,,,,,,2023-10-28,github/AmirAmArA,https://github.com/facebook/react/issues/25939#issuecomment-1783841572,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
I've been getting this for a few weeks. on chrome 119.0.6045.105 with extension version 4.28.5 (10/25/2023) I enabled dev mode for extensions and now I see this error when I try to open it: ``` Uncaught TypeError: Cannot read properties of undefined (reading 'sendMessage') at handleMessageFromPage (proxy.js:1:899) handleMessageFromPage @ proxy.js:1 postMessage (async) updateRequiredBackends @ backendManager.js:1 (anonymous) @ backendManager.js:1 welcome @ backendManager.js:1 postMessage (async)…,,,,,,Anecdotal,comment,,,,,,,,2023-11-08,github/chiptus,https://github.com/facebook/react/issues/25939#issuecomment-1801819556,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
> I've been getting this for a few weeks. on chrome 119.0.6045.105 with extension version 4.28.5 (10/25/2023) > > I enabled dev mode for extensions and now I see this error when I try to open it: > > ``` > Uncaught TypeError: Cannot read properties of undefined (reading 'sendMessage') > at handleMessageFromPage (proxy.js:1:899) > handleMessageFromPage @ proxy.js:1 > postMessage (async) > updateRequiredBackends @ backendManager.js:1 > (anonymous) @ backendManager.js:1 > welcome @ backendManager.…,,,,,,Anecdotal,comment,,,,,,,,2023-11-08,github/hoxyq,https://github.com/facebook/react/issues/25939#issuecomment-1801855171,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
react dev tools timeout when inspect large project The timeout occurred at InspectedElementContextController dev tools version: 5.0.0 react version: 16.14.0 chrome version: 120.0.6099.63 WSL Ubuntu 22.04.3 LTS ![image](https://github.com/facebook/react/assets/3301995/73744f0d-a75f-4ae2-b250-1df8b59b96cd) ![image](https://github.com/facebook/react/assets/3301995/70d10659-84e0-4e6a-a507-afd389372ad7),,,,,,Anecdotal,comment,,,,,,,,2023-12-16,github/shengbeiniao,https://github.com/facebook/react/issues/25939#issuecomment-1858831613,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
> Can you try reinstalling the extension? I also have this issue. I have tried to reinstall react devtools and nothing changed,,,,,,Anecdotal,comment,,,,,,,,2024-01-17,github/inoyakaigor,https://github.com/facebook/react/issues/25939#issuecomment-1895782673,repo: facebook/react | issue: React devtools stuck at Loading React Element Tree...   | keyword: workaround
"Using `use()` as name for custom hooks ### What kind of issue is this? - [x] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repro [https://playground.react.dev](https://play…",,,,,,Anecdotal,issue,,,,,,,,2025-07-30,github/EricPierlotIdmog,https://github.com/facebook/react/issues/34054,repo: facebook/react | keyword: workaround | state: closed
"Thanks for posting. `use` is not a valid name for custom hooks, and is only meant for the specific `use()` API provided by React. You can think of `use()` more like an keyword or operator than a hook (the closest analogue is `await`). So we would recommend either creating a hook named accordingly, or `import {use} from 'react'`.",,,,,,Anecdotal,comment,,,,,,,,2025-07-30,github/josephsavona,https://github.com/facebook/react/issues/34054#issuecomment-3137764191,repo: facebook/react | issue: Using `use()` as name for custom hooks | keyword: workaround
"Hello! 👋 I came across issue and would love to work on this. I’ve set up the repo locally and started digging into it. Just wanted to check in before starting — is anyone already working on this? If not, I’d love to take it up. Thanks!",,,,,,Anecdotal,comment,,,,,,,,2025-08-05,github/Shonferns004,https://github.com/facebook/react/issues/34054#issuecomment-3153561937,repo: facebook/react | issue: Using `use()` as name for custom hooks | keyword: workaround
"[React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic Using the react Example given for useOptimistic hook in docs, an update in state passed to the hook should directly reset the optimisticState in one render. Instead 1. It calls the updaterFn first, updates the optimisticState using new state and optimisticValue during one render cycle resets optimisticState with new State in another render cycle. 2. As a result, both the new state and optimisticV…",,,,,,Anecdotal,issue,,,,,,,,2024-12-31,github/vedanttikku12,https://github.com/facebook/react/issues/31944,repo: facebook/react | keyword: workaround | state: closed
Does happen to me as well on the provided CodeSandbox. The change between the optimistic state back to the original state does indeed occur with 2 renders. I guess it should be just 1 render probably.,,,,,,Anecdotal,comment,,,,,,,,2024-12-31,github/JorensM,https://github.com/facebook/react/issues/31944#issuecomment-2566706106,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
the state gets updated but the optimistic state still has the pending data which only clears in the next render. ![useOptimistic](https://github.com/user-attachments/assets/6c832e33-c5a2-4e61-8b2a-64c5af7d3664),,,,,,Anecdotal,comment,,,,,,,,2024-12-31,github/JorensM,https://github.com/facebook/react/issues/31944#issuecomment-2566710735,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
"Yes, This is happening for me as well After receiving the actual results from the server and updating the messages in App component, the updateFn of useOptimistic runs again with the final updated state and optimisticValue ( which is now already part of the final state ), and returns the optimisticState with duplicate values ( one already part of the final state and one with sending:true ) for one render cycle, but somehow ( Magically ) it renders with the correct state in the next render cycle…",,,,,,Anecdotal,comment,,,,,,,,2025-01-02,github/Ajay-25,https://github.com/facebook/react/issues/31944#issuecomment-2567305973,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
"> Using the react Example given for useOptimistic hook in docs, an update in state passed to the hook should directly reset the optimisticState in one render. > > Instead > > 1. It calls the updaterFn first, updates the optimisticState using new state and optimisticValue during one render cycle > resets optimisticState with new State in another render cycle. > 2. As a result, both the new state and optimisticValue is rendered. Tried this in 20x slowdown > > React.19.issue.mov > > **React versio…",,,,,,Anecdotal,comment,,,,,,,,2025-01-07,github/ezine189,https://github.com/facebook/react/issues/31944#issuecomment-2575117448,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
Anyone find a workaround for this yet? I've been beating my head against this for hours. It looks like `useOptimistic` is essentially unusable in its current state (unless you want broken renders or duplicate entries)?,,,,,,Anecdotal,comment,,,,,,,,2025-03-04,github/mcmillion,https://github.com/facebook/react/issues/31944#issuecomment-2696211757,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
"What I ended up doing on my end to get around this for now: Luckily, everything we're using this for is CRUD-related operations, and we're using `nanoid` in the frontend to assign IDs for things, so we can use the ID as an identifier. With that, I'm just filtering duplicate IDs out of the optimistic items. The double updates happen close enough where this doesn't really change the ""optimistic"" feel of the updates, but prevents flash of double items or React complaining about duplicate keys.",,,,,,Anecdotal,comment,,,,,,,,2025-03-06,github/mcmillion,https://github.com/facebook/react/issues/31944#issuecomment-2704748083,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-07-28,github/github-actions[bot],https://github.com/facebook/react/issues/31944#issuecomment-3125677902,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2025-08-04,github/github-actions[bot],https://github.com/facebook/react/issues/31944#issuecomment-3149252803,repo: facebook/react | issue: [React 19] Bug: optimisticState is updated with both new state and optimisticValue in useOptimistic | keyword: workaround
"Fix form state reset when component state is updated ## Summary This PR cherry-picks commits from https://github.com/facebook/react/pull/30718, which was closed due to inactivity. The changes proposed there are still relevant, as the issue persists in the latest Canary release. The original PR addressed [the issue](https://github.com/facebook/react/issues/30368) effectively, but was closed without merging due to inactivity. I've preserved all relevant commits and brought them forward in this PR…",,,,,,Anecdotal,issue,,,,,,,,2025-05-24,github/joshuajaco,https://github.com/facebook/react/pull/33351,repo: facebook/react | keyword: workaround | state: closed
@eps1lon would you or someone else be able to review this? The previous version of this and various related issues keep going stale but this is blocking us from upgrading React and NextJS. [It also seems to affect ShadCN](https://github.com/facebook/react/issues/31363) (and likely other UI libraries) though this issue was also closed due to inactivity. I'm surprised that more people aren't noticing this. Is `useFormStatus` not used often? We're using it in React 18 with NextJS 14,,,,,,Anecdotal,comment,,,,,,,,2025-07-02,github/redbmk,https://github.com/facebook/react/pull/33351#issuecomment-3029406440,repo: facebook/react | issue: Fix form state reset when component state is updated | keyword: workaround
Adobe's popular `react-spectrum` is also affected: https://github.com/adobe/react-spectrum/issues/7543,,,,,,Anecdotal,comment,,,,,,,,2025-07-02,github/joshuajaco,https://github.com/facebook/react/pull/33351#issuecomment-3029484475,repo: facebook/react | issue: Fix form state reset when component state is updated | keyword: workaround
"We're experiencing the same issue, which is currently blocking us from upgrading our project to Next.js 15 and React 19. In the meantime we'll need to implement some workarounds to avoid being stuck. We hope this fix progresses soon. I'm also surprised this hasn’t received more attention.",,,,,,Anecdotal,comment,,,,,,,,2025-07-07,github/lopesmartinz,https://github.com/facebook/react/pull/33351#issuecomment-3046249148,repo: facebook/react | issue: Fix form state reset when component state is updated | keyword: workaround
"Hook equivalent for `getSnapshotBeforeUpdate` <!-- Note: if the issue is about documentation or the website, please file it at: https://github.com/reactjs/reactjs.org/issues/new --> **Do you want to request a *feature* or report a *bug*?** Feature **What is the current behavior?** There is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state: > Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapsho…",,,,,,Anecdotal,issue,,,,,,,,2019-03-27,github/brainkim,https://github.com/facebook/react/issues/15221,repo: facebook/react | keyword: workaround | state: closed
"It's been almost a year since this hook is marked as ""Coming soon™"" in the hooks FAQ, but I don't see much movement here... And this would be useful to build hooks that need to run something before the component updates (such as the example which deals with scroll positions before/after update). Is there any chance this will be looked in the near future™? I completely agree figuring out the API for this hook is a quite hard, so I'm quite sure there will be a big discussion around it.",,,,,,Anecdotal,comment,,,,,,,,2019-10-15,github/voliva,https://github.com/facebook/react/issues/15221#issuecomment-542285607,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contribution.,,,,,,Anecdotal,comment,,,,,,,,2020-01-13,github/stale[bot],https://github.com/facebook/react/issues/15221#issuecomment-573756260,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
"I hacked around this by using `useMemo` since that runs the code before the render. For example, to trigger LayoutAnimation in react native: ```ts export const useLayoutAnimation = ( deps: unknown[], easing: LayoutAnimationEasingFunction = 'easeInEaseOut', ) => { useMemo(() => { LayoutAnimation[easing](); }, [...deps, easing]); }; ```",,,,,,Anecdotal,comment,,,,,,,,2020-01-29,github/META-DREAMER,https://github.com/facebook/react/issues/15221#issuecomment-579988983,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
The workaround that I use is to have a component like this: import * as React from 'react'; export class GetSnapshotBeforeUpdate extends React.Component<{ callback?: VoidFunction; }> { getSnapshotBeforeUpdate = () => { this.props.callback?.(); // Prevents warning. return null; }; // Prevents warning. componentDidUpdate = () => {}; render = () => null; } and then stick `<GetSnapshotBeforeUpdate callback={() => {...} />` into the rendered output of a functional component. If anyone notices any is…,,,,,,Anecdotal,comment,,,,,,,,2020-02-07,github/ivan7237d,https://github.com/facebook/react/issues/15221#issuecomment-583448887,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2020-05-07,github/stale[bot],https://github.com/facebook/react/issues/15221#issuecomment-625378181,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2020-05-15,github/stale[bot],https://github.com/facebook/react/issues/15221#issuecomment-629045134,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
What's the current thinking on this? Layout animations are impossible to perform with hooks without this.,,,,,,Anecdotal,comment,,,,,,,,2020-10-21,github/mattgperry,https://github.com/facebook/react/issues/15221#issuecomment-713454459,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
"The current documentation [says](https://react.dev/reference/react/Component#getsnapshotbeforeupdate): > At the moment, there is no equivalent to getSnapshotBeforeUpdate for function components. This use case is very uncommon, but if you have the need for it, for now you’ll have to write a class component. @sebmarkbage The ""for now"" implies that this will be resolved in the future, so is it actually planned? Are the docs out of date (it was planned, but now is scrapped), or did you guys close t…",,,,,,Anecdotal,comment,,,,,,,,2024-03-14,github/ipeterov,https://github.com/facebook/react/issues/15221#issuecomment-1997992330,repo: facebook/react | issue: Hook equivalent for `getSnapshotBeforeUpdate` | keyword: workaround
"[Compiler Bug]: Ref values may not be accessed during render when using `mergeRefs` ### What kind of issue is this? - [ ] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [X] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repr…",,,,,,Anecdotal,issue,,,,,,,,2024-12-12,github/NeilTheFisher,https://github.com/facebook/react/issues/31742,repo: facebook/react | keyword: workaround | state: closed
Workaround: https://mantine.dev/hooks/use-merged-ref/ https://github.com/reactwg/react-compiler/discussions/31,,,,,,Anecdotal,comment,,,,,,,,2024-12-13,github/aeharding,https://github.com/facebook/react/issues/31742#issuecomment-2541871296,repo: facebook/react | issue: [Compiler Bug]: Ref values may not be accessed during render when using `mergeRefs` | keyword: workaround
"See #34004 which adds support for the merge refs pattern. If a function call takes refs as arguments we normally error. However, if we can infer that result of the function is also a ref — named `ref` or `-Ref`, or passed as a `ref` prop — then we allow the call.",,,,,,Anecdotal,comment,,,,,,,,2025-07-25,github/josephsavona,https://github.com/facebook/react/issues/31742#issuecomment-3120627337,repo: facebook/react | issue: [Compiler Bug]: Ref values may not be accessed during render when using `mergeRefs` | keyword: workaround
"[Compiler Bug]: eslint-plugin-react-compiler errors when updating initialization of ref.current ### What kind of issue is this? - [ ] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [X] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### …",,,,,,Anecdotal,issue,,,,,,,,2024-08-21,github/jeremy-code,https://github.com/facebook/react/issues/30782,repo: facebook/react | keyword: workaround | state: closed
"Try this import { useRef, useState, useEffect } from ""react""; const UNINITIALIZED = Symbol(""UNINITIALIZED""); export const useOnce = <T,>(initialValue: T | (() => T)) => { const ref = useRef < T | typeof UNINITIALIZED > (UNINITIALIZED); const [value, setValue] = useState < T | typeof UNINITIALIZED > (UNINITIALIZED); useEffect(() => { if (ref.current === UNINITIALIZED) { const resolvedValue = typeof initialValue === ""function"" ? initialValue() : initialValue; ref.current = resolvedValue; setValue…",,,,,,Anecdotal,comment,,,,,,,,2024-08-28,github/parthnegi21,https://github.com/facebook/react/issues/30782#issuecomment-2316150678,repo: facebook/react | issue: [Compiler Bug]: eslint-plugin-react-compiler errors when updating initialization of ref.current | keyword: workaround
"i also run into the problem in a different scenario: when passing the ref object to a custom hook the compiler is not optimizing my code. if i remove the `ref` access it works as expected. ``` // pass the ref object to a custom hook and it is preventing the optimizations. const mergedRefs = useMergedRef<HTMLDivElement>(ref, setPopperElement); ```",,,,,,Anecdotal,comment,,,,,,,,2024-09-01,github/hlege,https://github.com/facebook/react/issues/30782#issuecomment-2323508659,repo: facebook/react | issue: [Compiler Bug]: eslint-plugin-react-compiler errors when updating initialization of ref.current | keyword: workaround
"Do you deprecated to use `useRef`? if not, how to use it? ```ts const panelRef = useRef<HTMLDivElement>(null); const width = panelRef.current?.clientWidth ?? 256; // eslint error here ```",,,,,,Anecdotal,comment,,,,,,,,2024-09-02,github/iahu,https://github.com/facebook/react/issues/30782#issuecomment-2323827164,repo: facebook/react | issue: [Compiler Bug]: eslint-plugin-react-compiler errors when updating initialization of ref.current | keyword: workaround
Is there any available workaround for this? This limitation also affects the [useImperativeHandle](https://playground.react.dev/#N4Igzg9grgTgxgUxALhAHRFMCAEcA2AlggHYAuGA3GiTYQLYAOEMZOwOAZiwO4CGMACYAlBJwA0OLAgCSTBDD5lCANwQAJPiUH5cAXy4wI9HBhgI+cCiGq0ScCCTBsAsgE8AwseYlSbALxcvAIiYgAUnFD2yo447l5Mjn5hjEaMYJLcMPxCCKGcAJTsNDhS2HKMCkqqGlo6CBHBufmSYUX+AHzFJKWl5mSwPcB6tqV6kgDaALoFozj9gzgkUPj4tnqzIHpAA).,,,,,,Anecdotal,comment,,,,,,,,2024-09-02,github/alisherks,https://github.com/facebook/react/issues/30782#issuecomment-2323922335,repo: facebook/react | issue: [Compiler Bug]: eslint-plugin-react-compiler errors when updating initialization of ref.current | keyword: workaround
"To anyone encountering optimization issues with the usage of `useImperativeHandle`, you can place the `forwardedRef` inside a `useState` hook. ```js const [refs] = useState(() => { return { forwardedRef }; }); ``` This [works](https://playground.react.dev/#N4Igzg9grgTgxgUxALhAHRFMCAEcA2AlggHYAuGA3GiTYQLYAOEMZOwOAZiwO4CGMACYAlBJwA0OLAgDKZPmQSTpASSYIYCwgDcEACT4lB+XAF8uMCPRwYYCPnAohqtEnAgkwbALIBPAMJWzCSkbAC8XLwCImIAFJxQbmSEHjh+gUweobGMloxgktww-EIIMZwAlOw0OHgeXjgA2nacYAC6OBHScgoIsbFVYQB81SS1tXZksGM…",,,,,,Anecdotal,comment,,,,,,,,2024-09-02,github/alisherks,https://github.com/facebook/react/issues/30782#issuecomment-2324154820,repo: facebook/react | issue: [Compiler Bug]: eslint-plugin-react-compiler errors when updating initialization of ref.current | keyword: workaround
"I think this is addressed in `19.0.0-beta-8a03594-20241020`. I have a hook that looks like this: ```typescript export function useLogger(name: string) { const loggerRef = useRef<Logger>(null); if (loggerRef.current === null) { loggerRef.current = new Logger(name); } return loggerRef.current; } ``` The linter rule complains only about that `.current` in the return statement. However, the conditional needs to have exactly this form of `fooRef.current === null`, otherwise the rule will report a fa…",,,,,,Anecdotal,comment,,,,,,,,2024-10-22,github/ravicious,https://github.com/facebook/react/issues/30782#issuecomment-2428758544,repo: facebook/react | issue: [Compiler Bug]: eslint-plugin-react-compiler errors when updating initialization of ref.current | keyword: workaround
"Bug: react-dom/client does not provide an export named 'createRoot' When I use vite create a react project, and use `yarn link` command to link react module after `yarn build` <img width=""600"" height=""199"" alt=""Image"" src=""https://github.com/user-attachments/assets/b2f47cf8-b7b3-444a-ac28-dd88d5490cdd"" /> React version: 19.1.1 ## Steps To Reproduce 1.Clone react source code to local. 2.I follow this article [https://legacy.reactjs.org/docs/how-to-contribute.html](url) step by step after `yarn b…",,,,,,Anecdotal,issue,,,,,,,,2025-07-28,github/jenerse,https://github.com/facebook/react/issues/34019,repo: facebook/react | keyword: workaround | state: closed
"Hi! 👋 Thanks for reporting this — I tried to reproduce the issue using React 19.1.1 and a Vite project with `yarn link`. From my understanding, the `oss-experimental` build may not export stable APIs like `createRoot`. This might explain why `react-dom/client` does not contain it when linked locally. As a workaround, you might try using the `build/oss-stable` version instead of `oss-experimental` for linking. Also, just to confirm, the import should look like this: ```js import { createRoot } f…",,,,,,Anecdotal,comment,,,,,,,,2025-07-28,github/ZunedKhan07,https://github.com/facebook/react/issues/34019#issuecomment-3127512123,repo: facebook/react | issue: Bug: react-dom/client does not provide an export named 'createRoot' | keyword: workaround
"@ZunedKhan07 Hi! Thanks for answer. I used build/oss-stable but still got the same error. And I was found the solution. Add options in vite.config.js ``` optimizeDeps: { include: ['react-dom/client'], }, build: { commonjsOptions: { include: [/react-dom\/client/, /node_modules/], }, }, ``` Then go to react build folder , enter `oss-stable/react-dom` and run command `yarn link scheduler`. (Because `react-dom/client` depends on `scheduler`, it need to run this command, otherwise it may report a de…",,,,,,Anecdotal,comment,,,,,,,,2025-07-29,github/jenerse,https://github.com/facebook/react/issues/34019#issuecomment-3131506581,repo: facebook/react | issue: Bug: react-dom/client does not provide an export named 'createRoot' | keyword: workaround
"fix: `React.use` inside `React.lazy`-ed component on SSR <!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory. Before submitting a pull request, please make sure the following is done: 1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`. 2. Run `yarn` in the repository root. 3. If you've…",,,,,,Anecdotal,issue,,,,,,,,2025-07-18,github/hi-ogawa,https://github.com/facebook/react/pull/33941,repo: facebook/react | keyword: workaround | state: closed
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: dffacc7b8094576c19790fe8341996f743ba4a89...dc09e2586583d4d783bb1f0486a43373b01d11fc ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | [oss-stable/react-dom/cjs/react-dom.production.js](https://react-builds.vercel.app…",,,,,,Anecdotal,comment,,,,,,,,2025-07-23,github/react-sizebot,https://github.com/facebook/react/pull/33941#issuecomment-3108431481,repo: facebook/react | issue: fix: `React.use` inside `React.lazy`-ed component on SSR | keyword: workaround
"It's unfortunate because we need the thenable state for other debug info. However, there's a general problem with ""throw a Promise"" and debugging that leads us to wanting to deprecate the whole feature anyway.",,,,,,Anecdotal,comment,,,,,,,,2025-07-28,github/sebmarkbage,https://github.com/facebook/react/pull/33941#issuecomment-3127987855,repo: facebook/react | issue: fix: `React.use` inside `React.lazy`-ed component on SSR | keyword: workaround
"Bug: `React.use` inside `React.lazy`-ed component returns other `React.use` value on SSR <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> React version: 19.1.0, 19.2.0-canary-dffacc7b-20250717 ## Steps To Reproduce Run a following code: ```js // [Component Tree] // // Component1 -> use(promise1) // Component2Lazy // COm…",,,,,,Anecdotal,issue,,,,,,,,2025-07-18,github/hi-ogawa,https://github.com/facebook/react/issues/33937,repo: facebook/react | keyword: workaround | state: closed
"Here are two workaround I'm exploring on user land. As in the reproduction, the component tree of a broken case looks like: ``` ❌ Comp with use -> lazy -> Comp with use ``` By replacing top level `use` (at least the ones used inside framework) with legacy ""throw thenable"" use implementation, it avoids breaking `use` usage in end-user's component. cf. https://github.com/wakujs/waku/pull/1542 ``` ✅ Comp with legacy-use -> lazy -> Comp with use ^^^^^^^^^^^^^^^^^^^^ framework's internal component ^…",,,,,,Anecdotal,comment,,,,,,,,2025-07-19,github/hi-ogawa,https://github.com/facebook/react/issues/33937#issuecomment-3091349011,repo: facebook/react | issue: Bug: `React.use` inside `React.lazy`-ed component returns other `React.use` value on SSR | keyword: workaround
"> Is the issue closed? I want to work on this one. Could anyone please tell? there is already the PR, see https://github.com/facebook/react/pull/33941",,,,,,Anecdotal,comment,,,,,,,,2025-07-21,github/himself65,https://github.com/facebook/react/issues/33937#issuecomment-3097618734,repo: facebook/react | issue: Bug: `React.use` inside `React.lazy`-ed component returns other `React.use` value on SSR | keyword: workaround
"> > Is the issue closed? I want to work on this one. Could anyone please tell? > > there is already the PR, see [#33941](https://github.com/facebook/react/pull/33941) Yeah sorry about that.",,,,,,Anecdotal,comment,,,,,,,,2025-07-21,github/sairamarava,https://github.com/facebook/react/issues/33937#issuecomment-3097720515,repo: facebook/react | issue: Bug: `React.use` inside `React.lazy`-ed component returns other `React.use` value on SSR | keyword: workaround
"Bug: [eslint-plugin-react-hooks] False positive for `use` rule when using Effector ## Steps To Reproduce 1. Use the [Effector](https://effector.dev) library in a project. 2. Call `effect.use(handler)` ([docs](https://effector.dev/en/api/effector/effect/#methods-use-handler)) outside of a React component function. 3. ESLint throws an error, treating `use` as a React Hook used outside a component body. ## The current behavior The ESLint rule incorrectly flags the use of `effect.use()` (from the E…",,,,,,Anecdotal,issue,,,,,,,,2025-04-21,github/alexbidenko,https://github.com/facebook/react/issues/32976,repo: facebook/react | keyword: workaround | state: closed
I agree. The `isHookName` in another package (babel-plugin-react-compiler) lacks `s === 'use'` part too. https://github.com/facebook/react/blob/721350964952457e0b9286867c42135df0c5e787/compiler/packages/babel-plugin-react-compiler/scripts/babel-plugin-annotate-react-code.ts#L139-L141,,,,,,Anecdotal,comment,,,,,,,,2025-04-22,github/saul-atomrigs,https://github.com/facebook/react/issues/32976#issuecomment-2820505434,repo: facebook/react | issue: Bug: [eslint-plugin-react-hooks] False positive for `use` rule when using Effector | keyword: workaround
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-07-21,github/github-actions[bot],https://github.com/facebook/react/issues/32976#issuecomment-3095666277,repo: facebook/react | issue: Bug: [eslint-plugin-react-hooks] False positive for `use` rule when using Effector | keyword: workaround
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2025-07-28,github/github-actions[bot],https://github.com/facebook/react/issues/32976#issuecomment-3126044664,repo: facebook/react | issue: Bug: [eslint-plugin-react-hooks] False positive for `use` rule when using Effector | keyword: workaround
"fix: workaround React Compiler closure hoisting bug by using inline handlers # Pull Request for React Compiler Bug Workaround (Issue #33978) ## Summary This Pull Request addresses [Issue #33978] by providing a clear, easy-to-follow example and explanation of a React Compiler bug. The issue occurs when event handler functions are defined inside components and use variables from their outer scope—after compilation, these handlers lose access to those variables, causing errors. This PR shows how t…",,,,,,Anecdotal,issue,,,,,,,,2025-07-24,github/DEVBALIYAN21,https://github.com/facebook/react/pull/33979,repo: facebook/react | keyword: workaround | state: closed
"RFC: Plan for custom element attributes/properties in React 19 This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements. # TOC/Summary - Background - Proposals * Option 1: Only set properties + Pros - Easy to understand/implement - Avoids conflict with future global attributes - Takes advantage of custom element ""upgrade"" - Custom elements treated like any other React component + Cons - Possib…",,,,,,Anecdotal,issue,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347,repo: facebook/react | keyword: checklist | state: open
"Apologies for the long read, but I wanted to make sure I was thoroughly exploring each option. I don't want to bias things too much with my own opinion, but if I were in a position to choose, I think I'd go with option 3. Option 3 is backwards compatible, declarative, and explicit. There’s no need to maintain a fallback heuristic, and other libraries already provide similar sigils/modifiers.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-338878807,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Apologies for the long read, but I wanted to make sure I was thoroughly exploring each option. I don't want to bias things too much with my own opinion, but if I were in a position to choose, I think I'd go with option 3. Option 3 is backwards compatible, declarative, and explicit. There’s no need to maintain a fallback heuristic, and other libraries already provide similar sigils/modifiers.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/worawit15379,https://github.com/facebook/react/issues/11347#issuecomment-338907004,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"I'm between option 2 and option 3, I think that React has handled behavior and API changes very well in the past. Introducting warnings and links to docs might serve well to help developers understand what's happening under the hood. Option 3 looks attractive because of its declarative nature, while reading JSX code new coming developers will know immediately what React will do when rendering the element.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/jeremenichelli,https://github.com/facebook/react/issues/11347#issuecomment-338993691,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
### Comments on option 2 > Developers might be confused when React sets an attribute instead of a property depending on how they’ve chosen to load their element. Do consumers of a custom element need to understand this distinction? Or is that only important to the author of the custom element? It seems like the author of the element will need to handle attributes for anything used in HTML (since that is the only way data gets passed from HTML usage) and properties if they want to support comple…,,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/cjorasch,https://github.com/facebook/react/issues/11347#issuecomment-339032941,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"> Do consumers of a custom element need to understand this distinction? Or is that only important to the author of the custom element? I doubt it's actually a huge issue because, as you pointed out, the element author should define an attribute and property for the underlying value and accept data from both. I would also add that they should keep the attribute and property in sync (so setting one sets the other). > Naming collisions with future HTMLElement attributes and properties seems like a…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339042577,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"> it requires the consumer of the custom element to know whether the element has implemented something as a property or as an attribute That's not something React should worry as Rob said in my opinion, it's the custom element author's responsability to inform the user how the element works. And it's actually the way that we need to do it today, for example think about the `<video>` element, let's say you need to mute it or change the current time inside a component. `muted` works as a boolean …",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/jeremenichelli,https://github.com/facebook/react/issues/11347#issuecomment-339064822,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"If we were designing this from scratch, without needing to consider backwards compatibility, I think option 1 would be the most idiomatic per React’s [""JavaScript-centric API to the DOM""](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this). With regard to server-side rendering, could that problem be solved by providing an API for application code to inform React on how to map custom element properties to attributes? Similar to the maps that React alread…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339073351,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"> In the case where a custom element is lazy loaded and ""upgraded"", it will initially have undefined properties. This addresses that use case by making sure those elements still receive their data and they can use it post-upgrade. Maybe I don't understand the upgrade process. Elements would typically have properties defined as getters/setters in the class prototype. Checking `propName in element` would return true because of the existence of the getter/setter even if the property value was stil…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/cjorasch,https://github.com/facebook/react/issues/11347#issuecomment-339076139,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Upgrading is the process by which the custom element receives its class. Prior to that, it's not an instance of that class, so the property getters/setters aren't available.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339077023,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
@jeremenichelli > muted works as a boolean attribute just checked and it also has a corresponding property though it doesn't seem to be documented on MDN :P > For the current time you need to create a ref pointing to the video element and change the property. Yeah occasionally you'll encounter properties-only APIs on modern HTML elements. `currentTime` updates at a high frequency so it wouldn't make sense to reflect it to an HTML attribute. > My point is that wether you are relying on native or…,,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339083146,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"@robdodson yeap, I knew about the muted property too 😄 I just used these two to prove that already _in the wild_ there isn't a one-size-fits-all rule as you mentioned. We will have to rely on documentation on both native and custom elements, so it's something I wouldn't mind for this decision. While writing the last code snippet I kinda liked the property binding though 💟",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/jeremenichelli,https://github.com/facebook/react/issues/11347#issuecomment-339086544,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"@effulgentsia > However, I think it's unfortunate to make every instance of where a custom element is used in an application be responsible for knowing when to use an attribute vs. when to use a property. I think this is already the case today though. Since the major custom element libraries (polymer, skate, possibly others?) automatically create backing properties for all exposed attributes, developers could just use the sigil for every property on a custom element. It would probably be a rare…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339086772,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"> developers could just use the sigil for every property on a custom element If developers started doing that, then how would that differentiate using a property because you ""can"" from using a property because you ""must""? And isn't that a differentiation that's needed for server-side rendering?",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339097803,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"> If developers started doing that, then how would that differentiate using a property because you ""can"" from using a property because you ""must""? Sorry, maybe I phrased that wrong. I meant that developers would likely use the sigil because it would give the most consistent result. You can use it to pass primitive data or rich data like objects and arrays and it'll always work. I think working with properties at runtime is generally preferred to working with attributes since attributes tend to …",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339108602,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"> It might be the case that on the server the sigil would fallback to setting an attribute. I don't think that would work if the reason for the sigil is that it's a property that doesn't exist as an attribute, such as video's [currentTime](#issuecomment-339064822). > differentiate using a property because you ""can"" from using a property because you ""must"" I think this differentiation is important, because there's entirely different reasons for choosing to use an attribute or property as an opti…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339142476,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Sorry for the excessive comments, but I thought of another benefit to my proposal above that I'd like to share: Those `ReactDOM.defineCustomElementProp()` calls could be provided in a JS file maintained by the custom element author (in the same repository as where the custom element is maintained/distributed). It wouldn't be needed for custom elements with a strict 1:1 correspondence of property/attribute, which per this issue's Background statement is the recommendation and majority case anywa…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339175292,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
Option 3 would be my preferred but that's a huge breaking change... What about the inverse? Attributes have a prefix not props?,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/LeeCheneler,https://github.com/facebook/react/issues/11347#issuecomment-339242541,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
@LeeCheneler > Option 3 would be my preferred but that's a huge breaking change... What about the inverse? Attributes have a prefix not props? Why would it be a breaking change? The current behavior of attributes being the default would remain. The sigil would be opt-in and developers would use it to replace the spots in their code where they currently use a `ref` to pass data to a custom element as a JS property. @drcmda > neither new attributes that could break existing projects. Can you clar…,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339370893,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"FYI for anyone following the discussion, I've updated the RFC with a 5th option suggested by members of the React team.",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339378787,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Option 5 seems safest for us. It lets us add the feature without having to make a decision about “implicit” API right now since the ecosystem is still in the “figuring it out” phase. We can always revisit it in a few years. >Polymer’s paper-input element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write. My impression is that custom element users in React will eventually w…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/gaearon,https://github.com/facebook/react/issues/11347#issuecomment-339399195,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Building from [my earlier comment](#issuecomment-339142476), how about: ``` const XFoo = ReactDOM.createCustomElementType('x-foo', { propName1: { propertyName: string | null, attributeName: string | null, attributeSerializer: function | null, eventName: string | null, } propName2: { } ... }); ``` The logic would then be, for each React prop on an XFoo instance: 1. If the `eventName` for that prop is not null, register it as an event handler that invokes the prop value (assumed to be a function)…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339411386,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Alternatively, maybe it makes sense to keep events in a separate namespace, in which case, remove everything having to do with `eventName` from the last comment, and instead let events be registered as: ``` <XFoo prop1={propValue1} prop2={propValue2} events={event1: functionFoo, event2: functionBar}> </XFoo> ```",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339415445,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
@gaearon @effulgentsia what do y'all think of a combination of option 1 and option 5? Option 1 would make it easier for the casual user of a custom element to pass rich data. I'm imagining the scenario where I'm building an app and I just want to use a couple of custom elements. I already know how they work and I'm not so invested that I want to write a config for them. Option 5 would be for folks who want to use something like paper-input all over their app and would really like to expose its …,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339421081,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
For SSR of option 1 the heuristic could be always use an attribute if rendering on the server. A camelCase property gets converted to a dash-case attribute. That seems to be a pretty common pattern across web component libraries.,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339421654,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"I like the idea of an option1 + option5 combination a lot. Meaning that for most custom elements: ``` <x-foo prop1={propValue1}> ``` would work as expected: prop1 set as a property client-side and as a (dash-cased) attribute server-side. And people could switch to option5 for anything for which the above doesn't suit them. It would be a breaking change though from the way React 16 works. For anyone who experiences that breakage (e.g., they were using a custom element with attributes that aren't…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339427349,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Ah, this is what I get for reading this quickly on the train @robdodson 🤦‍♂️ ... Not really a fan of option 3 now 🤔 I read it as an all in on props being prefixed, hence my hesitation. Option 5 seems reasonable and straightforward. I like where @effulgentsia is heading. Is there a reason it couldn't be: ``` const XFoo = ReactDOM.createCustomElementType('x-foo', { propName1: T.Attribute, propName2: T.Event, propName3: T.Prop }) ``` Or is supporting multiple types on a single prop valuable? I'd b…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/LeeCheneler,https://github.com/facebook/react/issues/11347#issuecomment-339440016,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"@LeeCheneler: Quoting from the issue summary's Option 1 pros: > Any element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all ""just work"" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attr…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339459240,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Here's a thought for a less verbose version of [my earlier suggestion](#issuecomment-339411386): ``` const XFoo = ReactDOM.createCustomElementType('x-foo', { UNREFLECTED_ATTRIBUTES: [ 'my-attr-1', 'my-attr-2', ], UNREFLECTED_PROPERTIES: [ 'myProp1', 'myProp2', ], REFLECTED_PROPERTIES: { // This is default casing conversion, so could be omitted. someVeryLongName1: 'some-very-long-name-1', // In case anyone is still using all lowercase without dashes. someVeryLongName2: 'someverylongname2', // Wh…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339478530,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"Makes sense @effulgentsia 👍 I like your second example but is it not open to combinatorial explosion if more types gets added, ala events + whatever might make sense? ``` - UNREFLECTED_ATTRIBUTES - UNREFLECTED_PROPERTIES - UNREFLECTED_EVENTS - REFLECTED_PROPERTIES_ATTRIBUTES - REFLECTED_PROPERTIES_EVENTS - REFLECTED_ATTRIBUTES_EVENTS - REFLECTED_PROPERTIES_ATTRIBUTES_EVENTS ... ``` Although I suppose you wouldn't want to mix an event with a prop or attribute anyway 🤔 Attribute & prop are probab…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/LeeCheneler,https://github.com/facebook/react/issues/11347#issuecomment-339488778,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"I think there is an opportunity here for both the React and Web Component community to align on a best practice. React having an opinion here will go a long way in custom element authors being guided in the right direction due to its widespread adoption and weight that its opinions carry. Although I've authored the implementation of option 4, I'm *always* caught up by having to separate attributes and events from properties. Ideally, I'd prefer option 1. Practically, I think I'd prefer option 2…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/treshugart,https://github.com/facebook/react/issues/11347#issuecomment-339504323,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: checklist
"[Umbrella] Releasing Suspense Let's use this issue to track the remaining tasks for releasing Suspense to open source. **Last updated: March 24, 2022** **Blog post: [The Plan for React 18](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html)** ## Completed: React 16 - [x] Release `<Suspense>` with `React.lazy` for client-side lazy loading ## Completed: [React 18 Alpha](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html) - [x] Implement concurrent rendering, which is a pre…",,,,,,Anecdotal,issue,,,,,,,,2018-07-13,github/acdlite,https://github.com/facebook/react/issues/13206,repo: facebook/react | keyword: checklist | state: open
> Expose `unstable_AsyncMode` (maybe?) Isn't this [already exposed](https://github.com/facebook/react/blob/master/packages/react/src/React.js#L54)?,,,,,,Anecdotal,comment,,,,,,,,2018-07-13,github/aweary,https://github.com/facebook/react/issues/13206#issuecomment-404950040,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"Hey @acdlite, just a question about how to best prepare for this. Not asking for / expecting any kind of timeline, but wondering: Are you currently expecting these features to drop into React 16 and be easy to adopt incrementally, like the new Context API that landed with 16.3? Or are you thinking it'll be something that pushes React to v17 and require more work to adopt? Asking because I'm working on a roadmap that crosses over significantly with pretty much everything on your list and am tryi…",,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/JedWatson,https://github.com/facebook/react/issues/13206#issuecomment-407259036,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"Adding another question to @JedWatson's questions: - We also don't need/expect to get a timeline for a stable release, but would it be possible/useful to get a new prerelease? (AFAIK the newest release is `16.4.0-alpha.0911da3` from February.) Thank you! ❤️",,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/donaldpipowitch,https://github.com/facebook/react/issues/13206#issuecomment-407400860,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"IMO, they will provide a blog post like before before it's been landed. And I think you don't need to prepare too much because there is no breaking change(it does have many features that maybe would seems different/conflict with current practices, like redux fetch with suspense, but there will be a codemod or easy encapsulation to do this, you know, fb has 3W+ components). And if you watch the talk of @acdlite (about ssr suspense in ZEIT) and @gaearon (about client suspense in iceland), you wil…",,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/NE-SmallTown,https://github.com/facebook/react/issues/13206#issuecomment-407424836,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
@JedWatson This comment helped me understand [what a developer must do to help ensure that their application's are async safe](https://github.com/facebook/react/issues/13186#issuecomment-403959161).,,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/sebinsua,https://github.com/facebook/react/issues/13206#issuecomment-407470283,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"I'm working on rolling out the suspense module and new APIs in facebook. In case @acdlite is busy with something else, I'd like to share some of my thoughts of our experience in facebook and answer some questions of @JedWatson. > Are you currently expecting these features to drop into React 16 and be easy to adopt incrementally, like the new Context API that landed with 16.3? I'm not sure if it will come with React 16 or 17. According to the React team, it's likely to be released before the end…",,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/cyan33,https://github.com/facebook/react/issues/13206#issuecomment-407479037,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"@JedWatson > Are you currently expecting these features to drop into React 16 and be easy to adopt incrementally, like the new Context API that landed with 16.3? Incrementally. Always incrementally :) Otherwise there's no way we'd be able to ship this at Facebook. Here's what I'm expecting: | | Client | Server-side rendering | |-----------------|----------------------------|----------------------------------------------| | Suspense | Works everywhere* | Same constraints as existing server rende…",,,,,,Anecdotal,comment,,,,,,,,2018-07-24,github/acdlite,https://github.com/facebook/react/issues/13206#issuecomment-407535077,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"> There will be an awkward period after the initial release where many third-party frameworks (Redux, Apollo, React Router...) may not work properly in async mode. Apollo doesn't do awkward - we'll be ready! 🕺😳 Seriously though, we :heart: all things React, so making sure we're in-line with these changes for the initial release is not only a high priority, but it's also something we're super excited about! Thanks for all of your amazing work on this @acdlite!",,,,,,Anecdotal,comment,,,,,,,,2018-07-25,github/hwillson,https://github.com/facebook/react/issues/13206#issuecomment-407729301,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"I'll chime in and say that the Redux team is working on async compat for React-Redux. I laid out a potential roadmap at https://github.com/reduxjs/react-redux/issues/950 . TL;DR: - React-Redux 5.1 will hopefully work with `<StrictMode>` with no warnings (current PR: https://github.com/reduxjs/react-redux/pull/980 ) - 6.0 will be an internal rewrite to use the new context API, add ref forwarding, and possibly other changes, but try to keep as much of the current public API as possible (ie, `<Pro…",,,,,,Anecdotal,comment,,,,,,,,2018-07-25,github/markerikson,https://github.com/facebook/react/issues/13206#issuecomment-407818431,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"@acdlite Also question about suspense and async rendering. My question is once they are introduced and one starts writing apps with that new version of react: does it mean that react API and the way people code in react will change too? (even if they don't plan to use features of suspense and async rendering?) I assume it can be *trickier* to write react code with suspense and async rendering (maybe due to some new API or other constraints), and for those who don't need it, why force them to us…",,,,,,Anecdotal,comment,,,,,,,,2018-07-27,github/ghost,https://github.com/facebook/react/issues/13206#issuecomment-408522936,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
">I assume it can be trickier to write react code with suspense Have you had a chance to watch the second half of my talk? I'd say quite the opposite — it's way *less* trickier to use suspense for data fetching than anything else (including Redux, local state, or some other library).",,,,,,Anecdotal,comment,,,,,,,,2018-07-27,github/gaearon,https://github.com/facebook/react/issues/13206#issuecomment-408535094,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"@gaearon I haven't. I was speaking more in theory. Imagine there is already set of people who know react. If people don't need the feature of async rendering and suspense, why force them learn ""new"" react? Especially if the ""new"" react is tricker to use? But: I am not well informed so I might be wrong say about the ""trickier"" part - I am just sharing some of my thoughts :). In a way I am saying if 10% of apps need the feature of Suspense and async rendering, why in those other 90% cases force p…",,,,,,Anecdotal,comment,,,,,,,,2018-07-27,github/ghost,https://github.com/facebook/react/issues/13206#issuecomment-408540083,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"I think it's hard to have a conversation if you haven't looked at [my demos](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html) yet. To be clear: **there's no ""new React"",** these features don't break any existing patterns 🙂. They are additive. You don't need to write code in a completely different way to use those features either — although some of them only work if you [use modern lifecycle methods](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html). While t…",,,,,,Anecdotal,comment,,,,,,,,2018-07-27,github/gaearon,https://github.com/facebook/react/issues/13206#issuecomment-408542919,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"@gaearon > All old patterns keep working. Thanks for feedback Dan. Yeah that is how I thought, I suppose if people don't need those features they should be able to write the way they used to before those features were added. good luck.",,,,,,Anecdotal,comment,,,,,,,,2018-07-27,github/ghost,https://github.com/facebook/react/issues/13206#issuecomment-408544427,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"Hey Dan(@gaearon), I am not nitpicking but want to figure it out. Above you said: > But again, you don't have to use any of the new features if you don't want to. Old patterns will keep working. Which would suggest that I can code in new React the same way I did in ""old"" React, e.g. I could use the life cycle methods in the same way, etc. right? However, [here](https://github.com/reactjs/rfcs/issues/26#issuecomment-365744134), bvaughn says that getDerivedStateFromProps (or componentWillReceiveP…",,,,,,Anecdotal,comment,,,,,,,,2018-08-18,github/ghost,https://github.com/facebook/react/issues/13206#issuecomment-414075621,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"@giorgi-m : yes, the lifecycle methods are changing, but the point is that Suspense itself is an opt-in feature. All your existing React render methods and React's rendering behavior will work as-is. However, _if_ you opt in by adding an `<AsyncMode>` tag to a part of your app, _and_ you begin using Suspense's approach for indicating async data needs, _then_ you can take advantage of it. None of that happens if you don't add that to your codebase.",,,,,,Anecdotal,comment,,,,,,,,2018-08-18,github/markerikson,https://github.com/facebook/react/issues/13206#issuecomment-414077872,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
@giorgi-m `componentDidUpdate` should be used instead of `componentWillReceiveProps` or `getDerivedStateFromProps`.,,,,,,Anecdotal,comment,,,,,,,,2018-08-18,github/TrySound,https://github.com/facebook/react/issues/13206#issuecomment-414078206,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"@markerikson So you say that what bvaughn said [here](https://github.com/reactjs/rfcs/issues/26#issuecomment-365744134), that _getDerivedStateFromProps_ can be called many times for one update, is not necessarily the case, if I haven't enabled the` <AsyncMode/>`? (sorry for asking such questions just they popup to me from time to time, and didn't find resource which would cover all). ps. bvaughn also didn't mention the optionality of that in the linked thread, hence it raised my suspicion.",,,,,,Anecdotal,comment,,,,,,,,2018-08-18,github/ghost,https://github.com/facebook/react/issues/13206#issuecomment-414078304,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"Should a method for enqueueing asynchronous updates (e.g. `deferSetState()` for class components as opposed to renderer-specific `unstable_deferredUpdates()`) be added to the core checklist? From my understanding, any updates for fibers in async `mode` will be asynchronous, which in theory means that `deferSetState()` would be unnecessary. However, the [`unstable-async/suspense` demo](https://github.com/facebook/react/blob/a1be17140da0164d4dfce8e7c76e64f2d7e9216c/fixtures/unstable-async/suspens…",,,,,,Anecdotal,comment,,,,,,,,2018-08-22,github/pshrmn,https://github.com/facebook/react/issues/13206#issuecomment-415162126,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
">Support promise as a component type Related to this, when you have: ```js const PromiseType = new Promise(() => {}) class A extends Component { componentDidMount() {} componentDidUpdate() {} render() { return <div><PromiseType></PromiseType></div> } } ``` Are there any heuristics as to when `componentDidMount` and `componentDidUpdate` lifecycles would get called. 1. When all children have been resolved(including the promise), which in this case means they won't get called given the promise is …",,,,,,Anecdotal,comment,,,,,,,,2018-08-27,github/thysultan,https://github.com/facebook/react/issues/13206#issuecomment-416343134,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"@thysultan : `componentDidMount` and `componentDidUpdate` are called in the commit phase, when a UI tree has been fully rendered and applied to the DOM. So, based on my understanding of Suspense, I think the answer is that the `A` instance would never actually mount. If `PromiseType` _did_ get resolved, but one of its further descendants also attempted to wait for a promise that never resolves, it would again never mount. Thus, `cDM` and `cDU` would never be executed in those examples. (Someone…",,,,,,Anecdotal,comment,,,,,,,,2018-08-27,github/markerikson,https://github.com/facebook/react/issues/13206#issuecomment-416349092,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"Yea, `componentDidMount` or `componentDidUpdate` only execute in the *commit phase* which only executes after the **whole tree** has been resolved. This tree might include some placeholders that you've explicitly put there (depending on whether something inside them still suspends after we've waited long enough) — but if you explicitly render a child without a placeholder around it, you can never end up in a situation where it's ""not ready"".",,,,,,Anecdotal,comment,,,,,,,,2018-08-27,github/gaearon,https://github.com/facebook/react/issues/13206#issuecomment-416368010,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
I am really looking forward to being able to play with this (even browsed through a lot of source code only to figure out you hadn't put a working version of this on the world wide web yet). Is there anything we can do to help get this released? :D,,,,,,Anecdotal,comment,,,,,,,,2018-08-28,github/Kingdutch,https://github.com/facebook/react/issues/13206#issuecomment-416602948,repo: facebook/react | issue: [Umbrella] Releasing Suspense | keyword: checklist
"chore: fix a typo in rollup/forks (""suppport"" -> ""support"") ## Summary - This PR fixes a minor typo from `suppport` to `support` in `scripts/rollup/forks.js`. - No functional or logical changes. ## Reasoning - Accurate error messages are important for clarity and maintain a professional standard. ## Checklist - Only a comment typo fix, no code logic affected - CI checks pass - No need to add test cases - Adheres to project contribution guidelines If there’s any further feedback or changes neede…",,,,,,Anecdotal,issue,,,,,,,,2024-12-07,github/li-jia-nan,https://github.com/facebook/react/pull/31693,repo: facebook/react | keyword: checklist | state: closed
[vc]: #tEu6AqEIotvijaGkRtLC1+HDyfpvkcH/Je6XKd5PY+8=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJyZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL2Zib3BlbnNvdXJjZS9yZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kL0NVYjR5UW5UR0U5V2hFeVJQdDZaQnRpM0tXb0IiLCJwcmV2aWV3VXJsIjoicmVhY3QtY29tcGlsZXItcGxheWdyb3VuZC1naXQtZm9yay1saS1qaWEtbi0yNzkyNWQtZmJvcGVuc291cmNlLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjA…,,,,,,Anecdotal,comment,,,,,,,,2024-12-07,github/vercel[bot],https://github.com/facebook/react/pull/31693#issuecomment-2525076366,"repo: facebook/react | issue: chore: fix a typo in rollup/forks (""suppport"" -> ""support"") | keyword: checklist"
"@mofeiZ @eps1lon Hi, Could you review it ? thx If there’s any further feedback or changes needed, let me know",,,,,,Anecdotal,comment,,,,,,,,2025-01-22,github/li-jia-nan,https://github.com/facebook/react/pull/31693#issuecomment-2608389599,"repo: facebook/react | issue: chore: fix a typo in rollup/forks (""suppport"" -> ""support"") | keyword: checklist"
"Thanks for your contribution, but we're currently not accepting PRs to fix / change comments and internal errors. Closing as this is not a user facing error message or documentation.",,,,,,Anecdotal,comment,,,,,,,,2025-01-23,github/mofeiZ,https://github.com/facebook/react/pull/31693#issuecomment-2610577011,"repo: facebook/react | issue: chore: fix a typo in rollup/forks (""suppport"" -> ""support"") | keyword: checklist"
"Add scheduling profiler deployment CI job <!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory. Before submitting a pull request, please make sure the following is done: 1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`. 2. Run `yarn` in the repository root. 3. If you've fixed a bug …",,,,,,Anecdotal,issue,,,,,,,,2020-09-21,github/taneliang,https://github.com/facebook/react/pull/19874,repo: facebook/react | keyword: checklist | state: closed
"This pull request is automatically built and testable in [CodeSandbox](https://codesandbox.io). To see build info of the built libraries, click [here](https://ci.codesandbox.io/status/facebook/react/pr/19874/builds/56436) or the icon next to each commit SHA. Latest deployment of this branch, based on commit 38a15c783d78c0624552d73f58bf22b30e81264d: |Sandbox| Source | |--|--| |[React](https://codesandbox.io/s/react-3geyk)| Configuration |",,,,,,Anecdotal,comment,,,,,,,,2020-09-21,github/codesandbox-ci[bot],https://github.com/facebook/react/pull/19874#issuecomment-696151343,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-experimental; --> No significant bundle size changes to report. ## Size changes (experimental) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against 38a15c783d78c0624552d73f58bf22b30e81264d </p>",,,,,,Anecdotal,comment,,,,,,,,2020-09-21,github/sizebot,https://github.com/facebook/react/pull/19874#issuecomment-696156843,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-stable; --> No significant bundle size changes to report. ## Size changes (stable) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against 38a15c783d78c0624552d73f58bf22b30e81264d </p>",,,,,,Anecdotal,comment,,,,,,,,2020-09-21,github/sizebot,https://github.com/facebook/react/pull/19874#issuecomment-696157598,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"@bvaughn, would you mind setting up the deploy token environment variable in CircleCI? I've laid out the steps here: https://github.com/taneliang/react/blob/scheduling-profiler-deploy/packages/react-devtools-scheduling-profiler/README.md I'm also not sure if we want to test the deployment before merging this PR, as that'll require exposing CI secrets to all jobs running from forks. I'm quite sure everything will work as I've tried it though. Unrelated: I'll also rebase this on master since #196…",,,,,,Anecdotal,comment,,,,,,,,2020-09-21,github/taneliang,https://github.com/facebook/react/pull/19874#issuecomment-696205304,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"> @bvaughn, would you mind setting up the deploy token environment variable in CircleCI? I've laid out the steps here: @taneliang Done.",,,,,,Anecdotal,comment,,,,,,,,2020-09-21,github/bvaughn,https://github.com/facebook/react/pull/19874#issuecomment-696242284,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"Thanks @bvaughn! I've just tried deploying from this fork, and the deployment failed as expected because I can't access the deploy token. https://app.circleci.com/pipelines/github/facebook/react/5074/workflows/7269c720-0dd2-4164-9ff5-b9c2d70b8687/jobs/211378 Looks like this is ready for a review/merge, unless we want to do a test deployment first.",,,,,,Anecdotal,comment,,,,,,,,2020-09-22,github/taneliang,https://github.com/facebook/react/pull/19874#issuecomment-696587304,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"It works! 🎉 https://react-devtools-scheduling-profiler.vercel.app/ ![image](https://user-images.githubusercontent.com/12784593/93883623-6726f100-fd14-11ea-8430-eaa5c064764c.png) When will it be a good time to transfer the domains? I'll need to delete the domains off the MLH Fellowship Vercel account before you can add them, but that'll break the old domains until they're added to your account :)",,,,,,Anecdotal,comment,,,,,,,,2020-09-22,github/taneliang,https://github.com/facebook/react/pull/19874#issuecomment-696698293,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
Excellent 😁 Great work! We could transfer them now. I'm not sure what's required on my end though. 😅 I haven't used Vercel much.,,,,,,Anecdotal,comment,,,,,,,,2020-09-22,github/bvaughn,https://github.com/facebook/react/pull/19874#issuecomment-696703159,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"Ah! It's pretty simple: 1. At https://vercel.com/bvaughn/react-devtools-scheduling-profiler/settings/domains, just add these domains: * react-scheduling-profiler.vercel.app * scheduling-profiler-prototype.vercel.app (the first domain that was publicized within FB) * react-concurrent-mode-profiler.vercel.app (I was just squatting on it in case we wanted to use that) 1. Set redirects on the secondary domains: ![image](https://user-images.githubusercontent.com/12784593/93885257-87f04600-fd16-11ea-…",,,,,,Anecdotal,comment,,,,,,,,2020-09-22,github/taneliang,https://github.com/facebook/react/pull/19874#issuecomment-696706120,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"Huh okay, looks like it's because I was holding on to their *.now.sh versions. The last one should work now",,,,,,Anecdotal,comment,,,,,,,,2020-09-22,github/taneliang,https://github.com/facebook/react/pull/19874#issuecomment-696708496,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
Awesome! 😄 I've moved the original MLH deployment to https://mlh-react-scheduling-profiler.vercel.app/ in case we need it. cc @kartikcho,,,,,,Anecdotal,comment,,,,,,,,2020-09-22,github/taneliang,https://github.com/facebook/react/pull/19874#issuecomment-696710681,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"@bvaughn @taneliang heads up to whomever created this token: if you haven't already, you may want to delete this token in Vercel due to https://circleci.com/blog/january-4-2023-security-alert",,,,,,Anecdotal,comment,,,,,,,,2023-01-05,github/rickhanlonii,https://github.com/facebook/react/pull/19874#issuecomment-1372406422,repo: facebook/react | issue: Add scheduling profiler deployment CI job | keyword: checklist
"[ESLint] Feedback for 'exhaustive-deps' lint rule ## Common Answers 💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡 **We analyzed the comments on this post to provide some guidance: https://github.com/facebook/react/issues/14920#issuecomment-471070149.** 💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡 ---- ## What is this This is a new ESLint rule that verifies the list of dependencies for Hooks like `useEffect` and similar, protecting against the stale closure pitfalls. For most cases it has an autofix. We'll add more documentation over the n…",,,,,,Anecdotal,issue,,,,,,,,2019-02-21,github/gaearon,https://github.com/facebook/react/issues/14920,repo: facebook/react | keyword: checklist | state: closed
">**This example has a reply: https://github.com/facebook/react/issues/14920#issuecomment-466145690** [CodeSandbox](https://codesandbox.io/s/nqy69ol00) This is an uncontrolled Checkbox component which takes a `defaultIndeterminate` prop to set the indeterminate status on initial render (which can only be done in JS using a ref because there's no `indeterminate` element attribute). This prop is intended to behave like `defaultValue`, where its value is used only on initial render. The rule compla…",,,,,,Anecdotal,comment,,,,,,,,2019-02-21,github/billyjanitsch,https://github.com/facebook/react/issues/14920#issuecomment-466144466,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"Re: https://github.com/facebook/react/issues/14920#issuecomment-466144466 @billyjanitsch Would this work instead? https://codesandbox.io/s/jpx1pmy7ry I added `useState` for `indeterminate` which gets initialized to `defaultIndeterminate`. The effect then accepts `[indeterminate]` as an argument. You currently don't change it — but if you did it later, I guess that would work too? So the code anticipates future possible use case a bit better.",,,,,,Anecdotal,comment,,,,,,,,2019-02-21,github/gaearon,https://github.com/facebook/react/issues/14920#issuecomment-466145690,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
So I got this following (edge?) case where I pass some html and use it with `dangerouslySetInnerHtml` to update my component (some editorial content). I am not using the `html` prop but the ref where I can use `ref.current.querySelectorAll` to do some magic. Now I need to add `html` to my dependencies in `useEffect` even though I am not explicitly using it. Is this a use case where I actually should disable the rule? The idea is to intercept all the link clicks from the editorial content and tr…,,,,,,Anecdotal,comment,,,,,,,,2019-02-21,github/dan-lee,https://github.com/facebook/react/issues/14920#issuecomment-466205376,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"I'm using react-redux, so when passing down an action creator in the props from `mapDispatchToProps`, and using that action creator in a hook, I get a `exhaustive-deps` warning. So I can obviously add the redux action to the dependency array, but because the redux action is a function and never changes, this is unneccessary right?",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/joelmoss,https://github.com/facebook/react/issues/14920#issuecomment-466226093,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"```ts const onSubmit = React.useCallback( () => { props.onSubmit(emails); }, [emails, props] ); ``` I expect the lint to fix the deps into `[emails, props.onSubmit]`, but right now it always fix the deps into `[emails, props]`. > 1. A CodeSandbox demonstrating a **minimal code example** that still expresses your intent (not ""foo bar"" but **actual UI pattern** you're implementing). https://codesandbox.io/s/xpr69pllmz > 2. An explanation of the **steps** a user does and what you expect to see on …",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/lukyth,https://github.com/facebook/react/issues/14920#issuecomment-466283708,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"[CodeSandbox](https://codesandbox.io/s/k3x69zm7kr) It doesn't consider that mount and update can be distinctly different when integrating when 3rd party libs. The update effect can't be included in the mount one (and removing the array altogether), because the instance shouldn't be destroyed on every render",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/atomiks,https://github.com/facebook/react/issues/14920#issuecomment-466378650,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"Hi, Not sure what's wrong with my code here : ``` const [client, setClient] = useState(0); useEffect(() => { getClient().then(client => setClient(client)); }, ['client']); ``` I got `React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked`",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/sylvainbaronnet,https://github.com/facebook/react/issues/14920#issuecomment-466390157,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
@joelmoss @sylvainbaronnet I appreciate your feedback but I hid your comments because they didn't include the information we asked for at the top of the issue. That makes this discussion unnecessarily difficult for everyone because there's missing context. I'd be happy to continue the conversation if you post again and include all the relevant information (see the top post). Thank you for understanding.,,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/gaearon,https://github.com/facebook/react/issues/14920#issuecomment-466397576,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"1. [CodeSandbox](https://codesandbox.io/s/1r4m64r51l) 2. User can select a first name and it forces the last name to change. User can select a last name and it does not force the first name to change. 3. There's a custom hook which returns a piece of state, a select component that updates that state, and the state hook's update method that updates the state programmatically. As demonstrated, I don't always want to use the updater function so I left it to the be last item in returned array. I be…",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/btholt,https://github.com/facebook/react/issues/14920#issuecomment-466399126,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"I totally understand, and I would normally do all that for you, but in my specific case, none of the code is unique to me. It's simply a question about whether the use of a function that is defined outside of the hook (ie. a redux action creator) and used within a hook should require that function to be added as a hook dep. Happy to create a codesandbox if you still need more info. thx",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/joelmoss,https://github.com/facebook/react/issues/14920#issuecomment-466399504,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"Yes, a CodeSandbox would still help. Please imagine what it's like to context switch between people's code snippets all day. It's a huge mental toll. None of them look the same. When you need to remember how people use action creators in Redux or some other concept external to React it's even harder. The problem may sound obvious to you but it's not at all obvious to me what you meant.",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/gaearon,https://github.com/facebook/react/issues/14920#issuecomment-466400080,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"@gaearon I understand it makes sense, actually it worked for me because why I wanted to achieve was : > If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument. Thanks a lot for the clarification. (and sorry for the off topic)",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/sylvainbaronnet,https://github.com/facebook/react/issues/14920#issuecomment-466404593,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"Here's the code version of what I'm implementing. It don't look like much, but the pattern is 100% identical with my real code. https://codesandbox.io/s/2x4q9rzwmp?fontsize=14 * An explanation of the **steps** a user does and what you expect to see on the screen. Everything works great in this example! Except the linter issue. * An explanation of the **intended API** of your Hook/component. I've got several files like this, where I'm executing a function in the effect, but I only want it to run…",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/robbestad,https://github.com/facebook/react/issues/14920#issuecomment-466416518,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"@svenanders, I'm curious about the reason why you don't want to include `fetchPodcastsFn`? Is it because you find it change on every render? If it is, you probably want to memoize that function or make it static (in case it doesn't have any parameters)",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/tungv,https://github.com/facebook/react/issues/14920#issuecomment-466438258,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"For one - it's about clarity. When I look at the function, I want to easily understand when it should fire. If I see _one_ id in the array, it's crystal clear. If I see that id and a bunch of functions, it becomes more muddled. I have to spend time and effort, possibly even debugging functions, to understand what's going on. My functions don't change on runtime, so I don't know if memoizing them would matter (this one in particular is a dispatch action that fires off an epic, eventually resulti…",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/robbestad,https://github.com/facebook/react/issues/14920#issuecomment-466446652,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"https://codesandbox.io/s/4xym4yn9kx - **Steps** The user accesses a route on the page, but they're not a super user, so we want to redirect them away from the page. The `props.navigate` is injected via a router library so we don't actually want to use `window.location.assign` to prevent a page reload. Everything works! - **Intended API** I put in the dependencies correctly as in the code sandbox, but the linter is telling me that the dependency list should have `props` instead of `props.navigat…",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/ferdaber,https://github.com/facebook/react/issues/14920#issuecomment-466450926,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"**CodeSandbox:** https://codesandbox.io/s/711r1zmq50 **Intended API:** > This hook allows you to debounce any fast changing value. The debounced value will only reflect the latest value when the useDebounce hook has not been called for the specified time period. When used in conjunction with useEffect, as we do in the recipe, you can easily ensure that expensive operations like API calls are not executed too frequently. **Steps:** > The example allows you to search the Marvel Comic API and uses…",,,,,,Anecdotal,comment,,,,,,,,2019-02-22,github/ThisIsOstad,https://github.com/facebook/react/issues/14920#issuecomment-466587661,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
I have some feedback about enabling this rule to automatically work on custom hooks by convention. I can see in the source code that there is some intent to allow people to specify a regex to capture custom hooks by name: https://github.com/facebook/react/blob/ba708fa79b3db6481b7886f9fdb6bb776d0c2fb9/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L490-L492 What would the React team think about an additional naming convention for custom hooks with dependency arrays? Hooks already follo…,,,,,,Anecdotal,comment,,,,,,,,2019-02-23,github/knpwrs,https://github.com/facebook/react/issues/14920#issuecomment-466661890,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"It warning and auto remove of the custom equality check. ```js const myEqualityCheck = a => a.includes('@'); useCallback( () => { // ... }, [myEqualityCheck(a)] ); ```",,,,,,Anecdotal,comment,,,,,,,,2019-02-24,github/nghiepdev,https://github.com/facebook/react/issues/14920#issuecomment-466739392,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"For useEffect, I don't think the ""unnecessary dependency"" warning should appear because those ""dependencies"" will change how the effect fires. Let's say I have two counters, parent and child: - The counters can be incremented/decremented independently. - I want to reset the child counter to zero when the parent counter changes. Implementation: ```js const [parent, setParent] = useState(0); const [child, setChild] = useState(0); useEffect( () => { setChild(0); }, [parent] // ""unnecessary depende…",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/MrLeebo,https://github.com/facebook/react/issues/14920#issuecomment-467101598,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"@MrLeebo What about ```js const [parent, setParent] = useState(0); const [child, setChild] = useState(0); const updateChild = React.useCallback(() => setChild(0), [parent]); useEffect( () => { updateChild(); }, [updateChild] ); ``` I wouldn't understand that snippet of you either. The dependency can only be assumed based on your code but it might be a bug. While my proposal doesn't necessarily solve that it makes it at least more explicit. It looks like this was previously solved via `getDerive…",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/eps1lon,https://github.com/facebook/react/issues/14920#issuecomment-467121307,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
@nghiepit I hid your comment because you ignored the required checklist in the first post (e.g. CodeSandbox). Please follow the checklist and post again. Thanks.,,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/gaearon,https://github.com/facebook/react/issues/14920#issuecomment-467127347,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"@eps1lon You would have the exact same warning on `useCallback`, and I disagree with that pattern in general being an improvement over the original, but I don't want to derail the topic to talk about that. To clarify, I think the unnecessary dependency rule should be relaxed for `useEffect` or `useLayoutEffect` specifically, because they can contain effectful logic, but the rule should remain in place for `useCallback`, `useMemo`, etc.",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/MrLeebo,https://github.com/facebook/react/issues/14920#issuecomment-467148085,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"I'm running into some of the same issues/mental model questions that @MrLeebo has described here. My gut feeling is that the `useEffect` dependency rule can't be as strict. I have an incredibly contrived example that I was working on for a basic proof of concept idea. I know this code sucks and the idea isn't particularly useful, but I think it's a good illustration of the problem at hand. I think @MrLeebo expressed the question I am having quite well: >I think the question comes down to whethe…",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/ksaldana1,https://github.com/facebook/react/issues/14920#issuecomment-467195930,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"What about a single value that combines other values? Example: fullName is derived from `firstName` and `lastName`. We want to trigger the effect only when `fullName` changes (like when the user hits ""Save"") but also want to access the values it composes in the effect [Demo](https://codesandbox.io/s/503qlzw1nx) Adding `firstName` or `lastName` to the dependencies would break things since we only want to run the effect after `fullName` has changed.",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/aweary,https://github.com/facebook/react/issues/14920#issuecomment-467200609,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"@aweary I am not sure what value you are getting from the `useEffect` prop change indirection. It seems that your `onClick` should be handling that ""effect"". https://codesandbox.io/s/0m4p3klpyw As far as single values that combine other values, `useMemo` is probably going to be what you want. The delayed nature of the calculation in your example means it doesn't map exactly 1:1 with your linked behavior.",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/ksaldana1,https://github.com/facebook/react/issues/14920#issuecomment-467208389,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"I will create codesandbox links for these examples and edit this post. I have an extremely simple rule: if the current tab changed, scroll to the top: https://codesandbox.io/s/m4nzvryrxj ``` useEffect(() => { window.scrollTo(0, 0); }, [activeTab]); ``` And I got `React Hook useEffect has an unnecessary dependency: 'activeTab'. Either exclude it or remove the dependency array ` Also, when I was migrating some components, I want to replicate the componentDidMount behavior: ``` useEffect(() => { .…",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/bugzpodder,https://github.com/facebook/react/issues/14920#issuecomment-467212561,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"@ksaldana1 putting the side effect inside the event handler isn't sufficient. That would cause the side effect to occur before the actual update is committed, which might cause the side effect to trigger more often than you want. It also won't work when using `useReducer` because the updated state won't be available inside the event handler. > As far as single values that combine other values, `useMemo` is probably going to be what you want. If this example used `useMemo` it would break because…",,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/aweary,https://github.com/facebook/react/issues/14920#issuecomment-467218453,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
"@aweary Would something like this work? https://codesandbox.io/s/lxjm02j50m I'm very curious to see what the recommended implementation is. I'm also curious to hear more about a couple things you stated. Can you point me to any more info about these? Triggering and effect in handler: > that would cause the side effect to occur before the actual update is committed, which might cause the side effect to trigger more often than you want. Using `useReducer` state in event handler: > the updated sta…",,,,,,Anecdotal,comment,,,,,,,,2019-02-26,github/henryqdineen,https://github.com/facebook/react/issues/14920#issuecomment-467299225,repo: facebook/react | issue: [ESLint] Feedback for 'exhaustive-deps' lint rule | keyword: checklist
Update attribute-behavior fixture ## Summary Notable changes: 1. https://github.com/facebook/react/pull/22522#discussion_r756448293 1. https://github.com/facebook/react/pull/22522#discussion_r756444082 Wanted to add `imageSizes` and `imageSrcSet` and noticed that the `attribute-behavior` fixture is outdated. Fixture will still use the same APIs for 17 and next. Instead of changing APIs we just work around legacy warnings/errors. Individual commits describe changes in more detail. ## How did you…,,,,,,Anecdotal,issue,,,,,,,,2021-10-07,github/eps1lon,https://github.com/facebook/react/pull/22522,repo: facebook/react | keyword: checklist | state: closed
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 4e6eec69be632c0c0177c5b1c8a70397d92ee181...293f9e8823c85cbc9ff36d8c0fa4ea163944d811 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | oss-stable/react-dom/cjs/react-dom.production.min.js | **=** | 130.01 kB | 130.01 …",,,,,,Anecdotal,comment,,,,,,,,2021-10-07,github/sizebot,https://github.com/facebook/react/pull/22522#issuecomment-937746389,repo: facebook/react | issue: Update attribute-behavior fixture | keyword: checklist
">When creating a snapshot using the last commit where we updated the snapshot (feb134c), we get the following diff: Just to clarify, does this mean the browser behavior changed in the meantime for these other changes?",,,,,,Anecdotal,comment,,,,,,,,2021-11-25,github/gaearon,https://github.com/facebook/react/pull/22522#issuecomment-978635727,repo: facebook/react | issue: Update attribute-behavior fixture | keyword: checklist
"> Just to clarify, does this mean the browser behavior changed in the meantime for these other changes? Based on the assumption that the last time the file was changed, I committed all changes and not just the ones for `enterKeyHint `. Though it's fairly likely I just commited the changes for `enterKeyHint`. I didn't include the chrome version the last time but it may be possible to infer the Chrome version based on the commit date and check if the snapshot truly changed solely because of brows…",,,,,,Anecdotal,comment,,,,,,,,2021-11-25,github/eps1lon,https://github.com/facebook/react/pull/22522#issuecomment-978665422,repo: facebook/react | issue: Update attribute-behavior fixture | keyword: checklist
Fix #21972: Add `onResize` event to video elements ## Summary This is a simple fix for #21972 that adds support for the `onResize` media event. See #21972 for a detailed description of the problem. ## Test Plan - Run https://codesandbox.io/s/musing-snowflake-zb0qh?file=/src/App.js with the new additions. - `onResize` handler should not throw a warning ## Pre-commit checklist ([source](https://reactjs.org/docs/how-to-contribute.html#sending-a-pull-request)) ✅ Fork the repository and create your …,,,,,,Anecdotal,issue,,,,,,,,2021-07-27,github/rileyjshaw,https://github.com/facebook/react/pull/21973,repo: facebook/react | keyword: checklist | state: closed
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 87239321b0609f7bf1edaaba6aab6be24d6717b1...5ec46b2f906d4af192e095df31f74448f0f77b05 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | oss-stable/react-dom/cjs/react-dom.production.min.js | **+0.08%** | 127.51 kB | 12…",,,,,,Anecdotal,comment,,,,,,,,2021-07-27,github/sizebot,https://github.com/facebook/react/pull/21973#issuecomment-887797715,repo: facebook/react | issue: Fix #21972: Add `onResize` event to video elements | keyword: checklist
"Flush discrete updates immediately in a batched context ## Summary Given: ```js act(() => { button.click(); button.click(); }) ``` Previously each update from the click was batched inside act. However, in production React will never batch updates from user clicks since these are ""discrete"" events. With this PR discrete updates will be flushed immediately instead of being batched. The previous behavior resulted in bugs like https://github.com/facebook/react/issues/20074 not being detected via au…",,,,,,Anecdotal,issue,,,,,,,,2021-04-08,github/eps1lon,https://github.com/facebook/react/pull/21202,repo: facebook/react | keyword: checklist | state: closed
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 7841d0695ae4bde9848cf8953baf34d312d0cced...579bdc344e3cce20d689f6ed7208e8cf9d7b553b ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | oss-stable/react-dom/cjs/react-dom.production.min.js | **=** | 126.00 kB | 126.00 …",,,,,,Anecdotal,comment,,,,,,,,2021-04-08,github/sizebot,https://github.com/facebook/react/pull/21202#issuecomment-815529935,repo: facebook/react | issue: Flush discrete updates immediately in a batched context | keyword: checklist
> in production React will never batch updates from clicks Note that this is not quite true: https://github.com/facebook/react/pull/21223/files#diff-f734c325f6eb23cd0f816b11eac3c6437844de0db32c0839f0d32dde7a2c3124 Use of `element.click()` multiple times in one browser event would be batched. `act` works roughly as a browser task assuming you wait long enough to observe it. So technically this is testing what would happen in this scenario: `onClick={() => { element.click(); element.click(); }}` …,,,,,,Anecdotal,comment,,,,,,,,2021-04-10,github/sebmarkbage,https://github.com/facebook/react/pull/21202#issuecomment-817035073,repo: facebook/react | issue: Flush discrete updates immediately in a batched context | keyword: checklist
Thanks for the clarification. I didn't consider that scenario. > So technically this is testing what would happen in this scenario: onClick={() => { element.click(); element.click(); }} click() is probably a bad example here since that seems like an exotic use case. `focus()` is more likely to happen in discrete event handlers such as `keyDown` while also being the target of tests. So I do understand that wrapping discrete even dispatches in act does make sense if we want to simulate how these …,,,,,,Anecdotal,comment,,,,,,,,2021-04-10,github/eps1lon,https://github.com/facebook/react/pull/21202#issuecomment-817089664,repo: facebook/react | issue: Flush discrete updates immediately in a batched context | keyword: checklist
`act()` behavior and its interaction with discrete events changed a bit since I've openend it. There are various little suprises I've encountered when trying concurrent react in the latest experimental build. I'm going to compile these instead because it's not clear to me how the testing story is supposed to look now.,,,,,,Anecdotal,comment,,,,,,,,2021-05-26,github/eps1lon,https://github.com/facebook/react/pull/21202#issuecomment-848794638,repo: facebook/react | issue: Flush discrete updates immediately in a batched context | keyword: checklist
"DevTools: Add version to protocol used between backend/frontend # The problem DevTools packages are published to NPM and follow semver for their public APIs (e.g. [`connectToDevTools` from `react-devtools-core`](https://github.com/facebook/react/blob/master/packages/react-devtools-core/README.md#react-devtools-core-1)). However the protocol used to communicate between the [""backend"" and ""frontend"" components](https://github.com/facebook/react/blob/master/packages/react-devtools/OVERVIEW.md#over…",,,,,,Anecdotal,issue,,,,,,,,2021-04-21,github/bvaughn,https://github.com/facebook/react/issues/21326,repo: facebook/react | keyword: checklist | state: closed
Here is my proposal: * Release version 4.13.0 with: * Add a new message sent from the frontend to the embedded backend to check the protocol version. * Update the frontend to check for the new protocol version and show a message in the UI if it doesn't match _or_ if the backend doesn't respond (because it doesn't yet support this new message type). * Release version 4.10.x with: * Update the frontend to check for the new protocol version and show a message in the UI if any version is found. (An…,,,,,,Anecdotal,comment,,,,,,,,2021-04-21,github/bvaughn,https://github.com/facebook/react/issues/21326#issuecomment-824154297,repo: facebook/react | issue: DevTools: Add version to protocol used between backend/frontend | keyword: checklist
"I think _ideally_ for Flipper and RN, React DevTools frontend would just support all backwards version of the backend protocol (kind of like it supports all recent React versions) but I don't think this is feasible for me to maintain. (Also the ship has already sailed with past releases that did not specify a protocol version.) Even if that was not the case, I think frontend updates to things like inspecting element props and state (which use new React Suspense APIs) would just be too complicat…",,,,,,Anecdotal,comment,,,,,,,,2021-04-21,github/bvaughn,https://github.com/facebook/react/issues/21326#issuecomment-824168302,repo: facebook/react | issue: DevTools: Add version to protocol used between backend/frontend | keyword: checklist
"### e.g. backend requires a newer protocol than the frontend supports <img width=""429"" alt=""backend requires a newer protocol than the frontend supports"" src=""https://user-images.githubusercontent.com/29597/115642357-ca97f200-a2e8-11eb-859f-421a7cd7f7fb.png""> ### e.g. backend requires a older protocol than the frontend supports <img width=""418"" alt=""backend requires a older protocol than the frontend supports"" src=""https://user-images.githubusercontent.com/29597/115642363-cd92e280-a2e8-11eb-8cc…",,,,,,Anecdotal,comment,,,,,,,,2021-04-22,github/bvaughn,https://github.com/facebook/react/issues/21326#issuecomment-824465345,repo: facebook/react | issue: DevTools: Add version to protocol used between backend/frontend | keyword: checklist
Proposed new Suspense layout effect semantics This PR contains a proposed change to layout effect semantics within Suspense subtrees: If a component mounts within a Suspense boundary and is later hidden (because of something else suspending) React will cleanup that component’s layout effects (including React-managed refs). This change will hopefully fix existing bugs that occur because of things like reading layout in a hidden tree and will also enable a point at which to e.g. pause videos and …,,,,,,Anecdotal,issue,,,,,,,,2021-03-24,github/bvaughn,https://github.com/facebook/react/pull/21079,repo: facebook/react | keyword: checklist | state: closed
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: b48b38af68c27fd401fe4b923a8fa0b229693cd4...8c191e84eab2c0d1d48d9589a04152d44ce080a8 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | oss-stable/react-dom/cjs/react-dom.production.min.js | **=** | 122.62 kB | 122.63 …",,,,,,Anecdotal,comment,,,,,,,,2021-03-24,github/sizebot,https://github.com/facebook/react/pull/21079#issuecomment-806181341,repo: facebook/react | issue: Proposed new Suspense layout effect semantics | keyword: checklist
"This only touches layout effects (so kinda a good thing - considering they are less common in applications, so the impact is minimized). From the comments/tweets in the past I was under the impression that such a change is being discussed for all effects - was it always specifically about layout effects and I've just assumed the other intention? Or maybe passive effects got excluded from that in the process of experimenting with it? Is there any plan to experiment with similar semantics for pas…",,,,,,Anecdotal,comment,,,,,,,,2021-03-24,github/Andarist,https://github.com/facebook/react/pull/21079#issuecomment-806250245,repo: facebook/react | issue: Proposed new Suspense layout effect semantics | keyword: checklist
"> This only touches layout effects (so kinda a good thing - considering they are less common in applications, so the impact is minimized). From the comments/tweets in the past I was under the impression that such a change is being discussed for all effects - was it always specifically about layout effects and I've just assumed the other intention? Or maybe passive effects got excluded from that in the process of experimenting with it? Is there any plan to experiment with similar semantics for p…",,,,,,Anecdotal,comment,,,,,,,,2021-03-24,github/bvaughn,https://github.com/facebook/react/pull/21079#issuecomment-806252525,repo: facebook/react | issue: Proposed new Suspense layout effect semantics | keyword: checklist
"> We plan to offer a way to cleanup passive effects as well. This is just an incremental step. Will this be controllable by the user for passive effects? > React-managed refs are when a ref attribute is set on a host component (e.g. <div>), a class component, or a function component that uses the useImperativeHandle API. Gotcha, that's what I thought - thanks for clarifying 👍",,,,,,Anecdotal,comment,,,,,,,,2021-03-24,github/Andarist,https://github.com/facebook/react/pull/21079#issuecomment-806255877,repo: facebook/react | issue: Proposed new Suspense layout effect semantics | keyword: checklist
The failing `ReactLazy-test.internal.js` revealed a new scenario I need to add a case to `ReactSuspenseEffectsSemantics` for. - [x] Add new test,,,,,,Anecdotal,comment,,,,,,,,2021-03-29,github/bvaughn,https://github.com/facebook/react/pull/21079#issuecomment-809567087,repo: facebook/react | issue: Proposed new Suspense layout effect semantics | keyword: checklist
"I think everything passes now except the Suspense fuzz test, which caught a problem that I need to dig into: ```js <React.Suspense fallback=""Loading..."" > <React.Suspense> <React.Suspense> <Text initialDelay={9683} text=""E"" updates={[]} /> </React.Suspense> <Text initialDelay={4053} text=""C"" updates={ [ { ""beginAfter"": 1566, ""suspendFor"": 4142, }, { ""beginAfter"": 9572, ""suspendFor"": 4832, }, ] } /> </React.Suspense> </React.Suspense> ); ``` The variant yields `""E:0C:1""` when the test expects `""…",,,,,,Anecdotal,comment,,,,,,,,2021-03-30,github/bvaughn,https://github.com/facebook/react/pull/21079#issuecomment-809853767,repo: facebook/react | issue: Proposed new Suspense layout effect semantics | keyword: checklist
"Digging into the above failing test case further. The behavior of both control group and sync legacy render match. (New semantics aren't enabled for legacy roots.) In both groups we only create layout effects once. In the final batch of `ReactNoop.createRoot().render()` work though, the behavior differs. When the subtree suspends in an update, and gets hidden, the new branch destroys the layout effect but the old branch doesn't. This means that the second, larger `beginAfter` timeout is able to…",,,,,,Anecdotal,comment,,,,,,,,2021-03-30,github/bvaughn,https://github.com/facebook/react/pull/21079#issuecomment-810330781,repo: facebook/react | issue: Proposed new Suspense layout effect semantics | keyword: checklist
"Bug: Server-Side-Render bug Code: ```javascript function App() { if (typeof window === 'undefined') { return ( <div id=""your-comp-id-server""> <div id=""child-id-server"">server</div> </div> ) } return ( <div id=""your-comp-id-client""> <div id=""child-id-client"">client</div> </div> ) } // hydrate ReactDOM.hydrate( <React.StrictMode> <App /> </React.StrictMode>, document.getElementById('root') ); ``` React version: 17.0.1 ## Steps To Reproduce 1. clone example 2. run example Link to code example: htt…",,,,,,Anecdotal,issue,,,,,,,,2020-12-09,github/fall-wind,https://github.com/facebook/react/issues/20414,repo: facebook/react | keyword: checklist | state: closed
"Just scanned the code so sorry if this is unrelated but ```js function App() { if (typeof window === 'undefined') { return ( <div id=""your-comp-id-server""> <div id=""child-id-server"">server</div> </div> ) } return ( <div id=""your-comp-id-client""> <div id=""child-id-client"">client</div> </div> ) } ``` is problematic. For the same input client and server need to render the same result. Did you see a warning in the console like ""Warning: Prop `id` did not match. Server: ""child-id-server"" Client: ""ch…",,,,,,Anecdotal,comment,,,,,,,,2020-12-09,github/eps1lon,https://github.com/facebook/react/issues/20414#issuecomment-741849996,repo: facebook/react | issue: Bug: Server-Side-Render bug | keyword: checklist
"> Just scanned the code so sorry if this is unrelated but > > ```js > function App() { > if (typeof window === 'undefined') { > return ( > <div id=""your-comp-id-server""> > <div id=""child-id-server"">server</div> > </div> > ) > } > return ( > <div id=""your-comp-id-client""> > <div id=""child-id-client"">client</div> > </div> > ) > } > ``` > > is problematic. For the same input client and server need to render the same result. Did you see a warning in the console like ""Warning: Prop `id` did not matc…",,,,,,Anecdotal,comment,,,,,,,,2020-12-10,github/fall-wind,https://github.com/facebook/react/issues/20414#issuecomment-742195406,repo: facebook/react | issue: Bug: Server-Side-Render bug | keyword: checklist
"> Sorry, what's the bug here? The `reactroot` data attribute? Sorry, ""The expected behavior"" The information I provided is not very sufficient. The expected behavior: div id ""your-comp-id-server"" should be ""your-comp-id-client""; div id ""child-id-server"" should be ""child-id-client""; text ""client"" is my expected behavior.",,,,,,Anecdotal,comment,,,,,,,,2020-12-10,github/fall-wind,https://github.com/facebook/react/issues/20414#issuecomment-742197950,repo: facebook/react | issue: Bug: Server-Side-Render bug | keyword: checklist
"> Sorry, there is no warning in the console. you can run my demo to tell me what wrong. Using `yarn dev` I can see a warning though it's slightly different because you hydrated an empty container. Right now you should see ``` index.js:1 Warning: Expected server HTML to contain a matching <div> in <div>. at div at App ``` But this is because you're not actually sending the server-rendered markup (see ""view page source""). From what I can tell `yarn dev` is not actually using the server. To use th…",,,,,,Anecdotal,comment,,,,,,,,2020-12-10,github/eps1lon,https://github.com/facebook/react/issues/20414#issuecomment-742479243,repo: facebook/react | issue: Bug: Server-Side-Render bug | keyword: checklist
Improve DevTools editing interface This PR adds several improvements to the DevTools props/state/hooks/context editor: * You can rename object keys. * You can add or remove properties from objects and arrays. * The parsing logic for object values has been relaxed to no longer require attributes to be quoted or double quotes to be used for strings. It also adds unit tests to cover this functionality. (DevTools will degrade gracefully for older versions of React that do not inject the new reconci…,,,,,,Anecdotal,issue,,,,,,,,2020-09-04,github/bvaughn,https://github.com/facebook/react/pull/19774,repo: facebook/react | keyword: checklist | state: closed
"This pull request is automatically built and testable in [CodeSandbox](https://codesandbox.io). To see build info of the built libraries, click [here](https://ci.codesandbox.io/status/facebook/react/pr/19774/builds/55585) or the icon next to each commit SHA. Latest deployment of this branch, based on commit d3597ca083a0106f54308d5747d43aa41b8571b9: |Sandbox| Source | |--|--| |[React](https://codesandbox.io/s/react-d3zpi)| Configuration |",,,,,,Anecdotal,comment,,,,,,,,2020-09-04,github/codesandbox-ci[bot],https://github.com/facebook/react/pull/19774#issuecomment-687308222,repo: facebook/react | issue: Improve DevTools editing interface | keyword: checklist
<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-experimental; --> <details> <summary>Details of bundled changes.</summary> <p>Comparing: b3b1bb9ce282c107fe898e53ef70485c530d8f3c...d3597ca083a0106f54308d5747d43aa41b8571b9</p> ## react-dom File | Filesize Diff | Gzip Diff | Prev Size | Current Size | Prev Gzip | Current Gzip | ENV --- | --- | --- | --- | --- | --- | --- | --- react-dom.development.js | +0.5% | +0.2% | 903.97 KB | 908.28 KB | 205.9 KB | 206.4 KB | NODE_DEV **Reac…,,,,,,Anecdotal,comment,,,,,,,,2020-09-04,github/sizebot,https://github.com/facebook/react/pull/19774#issuecomment-687310043,repo: facebook/react | issue: Improve DevTools editing interface | keyword: checklist
<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-stable; --> <details> <summary>Details of bundled changes.</summary> <p>Comparing: b3b1bb9ce282c107fe898e53ef70485c530d8f3c...d3597ca083a0106f54308d5747d43aa41b8571b9</p> ## react-dom File | Filesize Diff | Gzip Diff | Prev Size | Current Size | Prev Gzip | Current Gzip | ENV --- | --- | --- | --- | --- | --- | --- | --- react-dom.development.js | +0.5% | +0.2% | 868.53 KB | 872.83 KB | 199.4 KB | 199.9 KB | NODE_DEV **ReactDOMFo…,,,,,,Anecdotal,comment,,,,,,,,2020-09-04,github/sizebot,https://github.com/facebook/react/pull/19774#issuecomment-687310247,repo: facebook/react | issue: Improve DevTools editing interface | keyword: checklist
"For anyone interested in testing these new features, here is a build of the extension: * [ReactDevTools.zip for Chrome](https://github.com/facebook/react/files/5241508/ReactDevTools.zip) * [ReactDevTools.zip for Firefox](https://github.com/facebook/react/files/5241533/ReactDevTools.zip) * [ReactDevTools.zip for Edge](https://github.com/facebook/react/files/5241534/ReactDevTools.zip) And here is an updated build of react/react-dom so you can test the new rename and delete UX: * [node_modules.zip…",,,,,,Anecdotal,comment,,,,,,,,2020-09-17,github/bvaughn,https://github.com/facebook/react/pull/19774#issuecomment-694461217,repo: facebook/react | issue: Improve DevTools editing interface | keyword: checklist
"Import React Concurrent Mode Profiler <!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory. Before submitting a pull request, please make sure the following is done: 1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`. 2. Run `yarn` in the repository root. 3. If you've fixed a bug or a…",,,,,,Anecdotal,issue,,,,,,,,2020-08-18,github/taneliang,https://github.com/facebook/react/pull/19634,repo: facebook/react | keyword: checklist | state: closed
"This pull request is automatically built and testable in [CodeSandbox](https://codesandbox.io). To see build info of the built libraries, click [here](https://ci.codesandbox.io/status/facebook/react/pr/19634/builds/47723) or the icon next to each commit SHA. Latest deployment of this branch, based on commit 5847027f1c9926ac387ed09ef6834316b82fcb51: |Sandbox| Source | |--|--| |[React](https://codesandbox.io/s/react-b389h)| Configuration |",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/codesandbox-ci[bot],https://github.com/facebook/react/pull/19634#issuecomment-675315724,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-stable; --> No significant bundle size changes to report. ## Size changes (stable) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against 5847027f1c9926ac387ed09ef6834316b82fcb51 </p>",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/sizebot,https://github.com/facebook/react/pull/19634#issuecomment-675316828,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-experimental; --> No significant bundle size changes to report. ## Size changes (experimental) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against 5847027f1c9926ac387ed09ef6834316b82fcb51 </p>",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/sizebot,https://github.com/facebook/react/pull/19634#issuecomment-675316967,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"Couple of questions! --- > * Our new `build` and `start` scripts were failing with this error: https://github.com/babel/babel/issues/11216#issue-576326728. I've followed the maintainer's recommendation and **updated all `@babel/*` packages across the repository**, excluding fixtures. We can easily revert this (i.e. https://github.com/facebook/react/pull/19634/commits/babe03cedd678e72d1caf54d889d930ad8b293a2) if there's a better solution. I know this is kind of a pain, but can you manually diff …",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-675526577,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
Let's maybe not commit the Chrome sample profile. It's pretty huge (18.2 MB) and I'd rather not bloat the Git checkout. Can we [strip it entirely so it's not in the history either](https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository)? If we need to upload it somewhere and link to it (via README or whatever) that's fine. That's a huge artifact though.,,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-675531430,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> can you manually diff the artifacts of the other packages (e.g. react, react-dom, scheduler, react-devtools*, etc) to ensure that there are no changes as a result of this update? Sure, I'll do a build on both master and this branch and see what's changed. Is there anything I should look out for in particular, or should I just check that nothing changed at all? > Can you clarify? Does this mean other DevTools packages are going to be broken in the meanwhile? Oh no, I meant that we're using the…",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/taneliang,https://github.com/facebook/react/pull/19634#issuecomment-675538223,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> Sure, I'll do a build on both master and this branch and see what's changed. Is there anything I should look out for in particular, or should I just check that nothing changed at all? Ideally, no change at all :smile: If there are changes, then let's review them carefully and make sure they wouldn't cause any regressions. > Oh no, I meant that we're using the latest version of css-loader, which is a few major versions ahead of the css-loader used in the other DevTools packages. Oh, ok gotcha.…",,,,,,Anecdotal,comment,,,,,,,,2020-08-18,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-675539328,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> Sure! I'll remove it tomorrow, and I'll try to remove all the other sample files in the history too. Done! What I did: 1. Ran [this `git-show-big-files` script](https://gist.github.com/mcxiaoke/b4bdad5727c9400bbf7d101f27297e86) to check what the largest files were: [I] ~/react (scheduling-profiler-import|…2) ./git-show-big-files.sh All sizes are in kB's. The pack column is the size of the object, compressed, inside the pack file. size SHA location 18625 593fcad24169745bffe7ddefc9be87f0183ea0f…",,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/taneliang,https://github.com/facebook/react/pull/19634#issuecomment-675876255,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> Ideally, no change at all 😄 If there are changes, then let's review them carefully and make sure they wouldn't cause any regressions. ### Main packages There are about 2300 lines of changes in the main React packages, but I didn't notice anything concerning. I've uploaded the diffs here: https://gist.github.com/taneliang/c193548a1d5f07f083486ce859c2edf1. Most of the differences seem to be one of the following: * Removal of an empty object when calling `Object.assign`, e.g.: ```diff - return O…",,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/taneliang,https://github.com/facebook/react/pull/19634#issuecomment-676184399,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
@taneliang Which OS are you on? I'm able to build DevTools packages in master without any problems using OS X and v12.16.2.,,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-676320206,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"Here's the [generated diff](https://gist.github.com/kartikcho/ffaeb0e1df859e898d5465c31f98f680) for react-devtools as discussed in the comment above. The diff seems to be minified so if that doesn't provide enough information, I'll run the commands again.",,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/kartikcho,https://github.com/facebook/react/pull/19634#issuecomment-676320910,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> Which OS are you on? I'm able to build DevTools packages in master without any problems using OS X and v12.16.2. I'm using Ubuntu 18.04 in WSL2 on Windows 10, running Node v12.18.3. According to https://github.com/babel/babel/issues/11216#issuecomment-595393641 on the Babel issue thread, it seems like only later versions of Node will see this error",,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/taneliang,https://github.com/facebook/react/pull/19634#issuecomment-676326208,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
I agree those changes to the React packages all look safe (either just whitespace changes or small improvements). Thank you for verifying that :bow:.,,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-676336287,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> > Which OS are you on? I'm able to build DevTools packages in master without any problems using OS X and v12.16.2. > > I'm using Ubuntu 18.04 in WSL2 on Windows 10, running Node v12.18.3. According to https://github.com/babel/babel/issues/11216#issuecomment-595393641 on the Babel issue thread, it seems like only later versions of Node will see this error Gotcha. I see the error too if I build with Node v14.",,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-676343840,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> Because this already seems to be broken on master, would you want to do this Babel upgrade in a different PR? Yes. If the only reason to do this upgrade was to fix DevTools for later Node versions, and that didn't actually work– let's move the deps upgrade to its own PR? Sorry to ask you to do this. It would safer though, seeing as how we're close to cutting a new release. Less chance of this merge getting reverted.",,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-676357657,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
> let's move the deps upgrade to its own PR? Sorry to ask you to do this. No worries! I had planned for that so the Babel upgrade commit could be cherry picked and reverted easily 😆 The PR is opened at https://github.com/facebook/react/pull/19647. I'll revert commit `a633ac3` in this PR once it's merged.,,,,,,Anecdotal,comment,,,,,,,,2020-08-19,github/taneliang,https://github.com/facebook/react/pull/19634#issuecomment-676409692,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"I think this is okay to merge as-is. I have some small suggestions (mentioned above) that could be made in a follow up PR, either by myself or you folks. I want to land #19647 first though, on its own. Then we can land this one.",,,,,,Anecdotal,comment,,,,,,,,2020-08-20,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-677710157,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"I don't have permissions to push to this repo, so I can't fix it. @kartikcho can you merge master and resolve the conflict?",,,,,,Anecdotal,comment,,,,,,,,2020-08-20,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-677748833,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"> I think this is okay to merge as-is. Exciting! 🥳 > I have some small suggestions (mentioned above) that could be made in a follow up PR, either by myself or you folks. Thanks for the suggestions! I'll look at them in greater detail tomorrow as it's late here, but I really like the idea of having a `ViewManager` 😄",,,,,,Anecdotal,comment,,,,,,,,2020-08-20,github/taneliang,https://github.com/facebook/react/pull/19634#issuecomment-677815959,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
Excellent work @taneliang and @kartikcho! I'm going to merge this now and we/I can follow up on some of the remaining items afterward.,,,,,,Anecdotal,comment,,,,,,,,2020-08-20,github/bvaughn,https://github.com/facebook/react/pull/19634#issuecomment-677816104,repo: facebook/react | issue: Import React Concurrent Mode Profiler | keyword: checklist
"useMutableSource hydration support Add hydration support for `useMutableSource` (resolves #18183) ### [View diff without white space.](https://github.com/facebook/react/pull/18771/files?w=1) ## Usage example ```js // 1. Render app on the server... // 2. Create root for hydration. and pre-register all mutable sources. // This eagerly records source versions to guard against tearing during (async) hydration. const root = ReactDOM.unstable_createRoot(container, { hydrate: true, mutableSources: [re…",,,,,,Anecdotal,issue,,,,,,,,2020-04-28,github/bvaughn,https://github.com/facebook/react/pull/18771,repo: facebook/react | keyword: checklist | state: closed
"This pull request is automatically built and testable in [CodeSandbox](https://codesandbox.io). To see build info of the built libraries, click [here](https://ci.codesandbox.io/status/facebook/react/pr/18771/builds/27442) or the icon next to each commit SHA. Latest deployment of this branch, based on commit ec01142def6f9034ca08ab2bd0311f61a2cb5340: |Sandbox| Source | |--|--| |[distracted-antonelli-dp5nz](https://codesandbox.io/s/distracted-antonelli-dp5nz)| Configuration |",,,,,,Anecdotal,comment,,,,,,,,2020-04-28,github/codesandbox-ci[bot],https://github.com/facebook/react/pull/18771#issuecomment-620835070,repo: facebook/react | issue: useMutableSource hydration support | keyword: checklist
"<!-- 0 failure: 1 warning: Failed to fetch b... 1 markdown notices DangerID: danger-id-stable; --> <table> <thead> <tr> <th width=""50""></th> <th width=""100%"" data-danger-table=""true"">Warnings</th> </tr> </thead> <tbody><tr> <td>:warning:</td> <td>Failed to fetch build artifacts for base commit: 23309eb386777ee229cfb6f9b70fcb7c7123388b</td> </tr> </tbody> </table> ## Size changes (stable) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against ec01…",,,,,,Anecdotal,comment,,,,,,,,2020-04-28,github/sizebot,https://github.com/facebook/react/pull/18771#issuecomment-620837234,repo: facebook/react | issue: useMutableSource hydration support | keyword: checklist
"<!-- 0 failure: 1 warning: Base commit is br... 1 markdown notices DangerID: danger-id-experimental; --> <table> <thead> <tr> <th width=""50""></th> <th width=""100%"" data-danger-table=""true"">Warnings</th> </tr> </thead> <tbody><tr> <td>:warning:</td> <td>Base commit is broken: 23309eb386777ee229cfb6f9b70fcb7c7123388b</td> </tr> </tbody> </table> ## Size changes (experimental) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against ec01142def6f9034ca…",,,,,,Anecdotal,comment,,,,,,,,2020-04-28,github/sizebot,https://github.com/facebook/react/pull/18771#issuecomment-620837488,repo: facebook/react | issue: useMutableSource hydration support | keyword: checklist
No objection. I had made and stashed that change earlier because I didn't feel strongly about it. Just pushed it.,,,,,,Anecdotal,comment,,,,,,,,2020-05-08,github/bvaughn,https://github.com/facebook/react/pull/18771#issuecomment-625990268,repo: facebook/react | issue: useMutableSource hydration support | keyword: checklist
"[WIP] Add base implementation of React Fire This an initial work-in-progress PR for React Fire. Better description to come at some point along with a TODO checklist. For more context, see the tracking issue #13525.",,,,,,Anecdotal,issue,,,,,,,,2018-12-03,github/trueadm,https://github.com/facebook/react/pull/14382,repo: facebook/react | keyword: checklist | state: closed
Why not link https://github.com/facebook/react/issues/13525 in here to have at least some basic info :),,,,,,Anecdotal,comment,,,,,,,,2018-12-03,github/danielkcz,https://github.com/facebook/react/pull/14382#issuecomment-443740511,repo: facebook/react | issue: [WIP] Add base implementation of React Fire | keyword: checklist
I got to take a look at this over the weekend. Unfortunately I didn’t have the chance to play with this yet but I’d like to summarize the changes that I’ve noted so far (I only really checked the event side of things): 1. There’s still a synthetic event system in place. Instead of all the synthetic event objects we monkey patch the native event object before we emulate the capture and bubble phases like we used to before. 2. Events are still listened at the document right now - The plan is to w…,,,,,,Anecdotal,comment,,,,,,,,2018-12-03,github/philipp-spiess,https://github.com/facebook/react/pull/14382#issuecomment-443741660,repo: facebook/react | issue: [WIP] Add base implementation of React Fire | keyword: checklist
"@philipp-spiess Sure, this PR is very early and things are highly likely to change. @FredyC Good point.",,,,,,Anecdotal,comment,,,,,,,,2018-12-04,github/trueadm,https://github.com/facebook/react/pull/14382#issuecomment-444081414,repo: facebook/react | issue: [WIP] Add base implementation of React Fire | keyword: checklist
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-default; --> ReactDOM: size: 0.0%, gzip: 0.0% <details> <summary>Details of bundled changes.</summary> <p>Comparing: 4a1072194fcef2da1aae2510886c274736017fbd...081610f312f6a23bec87d5713c3f4ef5e9fb531b</p> ## react-dom File | Filesize Diff | Gzip Diff | Prev Size | Current Size | Prev Gzip | Current Gzip | ENV --- | --- | --- | --- | --- | --- | --- | --- react-dom.development.js | 0.0% | -0.0% | 726.61 KB | 726.62 KB | 167.95 KB …",,,,,,Anecdotal,comment,,,,,,,,2018-12-20,github/sizebot,https://github.com/facebook/react/pull/14382#issuecomment-449001292,repo: facebook/react | issue: [WIP] Add base implementation of React Fire | keyword: checklist
"Issue #11827 Fix ShadowDOM input bug with setDefaultValue Fixes Issue #11827. #7253 successfully fixed the number input backspace bug with removing decimals by not re-setting the default value if `node === activeElement`. However, shadowDOM elements are wrapped in a shadowRoot element, so comparing them to `node` always triggered an update to `node.defaultValue` (which triggered `input`'s validation that removed the decimal point). I've updated `setDefaultState` to check for shadow DOM element,…",,,,,,Anecdotal,issue,,,,,,,,2018-01-08,github/chrisdieckhaus,https://github.com/facebook/react/pull/11986,repo: facebook/react | keyword: checklist | state: closed
"Generally this sort of thing is ""tested"" via a manual fixture. Check out fixtures/dom from the repo root for some existing ones and you can add one there. There is no automation, so don't be confused if you can't run them via a cli or something :P",,,,,,Anecdotal,comment,,,,,,,,2018-01-08,github/jquense,https://github.com/facebook/react/pull/11986#issuecomment-355877025,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
Added manual test case to `number-inputs/index.js`. Let me know if that's not the right place to put that.,,,,,,Anecdotal,comment,,,,,,,,2018-01-09,github/chrisdieckhaus,https://github.com/facebook/react/pull/11986#issuecomment-356166256,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
"@chrisdieckhaus Sorry, not quite yet. The test case needs to render React inside of a shadow dom root. Like use ReactDOM.render inside of a Shadow DOM to verify that it coordinates properly with the parent DOM (Sunny DOM 😛?). I left some thoughts. Essentially I think we just need to render the same number input test case inside of a Shadow DOM, then mount an associated custom element with React (inside of the render method of the fixture component).",,,,,,Anecdotal,comment,,,,,,,,2018-01-17,github/nhunzaker,https://github.com/facebook/react/pull/11986#issuecomment-358298041,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
"@nhunzaker, I added the native-shim.js file I mentioned earlier. I'm not sure if it's something that's acceptable to add, though. Take a look at it when you get a chance.",,,,,,Anecdotal,comment,,,,,,,,2018-01-28,github/chrisdieckhaus,https://github.com/facebook/react/pull/11986#issuecomment-361097322,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
"Hey! Awesome. I'm out of pocket for a bit, but I'll look at this first thing in Monday (traveling). Thank you for sticking with me!",,,,,,Anecdotal,comment,,,,,,,,2018-01-28,github/nhunzaker,https://github.com/facebook/react/pull/11986#issuecomment-361101782,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
"Ah this is interesting. Custom Elements are not supposed (yet) in Firefox, which prevents the Number Input test case page from rendering.",,,,,,Anecdotal,comment,,,,,,,,2018-02-04,github/chrisdieckhaus,https://github.com/facebook/react/pull/11986#issuecomment-362937248,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
"@chrisdieckhaus Hmm. We probably need to do a compatibility check. I think it would be fine if the fixture said something like ""This browser does not support custom elements, this fixture is invalid"". I apologize for getting back to this as late as I have. If you'd like me to pick this up, I'd be happy to carry this through.",,,,,,Anecdotal,comment,,,,,,,,2018-02-25,github/nhunzaker,https://github.com/facebook/react/pull/11986#issuecomment-368341969,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contribution.,,,,,,Anecdotal,comment,,,,,,,,2020-01-10,github/stale[bot],https://github.com/facebook/react/pull/11986#issuecomment-572935594,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
"Closing this pull request after a prolonged period of inactivity. If this issue is still present in the latest release, please ask for this pull request to be reopened. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2020-01-17,github/stale[bot],https://github.com/facebook/react/pull/11986#issuecomment-575536278,repo: facebook/react | issue: Issue #11827 Fix ShadowDOM input bug with setDefaultValue | keyword: checklist
"DevTools context menu Inspired by built-in browser console options, this PR adds the ability to copy specific props/state/context/hooks values to the clipboard and to store them in a global variables (`$reactTemp`). ## Checklist - [x] Add context menu component and hook. - [x] Add backend commands for copying variables, storing global values, and inspecting attributes (works similarly to pre-existing pattern for inspecting React components). - [x] Wire up context menu and backend commands to en…",,,,,,Anecdotal,issue,,,,,,,,2019-12-15,github/bvaughn,https://github.com/facebook/react/pull/17608,repo: facebook/react | keyword: checklist | state: closed
"This pull request is automatically built and testable in [CodeSandbox](https://codesandbox.io). To see build info of the built libraries, click [here](https://ci.codesandbox.io/status/facebook/react/pr/17608/builds/5316) or the icon next to each commit SHA. Latest deployment of this branch, based on commit 80931fb924a0df51d8a3be87977322b513f5afbd: |Sandbox| Source | |--|--| |[interesting-morse-sm6w3](https://codesandbox.io/s/interesting-morse-sm6w3)| Configuration |",,,,,,Anecdotal,comment,,,,,,,,2019-12-15,github/codesandbox-ci[bot],https://github.com/facebook/react/pull/17608#issuecomment-565765249,repo: facebook/react | issue: DevTools context menu | keyword: checklist
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-stable; --> No significant bundle size changes to report. ## Size changes (stable) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against 80931fb924a0df51d8a3be87977322b513f5afbd </p>",,,,,,Anecdotal,comment,,,,,,,,2019-12-15,github/sizebot,https://github.com/facebook/react/pull/17608#issuecomment-565765498,repo: facebook/react | issue: DevTools context menu | keyword: checklist
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-experimental; --> No significant bundle size changes to report. ## Size changes (experimental) <p align=""right""> Generated by :no_entry_sign: <a href=""https://danger.systems/js"">dangerJS</a> against 80931fb924a0df51d8a3be87977322b513f5afbd </p>",,,,,,Anecdotal,comment,,,,,,,,2019-12-15,github/sizebot,https://github.com/facebook/react/pull/17608#issuecomment-565765504,repo: facebook/react | issue: DevTools context menu | keyword: checklist
"Thanks for the quick feedback! I'll rename the ""safe"" function as soon as I can think of a better name.",,,,,,Anecdotal,comment,,,,,,,,2019-12-18,github/bvaughn,https://github.com/facebook/react/pull/17608#issuecomment-567186927,repo: facebook/react | issue: DevTools context menu | keyword: checklist
[Umbrella] React Flare This issue tracks tasks related to the React DOM implementation of the experimental React Events API (`react-events`) aka React Flare (our internal code-name for the project). The idea is to extend React's event system to include high-level events that allow for consistent cross-device and cross-platform behavior. *Note: For now this is completely experimental and won't affect the open source builds of React.* ## Core - [ ] Document specific UX patterns that this enables …,,,,,,Anecdotal,issue,,,,,,,,2019-03-29,github/necolas,https://github.com/facebook/react/issues/15257,repo: facebook/react | keyword: checklist | state: closed
Added some proposed event object data. Suggest forwarding (or creating) the `pointerType` on all events to allow userland customization based on modality that triggered an event; added non-standard `keyboard` type to Focus and Press events.,,,,,,Anecdotal,comment,,,,,,,,2019-04-04,github/necolas,https://github.com/facebook/react/issues/15257#issuecomment-480061309,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"Tracking some regressions I'm uncovering that seem to have been caused by the changes in 9ebe1768a8a58cb956d6c9c9c302acbb5a51760e. 1. `onPressMove` is not called when moving within the responder region. Looks like no `pointermove` events are dispatched to the Press module in the bubble phase, which is also breaking the pressRetention functionality. 2. No `pointerleave` and `pointerenter` events are dispatched to the Hover module in the bubble phase (discovered while investigating the Hover runt…",,,,,,Anecdotal,comment,,,,,,,,2019-04-16,github/necolas,https://github.com/facebook/react/issues/15257#issuecomment-483870851,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"In relation to those two regressions: could you add tests for them that fail, but skip them with a comment explaining they need to be fixed, linking to this issue? You don’t need to put them in Press-test or Hover-test, you can make specific isolated tests with them using a custom responder to demonstrate this breaking because of the linked PR (like how we test the onUnmount works). It seems like a bug in the capture/bubbling rather than a specific event responder module.",,,,,,Anecdotal,comment,,,,,,,,2019-04-16,github/trueadm,https://github.com/facebook/react/issues/15257#issuecomment-483881696,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"I got to the bottom of issue (1) and it turns out it's happening because different event modules can influence the propagation of the same synthetic event. In this case, `Hover` was preventing the propagation of `pointermove` to the root but `Press` was listening to `pointermove` on the root.",,,,,,Anecdotal,comment,,,,,,,,2019-04-17,github/necolas,https://github.com/facebook/react/issues/15257#issuecomment-484197825,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"@necolas We could make root events not get affected by target propagation stopping. We can move the target and the root event handling into separate functions, so that this logic handling root events continues to run. Right now, when a target event handle stopsPropagation, the early return skips over too events too. So we'd move this block of code out: https://github.com/facebook/react/blob/master/packages/react-dom/src/events/DOMEventResponderSystem.js#L581-L604",,,,,,Anecdotal,comment,,,,,,,,2019-04-17,github/trueadm,https://github.com/facebook/react/issues/15257#issuecomment-484203243,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"Yeah I played around with modifying that section of code to do just that. But I think you could still end up in situations where 2 different types of event components are listening to the same event defined as a `targetEventType` and the inner component is stopping propagation to the outer, e.g., `<Press><Hover>...`. That's why I mentioned the idea of limiting control over propagation to within event components of the same type, but haven't thought through the implications enough.",,,,,,Anecdotal,comment,,,,,,,,2019-04-17,github/necolas,https://github.com/facebook/react/issues/15257#issuecomment-484209119,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
Hi guys. Great work! Will React.unstable_createEventComponent support observers api like ResizeObserver and IntersectionObserver?,,,,,,Anecdotal,comment,,,,,,,,2019-05-09,github/TrySound,https://github.com/facebook/react/issues/15257#issuecomment-490809523,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"@TrySound Event responder modules are free to use whatever DOM APIs they want, so they could definitely use `ResizeObserver` and `IntersectionObserver`. We may even need to use them in some of the core responders soon.",,,,,,Anecdotal,comment,,,,,,,,2019-06-07,github/trueadm,https://github.com/facebook/react/issues/15257#issuecomment-499966108,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
Question regarding potential scroll module - have you considered adding smth like `.userInduced` property? It's highly useful to know if the scroll was triggered programatically or by user and it's also highly hard to determine this in user space.,,,,,,Anecdotal,comment,,,,,,,,2019-06-14,github/Andarist,https://github.com/facebook/react/issues/15257#issuecomment-502052233,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"It does get a bit difficult when the scrolling trigger is far from the listener, and making them aware of each other introduces fragile coupling. We've had a few such cases in DevTools. Especially if the focus signal is reactive to some state change.",,,,,,Anecdotal,comment,,,,,,,,2019-06-14,github/gaearon,https://github.com/facebook/react/issues/15257#issuecomment-502196646,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
Here's what I ask: if you have a request please take the time to provide plenty of context. What are the use cases? How are things difficult? How do you imagine a solution might work? etc.,,,,,,Anecdotal,comment,,,,,,,,2019-06-14,github/necolas,https://github.com/facebook/react/issues/15257#issuecomment-502211245,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"> What are the use cases? In example showing a ""sticker"" with a date at the top of the message feed. When a scroll is induced programmatically (or by the browser) then it's distracting to show such thing, but when a user scrolls on their own it makes sense from the UX perspective. > How are things difficult? Well, it's not a clear way of determining that in onScroll, so some kind of other tracking flags have to be introduced to solve this. It's in general tricky to handle all possible reasons o…",,,,,,Anecdotal,comment,,,,,,,,2019-06-14,github/Andarist,https://github.com/facebook/react/issues/15257#issuecomment-502292066,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"Consider another one - a floating ""scroll to bottom"" button which covers part of the chat feed. We'd like to show such when a user is scrolling on their own (with a delay etc) and hide it after they stop scrolling so we don't cover part of the chat feed constantly. And we i.e. have to work around for situations like mobile keyboard triggering onScroll (cause of the resize etc).",,,,,,Anecdotal,comment,,,,,,,,2019-06-22,github/Andarist,https://github.com/facebook/react/issues/15257#issuecomment-504652027,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"Given the grand retooling happening to the event system here, I would like to re-raise the following request under this umbrella, from https://github.com/facebook/react/issues/3751#issuecomment-416029781: TL;DR: listen to `focusin`/`focusout` rather than `focus`/`blur` native events. > But that is not the issue, IE 9-11 does support relatedTarget. The problem is that React binds the wrong event. React listens to events that don't have relatedTarget instead of the proper events that do have rela…",,,,,,Anecdotal,comment,,,,,,,,2019-09-26,github/craigkovatch,https://github.com/facebook/react/issues/15257#issuecomment-535274279,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"Hey guys, looks pretty cool this experimental event system. I wonder if there is still work to do, I would like to contribute to this. I see there are some pending tasks in the checklist but no open issues about them",,,,,,Anecdotal,comment,,,,,,,,2019-12-12,github/AlfredoGJ,https://github.com/facebook/react/issues/15257#issuecomment-565181276,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"We're not longer working on this particular approach and will be exploring other ways to work with the DOM event system in the future. We've concluded that the ""Flare"" event system is too high-level an abstraction and we'd like to explore something that is a bit more familiar to developers familiar with the DOM (e.g., addEventListener) and React's existing tools (e.g., hooks). Our goal is still to make it possible for library authors to work with passive events, capture/bubble phase, custom eve…",,,,,,Anecdotal,comment,,,,,,,,2019-12-13,github/necolas,https://github.com/facebook/react/issues/15257#issuecomment-565408356,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"That's a bummer - this API looked awesome and I had high hopes for it. I guess you have good reasons for not pursuing this, I'm eager to learn with what alternative you will come up with.",,,,,,Anecdotal,comment,,,,,,,,2019-12-17,github/Andarist,https://github.com/facebook/react/issues/15257#issuecomment-566563208,repo: facebook/react | issue: [Umbrella] React Flare | keyword: checklist
"🔥 Stop syncing the value attribute on inputs (behind a feature flag) This PR revives https://github.com/facebook/react/pull/10150, my original PR to remove value attribute syncing. **TODOs**: - [x] value set value, defaultValue set defaultValue - [x] checked sets checked, defaultChecked sets defaultChecked - [x] Remove warning if defaultValue changes (if it exists) - [x] Remove warning if defaultChecked changes (if it exists) - [ ] Can we get rid of wrapper state alltogether? - [x] Could we onl…",,,,,,Anecdotal,issue,,,,,,,,2018-08-31,github/nhunzaker,https://github.com/facebook/react/pull/13526,repo: facebook/react | keyword: checklist | state: closed
"<!-- 0 failure: 0 warning: 2 markdown notices DangerID: danger-id-default; --> ReactDOM: size: -0.2%, gzip: -0.5% <details> <summary>Details of bundled changes.</summary> <p>Comparing: 2d5c590cc2e0bffb1b3b9b2ace942faf39a5fb6d...5bb2e3922e22cdc7c0980f5b058e51f890ea8ff8</p> ## react-dom File | Filesize Diff | Gzip Diff | Prev Size | Current Size | Prev Gzip | Current Gzip | ENV --- | --- | --- | --- | --- | --- | --- | --- react-dom.development.js | -0.1% | -0.6% | 645.08 KB | 644.23 KB | 151.15 …",,,,,,Anecdotal,comment,,,,,,,,2018-08-31,github/pull-bot,https://github.com/facebook/react/pull/13526#issuecomment-417807954,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
Is there any other logic we can remove or simplify now? I was hoping some of the things we added over time might be unnecessary now. Although I'm aware some of your fixes were for issues that predated #6406.,,,,,,Anecdotal,comment,,,,,,,,2018-09-02,github/gaearon,https://github.com/facebook/react/pull/13526#issuecomment-417923749,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
">My original PR also removed synchronization for the checked attribute. However it isn't as problematic, and wasn't mentioned in #13525, so I didn't remove the behavior. I talked to @sebmarkbage, and the guiding principles we came up with are: * React DOM should do what you'd do if you were writing mutations manually. * We only support mutations on uncontrolled components. Our goal is to simplify the system and reduce the edge cases. So if we only set it out of courtesy for e.g. CSS selectors, …",,,,,,Anecdotal,comment,,,,,,,,2018-09-02,github/gaearon,https://github.com/facebook/react/pull/13526#issuecomment-417924900,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
"> Is there any other logic we can remove or simplify now? I was hoping some of the things we added over time might be unnecessary now. Although I'm aware some of your fixes were for issues that predated I was too. I'll take a second pass through. For everything else, I've started a checklist in the description of things I need to do.",,,,,,Anecdotal,comment,,,,,,,,2018-09-02,github/nhunzaker,https://github.com/facebook/react/pull/13526#issuecomment-417953953,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
You might also want to start by adding a feature flag for this. Because we'll want to keep both versions around for a while. It might be reasonable to fork some files like `ReactDOMFiberInput` completely later. Let's see which ones have the most feature flag checks after a bit of work.,,,,,,Anecdotal,comment,,,,,,,,2018-09-02,github/gaearon,https://github.com/facebook/react/pull/13526#issuecomment-417956284,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
"I did some more work today that I believe gets us most of the way there. I shouldn't continue to refine this anymore, next I need to: - [ ] Break down the changes into distinct feature flags - [ ] Test a few assumptions about defaultValue since we wrote the Chromium fix for value detachment - [ ] Follow up on some server side mismatching I'm really curious about the final item. How should SSR work when `value` has no influence over the value attribute client-side? I'm also starting to think tha…",,,,,,Anecdotal,comment,,,,,,,,2018-09-04,github/nhunzaker,https://github.com/facebook/react/pull/13526#issuecomment-418544367,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
"One idea for SSR is to very strictly adhere to ""value sets the property, defaultValue sets the attribute"". For this to work, we'd need to allow a user to set both properties at once without warning. I don't necessarily sponsor this idea 😸. This would be a breaking change for just about every server-side app, but it would keep things consistent in both environments. It also requires a user to be intentional about setting the value attribute for sensitive information, like passwords, which could …",,,,,,Anecdotal,comment,,,,,,,,2018-09-04,github/nhunzaker,https://github.com/facebook/react/pull/13526#issuecomment-418544972,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
"I believe all comments have been addressed and, reading through the code, I feel good about this change.",,,,,,Anecdotal,comment,,,,,,,,2018-09-12,github/nhunzaker,https://github.com/facebook/react/pull/13526#issuecomment-420705123,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
Is there a way to toggle this feature flag without recompiling react? When is this feature scheduled?,,,,,,Anecdotal,comment,,,,,,,,2019-02-25,github/burka,https://github.com/facebook/react/pull/13526#issuecomment-466991611,repo: facebook/react | issue: 🔥 Stop syncing the value attribute on inputs (behind a feature flag) | keyword: checklist
"useImperativeHandle callback never called (when rendering w/ enzyme) **Do you want to request a *feature* or report a *bug*?** bug **What is the current behavior?** I have the code: ``` function Form(props, ref) { React.useImperativeHandle(ref, () => { debugger; return { setErrors: () => {}, }; }); } export default React.forwardRef(Form); ``` When I use the component, the callback passed to `useImperativeHandle` is never called. (The debugger statement is never hit). The code that I have using …",,,,,,Anecdotal,issue,,,,,,,,2019-03-07,github/rally25rs,https://github.com/facebook/react/issues/15054,repo: facebook/react | keyword: checklist | state: closed
"You want: ```js const Form = React.forwardRef((props, ref) => { React.useImperativeHandle(ref, () => { debugger; return { setErrors: () => {}, }; }); }) ``` Don't miss `React.forwardRef`. In the future might make this unnecessary but we can't yet because that would have been a breaking change.",,,,,,Anecdotal,comment,,,,,,,,2019-03-07,github/gaearon,https://github.com/facebook/react/issues/15054#issuecomment-470666021,repo: facebook/react | issue: useImperativeHandle callback never called (when rendering w/ enzyme) | keyword: checklist
"@gaearon that is there, just on a separate line ``` function Form(props, ref) { ... } export default React.forwardRef(Form); ``` or in the linked codesanbox example ``` const Form = React.forwardRef(FormImpl); ``` I'm also thinking this might just be an enzyme issue, but not quite sure. Maybe something that enzyme is doing is causing react to not run that callback function?",,,,,,Anecdotal,comment,,,,,,,,2019-03-07,github/rally25rs,https://github.com/facebook/react/issues/15054#issuecomment-470666477,repo: facebook/react | issue: useImperativeHandle callback never called (when rendering w/ enzyme) | keyword: checklist
"I noticed that when executed through `enzyme.mount` my component's function `Form(props, ref)` is called with `null` as the `ref` parameter It looks like this comes from react's ``` function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) { ... var ref = workInProgress.ref; ``` `workInProgress` is a `FiberNode` and `workInProgress.ref` is `null` ----- The initial `react-dom.render` is called with a `WrapperComponent` that has a `ref` set to my inline fun…",,,,,,Anecdotal,comment,,,,,,,,2019-03-07,github/rally25rs,https://github.com/facebook/react/issues/15054#issuecomment-470670739,repo: facebook/react | issue: useImperativeHandle callback never called (when rendering w/ enzyme) | keyword: checklist
If this only happens with Enzyme you'll want to file it with Enzyme. If it turns out that it's due to React I'd be happy to look into it.,,,,,,Anecdotal,comment,,,,,,,,2019-03-07,github/gaearon,https://github.com/facebook/react/issues/15054#issuecomment-470672129,repo: facebook/react | issue: useImperativeHandle callback never called (when rendering w/ enzyme) | keyword: checklist
"Followed the chain and it looks like workarounds/fix existed on the enzyme side, and it's not to do with React. Closing this issue.",,,,,,Anecdotal,comment,,,,,,,,2019-09-04,github/threepointone,https://github.com/facebook/react/issues/15054#issuecomment-527828644,repo: facebook/react | issue: useImperativeHandle callback never called (when rendering w/ enzyme) | keyword: checklist
"Import React DevTools v4 This PR imports the entire [React DevTools v4 git repository](https://github.com/bvaughn/react-devtools-experimental) (with history). I will manually migrate open issues after this PR has landed. Despite its size, this PR is almost entirely additive: ```sh $git diff master --name-status | grep -v ""A"" M .circleci/config.yml M .eslintignore M .gitignore M package.json M packages/react-debug-tools/src/ReactDebugHooks.js M packages/react-devtools-core/package.json M package…",,,,,,Anecdotal,issue,,,,,,,,2019-08-13,github/bvaughn,https://github.com/facebook/react/pull/16381,repo: facebook/react | keyword: checklist | state: closed
"<!-- 0 failure: 1 warning: Failed to fetch b... DangerID: danger-id-default; --> <table> <thead> <tr> <th width=""50""></th> <th width=""100%"" data-danger-table=""true"">Warnings</th> </tr> </thead> <tbody><tr> <td>:warning:</td> <td> Failed to fetch build artifacts for base commit: f5125377543749a4cee6ac887a006b6567767862 </td> </tr> </tbody> </table> <p align=""right""> Generated by :no_entry_sign: <a href=""http://github.com/danger/danger-js/"">dangerJS</a> </p>",,,,,,Anecdotal,comment,,,,,,,,2019-08-14,github/sizebot,https://github.com/facebook/react/pull/16381#issuecomment-521370329,repo: facebook/react | issue: Import React DevTools v4 | keyword: checklist
You might need to tweak https://github.com/facebook/react/blob/868d02d6c65eb72da9013ab6c00d04a988d3a776/scripts/jest/preprocessor.js#L59-L72 to support your extra babel config file,,,,,,Anecdotal,comment,,,,,,,,2019-08-15,github/SimenB,https://github.com/facebook/react/pull/16381#issuecomment-521668763,repo: facebook/react | issue: Import React DevTools v4 | keyword: checklist
"@SimenB Thanks for the pointer. My original goal was to use a totally separate Jest entry point (with its own config, inside of the `react-devtools-shared` package) rather than trying to overload the already complicated root Jest configuration. But that was breaking for reasons I couldn't understand, and assumed was related to the fact that the package wasn't being seen as ""module"" (because of its folder structure). After seeing your comment on the other pR, I think it might have actually been …",,,,,,Anecdotal,comment,,,,,,,,2019-08-15,github/bvaughn,https://github.com/facebook/react/pull/16381#issuecomment-521671442,repo: facebook/react | issue: Import React DevTools v4 | keyword: checklist
Just synced in the post 4.0.0 launch changes (https://github.com/bvaughn/react-devtools-experimental/compare/6eb04b2..2843a15),,,,,,Anecdotal,comment,,,,,,,,2019-08-20,github/bvaughn,https://github.com/facebook/react/pull/16381#issuecomment-523174943,repo: facebook/react | issue: Import React DevTools v4 | keyword: checklist
"This PR is getting close to being landable, I think. Some of the new tests are failing though because they depend on both react DOM (to render the test app/code) and test renderer (to render DevTools). In particular, usage of hooks inside of test renderer causes the tests to fail.",,,,,,Anecdotal,comment,,,,,,,,2019-08-21,github/bvaughn,https://github.com/facebook/react/pull/16381#issuecomment-523611777,repo: facebook/react | issue: Import React DevTools v4 | keyword: checklist
"Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies ## For instructions and feedback, see the issue instead: ## >>> https://github.com/facebook/react/issues/14920 <<< -------- There's some polish missing (see checklist below) but a basic version should be working. ---------------------- Supersedes https://github.com/facebook/react/pull/14048 and later https://github.com/facebook/react/pull/14052. (Thanks @calebmer for starting this and @jamiebuilds for fixing …",,,,,,Anecdotal,issue,,,,,,,,2019-01-19,github/gaearon,https://github.com/facebook/react/pull/14636,repo: facebook/react | keyword: checklist | state: closed
<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-default; --> <details> <summary>Details of bundled changes.</summary> <p>Comparing: 0e67969cb1ad8c27a72294662e68fa5d7c2c9783...8b554ca49a656ea8471ac8012b81525e994eec64</p> ## eslint-plugin-react-hooks File | Filesize Diff | Gzip Diff | Prev Size | Current Size | Prev Gzip | Current Gzip | ENV --- | --- | --- | --- | --- | --- | --- | --- eslint-plugin-react-hooks.development.js | +72.2% | +76.7% | 25.51 KB | 43.93 KB | 5.87 KB | …,,,,,,Anecdotal,comment,,,,,,,,2019-01-19,github/sizebot,https://github.com/facebook/react/pull/14636#issuecomment-455739784,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"An advantage of the previous approach is that it gave you a way of marking a certain omission from the inputs array as false positives without disabling the lint rule for the entire array. ...however, the code sample I was about to paste as an example of that exception was actually not an exception. Here's a drastically simplified version of it: ```js const derivedValue = useMemo(() => derive(propA), [propA]) useEffect(() => { doThing(derivedValue, propB) }, [propA, propB]) ``` The second one w…",,,,,,Anecdotal,comment,,,,,,,,2019-01-23,github/Jessidhia,https://github.com/facebook/react/pull/14636#issuecomment-456642796,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
I'm curious about this item on the TO-DOs: > Be smart about [ref.current] (suggest [ref]) I didn't think React treated RefObject-s any differently as dependency / inputs for these hooks. This suggests that specifying a RefObject as a dependency will have it track the `current` property implicitly. Am I reading this right?,,,,,,Anecdotal,comment,,,,,,,,2019-02-06,github/jamiewinder,https://github.com/facebook/react/pull/14636#issuecomment-461229526,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"> I didn't think React treated RefObject-s any differently as dependency / inputs for these hooks. This suggests that specifying a RefObject as a dependency will have it track the `current` property implicitly. Am I reading this right? No; you're right that React treats a ref the same as any other in a dependency list. However, passing `.current` in deps is usually not you want since it gets mutated outside the render phase. (Particularly in the case you use `ref={r}` with `[r.current]`, your d…",,,,,,Anecdotal,comment,,,,,,,,2019-02-09,github/sophiebits,https://github.com/facebook/react/pull/14636#issuecomment-462023188,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"One (maybe bad) idea: perhaps the lint rule could ignore manually added deps that are properties of other deps. This might let programmers who use mutable objects use the rule. For example, imagine this code: ``` function Foo(props) { const environment = getEnvironment(); useEffect(() => { doSomething(environment): }, [environment]); } ``` And further imagine that environment is mutable and that you as the programmer know that doSomething() uses environment.userId. It’d sure be nice if the rule…",,,,,,Anecdotal,comment,,,,,,,,2019-02-16,github/aickin,https://github.com/facebook/react/pull/14636#issuecomment-464265255,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"With this code: ```js const Comp = ({ item, onClick }) => { const handleClick = useCallback( e => { save(item) onClick(item) }, [item.id, onClick] ) } ``` the linter gives me the following: > React Hook useCallback has missing [item], unnecessary [item.id] dependencies. Either fix or remove the dependency array react-hooks/reactive-deps My guess this is intentionally, because of: > The array of inputs is not passed as arguments to the effect function. Conceptually, though, that’s what they repr…",,,,,,Anecdotal,comment,,,,,,,,2019-02-18,github/dan-lee,https://github.com/facebook/react/pull/14636#issuecomment-464729092,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
">But do I really need to introduce a deep compare effect for this, even if the `item.id` check would suffice? Note there's technically no *deep* comparison. It would still be referential: `item !== prevItem`. Yes, it seems like you’d need to have `item` in your deps. Otherwise you risk closing over a stale `item`. For example, if it gets edited in a component above, but its ID doesn’t change.",,,,,,Anecdotal,comment,,,,,,,,2019-02-18,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-464753764,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"But I can guarantee the 'stability' of my `item` object, because it's coming from an API and is not changed in the runtime of my app whatsoever. Only if the ID is changed other contents also did. While writing this, I realized that I might just pass in `id` as a prop and skip the effect for that.",,,,,,Anecdotal,comment,,,,,,,,2019-02-18,github/dan-lee,https://github.com/facebook/react/pull/14636#issuecomment-464799678,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
">But I can guarantee the 'stability' of my `item` object, because it's coming from an API and is not changed in the runtime of my app whatsoever. Sure you can now — but the person using your component in a year might not know that the component makes this assumption. Generally components should be resistant to their props changing.",,,,,,Anecdotal,comment,,,,,,,,2019-02-18,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-464800276,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"Published `eslint-plugin-react-hooks@1.1.0-alpha.1` with latest fixes: * Ref containers, dispatch, and setState won't cause warnings when it's statically visible they are from `useRef` / `useState` / `useReducer`. They'll still be fixed by autofix if you have other violations though. * Better punctuation and grammar, the message look less overwhelming. * It warns for `useImperativeHandle` too now. Please give it a try! Testing instructions are at the top: https://github.com/facebook/react/pull/…",,,,,,Anecdotal,comment,,,,,,,,2019-02-18,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-464866714,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"The `useEffect` warning and fixes is causing infinite loops in my application, is this intentional or a good thing? One thing that I have notice is that the rule ask you to include all the possible dependencies in the Hook, no matter if is susceptible to change or not, but so far I have found that no matter the case always creates an infinite loop.",,,,,,Anecdotal,comment,,,,,,,,2019-02-19,github/davegomez,https://github.com/facebook/react/pull/14636#issuecomment-464933656,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"Thanks for your explanation @gaearon, I see the point. Moving forward… following gives me a warning: ``` const item = React.useRef() useEffect(() => { console.log(item) }, []) ``` > React Hook useEffect has a missing 'item' dependency. Either include it or remove the dependency array This one doesn't: ``` import { useRef } from 'react' const item = useRef() useEffect(() => { console.log(item) }, []) ``` Other hooks seem to work just fine and correctly identify the missing the dependency with ei…",,,,,,Anecdotal,comment,,,,,,,,2019-02-19,github/dan-lee,https://github.com/facebook/react/pull/14636#issuecomment-465025217,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"@davegomez Can you please provide a snippet of code? Unfortunately I can’t guess why it’s causing an infinite loop without seeing the code, and so I can’t judge whether the rule is faulty or something else. Ideally a CodeSandbox demo would be nice but even just a code snippet would be more helpful than nothing.",,,,,,Anecdotal,comment,,,,,,,,2019-02-19,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-465101387,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
@dan-lee Thanks. We’ll need to make the detection stronger. Currently it doesn’t check for `React.useRef`.,,,,,,Anecdotal,comment,,,,,,,,2019-02-19,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-465101737,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"Sure @gaearon, in fact you can have the whole code. https://github.com/davegomez/silky-charts/blob/master/src/hooks/useResize.js Those are the dependencies suggested by the rule.",,,,,,Anecdotal,comment,,,,,,,,2019-02-19,github/davegomez,https://github.com/facebook/react/pull/14636#issuecomment-465136878,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"@davegomez I think you bumped into a case where you need a ref to keep the ""current"" callback. If you want to avoid resubscribing. Same for debouncing function — your debouncing doesn't work because it re-setups the debouncing function on every render.",,,,,,Anecdotal,comment,,,,,,,,2019-02-19,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-465142773,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"I ran this rule against the work-in-progress DevTools rewrite. I didn't see any invalid warnings! (see https://github.com/bvaughn/react-devtools-experimental/commit/bec073365d14aba07ff98a589ab52301761e7a72) Very minor nits 😄 * I don't like inputs arrays that are longer than necessary. If you forget to add the state, the rule will also auto-add the state updater function (on `--fix`) which makes the inputs array longer than is strictly necessary. You can manually remove the setter function in th…",,,,,,Anecdotal,comment,,,,,,,,2019-02-19,github/bvaughn,https://github.com/facebook/react/pull/14636#issuecomment-465314565,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
> - [x] Consider not caring about dispatch and state setters if we can prove their origin > - [x] Possible middle ground: generate them on autofix but don't complain if missing May I ask why is that so? I got confused a few times now and I keep removing them anyway. Is there a reason to keep them?,,,,,,Anecdotal,comment,,,,,,,,2019-02-20,github/dan-lee,https://github.com/facebook/react/pull/14636#issuecomment-465657209,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
>May I ask why is that so? I got confused a few times now and I keep removing them anyway. Is there a reason to keep them? I just pushed a commit that doesn't add them by default. :-),,,,,,Anecdotal,comment,,,,,,,,2019-02-20,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-465658432,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
Published `eslint-plugin-react-hooks@1.1.0-rc.0` with a few changes. The rule was renamed to `exhaustive-deps`. I'll merge this in now but please feel free to add more comments to this PR as you test it.,,,,,,Anecdotal,comment,,,,,,,,2019-02-20,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-465694497,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"If this rule is unexpectedly firing for you, please post to https://github.com/facebook/react/issues/14920. I'll lock this PR to encourage sharing examples there from now on.",,,,,,Anecdotal,comment,,,,,,,,2019-02-21,github/gaearon,https://github.com/facebook/react/pull/14636#issuecomment-466125053,repo: facebook/react | issue: Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies | keyword: checklist
"[Compiler Bug]: breaks referencial stability in @tanstack/react-query ### What kind of issue is this? - [ ] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [x] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repro https://stac…",,,,,,Anecdotal,issue,,,,,,,,2025-08-15,github/TheSisb,https://github.com/facebook/react/issues/34211,repo: facebook/react | keyword: gotcha | state: open
Are you using the latest eslint-plugin-react-hooks RC? If you open this in [compiler playground](https://playground.react.dev/#N4Igzg9grgTgxgUxALhAgHgBwjALgAgDMoA7OXASwhPyjAQDEFc4ALAFVYpIHMAKAJT5gAHRr441MAWD4AJgENcCgDT4KYADIQFc7jzUIYMHPgC++ALy16ARShGAnn1Hj8+AI4OYjgNIJHZHwAbQByACMAGwVWUIBdFTF3dy8nBhIghTBHMnxBKwA+YSTk90kSaXwYBDBMK3wFAHcFCgJCZjY+UJ4ICB5IhAA6SQBbUIEAbhLS6txYGmraqbdzRPEzSbESgCUEBXJBugQAWQQRiD58yyLXUvLIAcHIvr5p5NCAQi-8AGVWaEicnwJAgBGqAFoYKR8NQqghIQgSHIjGpwlACHIIDV8I1Wqw4ftcODRpgKAMYB…,,,,,,Anecdotal,comment,,,,,,,,2025-08-15,github/josephsavona,https://github.com/facebook/react/issues/34211#issuecomment-3192837394,repo: facebook/react | issue: [Compiler Bug]: breaks referencial stability in @tanstack/react-query | keyword: gotcha
"Maybe I went a little too overboard on the _minimal_ repro if react-compiler is smart enough to optimize that away. However the issue persists with a more complicated setup: ``` import React from 'react'; import { useQuery } from '@tanstack/react-query'; const computeThing = () => { console.log( '!!! Should not re-run on re-render, but does with react-compiler!' ); return Math.sqrt(10 * 9 * 8 * 7 * 6 * 5); }; export function useFetchThing() { const { data, isLoading, error } = useQuery({ queryK…",,,,,,Anecdotal,comment,,,,,,,,2025-08-16,github/TheSisb,https://github.com/facebook/react/issues/34211#issuecomment-3193074661,repo: facebook/react | issue: [Compiler Bug]: breaks referencial stability in @tanstack/react-query | keyword: gotcha
"Gotcha, thanks for confirming. So we can maybe simplify to where there's a `computeThing(data)` call and the result of that is returned: [example playground](https://playground.react.dev/#N4Igzg9grgTgxgUxALhASwLYAcIwC4AEASggIZyEBmMEGBA5DGRfQNwA6AdpjvgcAShgEARSgIYATwIBfAtVoMAAnlKcwquAGsA9E3J4AtAEdxUtly5wI6wtexQ8CACoALNJwDmBALwEAFACUvgB8-FwEBNbqEAA2CAB0sRCe-hGRDACE2QQAyq7QsQAmBJwQhEyGMFCcBDYElUycRRIANAQARo4ERRAIYAQA7mh4rg3MRvZYaPEwmfTpgRy143iwtQCypKMJYMb4-gCMAAwEAFQEAJznBAAcNwDsNwBsNwCsS1wyy1wIAB…",,,,,,Anecdotal,comment,,,,,,,,2025-08-16,github/josephsavona,https://github.com/facebook/react/issues/34211#issuecomment-3193131733,repo: facebook/react | issue: [Compiler Bug]: breaks referencial stability in @tanstack/react-query | keyword: gotcha
"The problem in the reproduction is that the memoization wasn’t using `data`, and that the custom hook wasn’t doing anything with the `useMemo` result apart from logging it. Here’s a version where: - `computeThing` actually uses data - `useFetchThing` returns the result that `useMemo` computes - the component actually renders the result from `useFetchThing` and with that, everything works as expected: https://stackblitz.com/edit/vitejs-vite-hvnbdwnm?file=src%2FuseFetchThing.tsx",,,,,,Anecdotal,comment,,,,,,,,2025-08-16,github/TkDodo,https://github.com/facebook/react/issues/34211#issuecomment-3193526034,repo: facebook/react | issue: [Compiler Bug]: breaks referencial stability in @tanstack/react-query | keyword: gotcha
"Formalize top-level ES exports Currently we only ship CommonJS versions of all packages. However we might want to ship them as ESM in the future (https://github.com/facebook/react/issues/10021). We can't quite easily do this because we haven't really decided on what top-level ES exports would look like from each package. For example, does `react` have a bunch of named exports, but also a default export called `React`? Should we encourage people to `import *` for better tree shaking? What about …",,,,,,Anecdotal,issue,,,,,,,,2017-11-09,github/gaearon,https://github.com/facebook/react/issues/11503,repo: facebook/react | keyword: gotcha | state: open
"Imho `import *` is a way to go, Im not opposed to having a default export too, but it shouldnt be used to reexport other stuff like in this example: ```js export const Component = ... export default React React.Component = Component ```",,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-343229904,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
>but it shouldnt be used to reexport other stuff like in this example: Is there a technical reason why? (Aside from having two ways to do the same thing.) My impression is that people who would import `*` (and not use the default) wouldn't have problems tree shaking since default would stay unused. But maybe I overestimate Rollup etc.,,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-343236253,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"That questions can be probably best answered by @lukastaegert. Ain't sure if something has changed since https://github.com/facebook/react/issues/10021#issuecomment-335128611 Also Rollup is not the only tree shaker out there, and while webpack's tree-shaking algorithm is worse than the one in rollup, it's usage is probably way higher than rollup's (both tools do excellent jobs ofc, I don't want to offend anyone, just stating facts) and if we can (as the community) help both tools at once we sho…",,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-343273033,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"is tree-shaking going to _do_ anything in React's case, given that everything is preprocessed into a single flat bundle? I wonder what the primary import style is for React, personally i tend to treat it like a default export e.g. `React.Component`, `React.Children` but occasionally do the named thing with `cloneElement`",,,,,,Anecdotal,comment,,,,,,,,2017-11-09,github/jquense,https://github.com/facebook/react/issues/11503#issuecomment-343292936,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"As @gaearon already stated elsewhere, size improvements in case of react are expected to be minimal. Nevertheless, there ARE advantages: * React.Children might probably be removed in some cases (so I heard 😉) * React itself can be hoisted into the top scope by module bundlers that support this. This could again remove quite a few bytes and might also grant an oh-so-slight performance improvement. The main improvement would lie in the fact that there does not need to be another variable that ref…",,,,,,Anecdotal,comment,,,,,,,,2017-11-10,github/lukastaegert,https://github.com/facebook/react/issues/11503#issuecomment-343378081,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"This is also an interesting case: https://github.com/facebook/react/issues/11526. While monkeypatching for testing is a bit shady, we'll want to be conscious about breaking this (or having a workaround for it).",,,,,,Anecdotal,comment,,,,,,,,2017-11-13,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-343991941,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Came here via [this Twitter conversation](https://twitter.com/dan_abramov/status/933754555124322305). For me, there's a clear correct answer to this question: React and ReactDOM should **only** export named exports. They're not objects that contain state, or that other libraries can mutate or attach properties to (#11526 notwithstanding) — the only reason they exist is as a place to 'put' `Component`, `createElement` and so on. In other words, namespaces, which should be imported as such. (It a…",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Rich-Harris,https://github.com/facebook/react/issues/11503#issuecomment-346678011,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"People have really come to like ```js import React, { Component } from 'react' ``` so convincing them to give it up might be difficult. I guess this is not too bad, even if a bit odd: ```js import * as React from 'react'; import { Component } from 'react'; ``` To clarify, we need `React` to be in scope (in this case, as a namespace) because JSX transpiles to `React.createElement()`. We could break JSX and say it depends on global `jsx()` function instead. Then imports would look like: ```js imp…",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-346678719,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Confession: I always found it slightly odd that you have to explicitly import `React` in order to use JSX, even though you're not actually using that identifier anywhere. Perhaps in future, transpilers could insert `import * as React from 'react'` (configurable for the sake of Preact etc) on encountering JSX, if it doesn't already exist? That way you'd only need to do this... ```js import { Component } from 'react'; ``` ...and the namespace import would be taken care of automatically.",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Rich-Harris,https://github.com/facebook/react/issues/11503#issuecomment-346681964,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"In a distant future, maybe. For now we need to make sure transpilers work with other module systems (CommonJS or globals). Making this configurable is also a hurdle, and further splits the community.",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-346682287,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"What @Rich-Harris suggested (inserting a specific import when jsx is used) is easily done by transpilers plugin. The community would have to upgrade their `babel-plugin-transform-react-jsx` and that's it. And of course even existing setups would still work if only one adds `import * as React from 'react';` to the file. Of course we need to consider other module systems, but it doesn't seem like a hard problem to solve. Are there any specific gotchas in mind?",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-346691248,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
">Of course we need to consider other module systems, but it doesn't seem like a hard problem to solve. Are there any specific gotchas in mind? I don’t know, what is your specific suggestion as to how to handle it? Would what the default be for Babel JSX plugin?",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/gaearon,https://github.com/facebook/react/issues/11503#issuecomment-346693159,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"> People have really come to like > >``` >import React, { Component } from 'react' >``` What people? Come forth so that I may mock thee.",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/jamiewinder,https://github.com/facebook/react/issues/11503#issuecomment-346693989,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Default is at the moment [`React.createElement`](`https://github.com/babel/babel/tree/6d820a27578254603ad6d6623277f31d5410a37c/packages/babel-plugin-transform-react-jsx#pragma`) and it would pretty much stay the same. The only problem is that it assumes a global now (or already available in the scope). I think as es modules are basically the standard way (although not yet adopted by all) of doing modules, it is reasonable to assume majority is (or should) use it. Vast majority already uses vari…",,,,,,Anecdotal,comment,,,,,,,,2017-11-23,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-346702610,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"> Should we encourage people to import * for better tree shaking? Thanks to @alexlamsl `uglify-es` has eliminated the `export default` penalty in common scenarios: ```js $ cat mod.js export default { foo: 1, bar: 2, square: (x) => x * x, cube: (x) => x * x * x, }; ``` ```js $ cat main.js import mod from './mod.js' console.log(mod.foo, mod.cube(mod.bar)); ``` ```js $ rollup main.js -f es --silent | tee bundle.js var mod = { foo: 1, bar: 2, square: (x) => x * x, cube: (x) => x * x * x, }; console…",,,,,,Anecdotal,comment,,,,,,,,2017-12-03,github/kzc,https://github.com/facebook/react/issues/11503#issuecomment-348753282,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"wow, that's great new 👏 is `uglify-es` considered to be stable now? I recall you mentioning few months back that it isn't there quite yet, but I can remember that incorrectly, so ain't sure. Anyway - that's all and nice in a rollup world, but considering that `React` is bundled mostly in apps and those use mostly `webpack` which does not do scope hoisting by default, I'd still say that exporting an object as default should be avoided to aid other tools than `uglisy-es`+`rollup` in their efforts…",,,,,,Anecdotal,comment,,,,,,,,2017-12-03,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-348756318,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"> is uglify-es considered to be stable now? As stable as anything else in the JS ecosystem. Over 500K downloads per week. > that's all and nice in a rollup world, but considering that React is bundled mostly in apps and those use mostly webpack which does not do scope hoisting by default Anyway, it's an option. Webpack defaults are not ideal anyway - you have to use `ModuleConcatenationPlugin` as you know.",,,,,,Anecdotal,comment,,,,,,,,2017-12-03,github/kzc,https://github.com/facebook/react/issues/11503#issuecomment-348795831,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Adding a few cents here: * I totally agree with @Rich-Harris that semantically, named exports are the right choice * I really do not like either `import React from 'react'` or `import * as React from 'react'` just to be able to use JSX syntax. In my eyes, this design is clearly violating the Interface Segregation Principle in that it forces users to import all of React just to be able to use the `createElement` part (though admittedly with a namespace export, a bundler like Rollup will strip ou…",,,,,,Anecdotal,comment,,,,,,,,2017-12-04,github/lukastaegert,https://github.com/facebook/react/issues/11503#issuecomment-348880382,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Personally I do not see much gain in migrating to `jsx` helper as the default IMHO for the babel plugin should be importing it from the `react` package, so the name of the actual helper doesn't really matter - the rest is just matter of having it configurable.",,,,,,Anecdotal,comment,,,,,,,,2017-12-04,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-348933167,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"This is probably slightly tangential to the main discussion, but I'm curious how well ES modules work with checking `process.env.NODE_ENV` to conditionally export dev/prod bundles? For example, https://github.com/facebook/react/blob/d9c1dbd61772f8f8ab0cdf389e70463d704c480b/packages/react/npm/index.js#L3-L7 I may be missing something obvious here, but I'm struggling to see how to translate this pattern into ES modules?",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/NMinhNguyen,https://github.com/facebook/react/issues/11503#issuecomment-350959095,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"`process.env.NODE_ENV` checks can be at more granular (code) level though, ready to be replaced by the bundler with appropriate values.",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-350996032,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"@Andarist @milesj Thanks for confirming my suspicion :) > `process.env.NODE_ENV` checks can be at more granular (code) level though, ready to be replaced by the bundler with appropriate values. From the React 16 [blog post](https://reactjs.org/blog/2017/09/26/react-v16.0.html#better-server-side-rendering) I thought that the `process.env.NODE_ENV` checks were pulled out to the very top on purpose (as opposed to them being more granular, which is what they are in the source, if I'm not mistaken),…",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/NMinhNguyen,https://github.com/facebook/react/issues/11503#issuecomment-351060910,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"> Like, I'm not sure how one could use the module field in package.json and differentiate between dev/prod for ESM while keeping ES bundles flat and not affecting Node.js perf This for sure is a drawback, because there is no standard way at the moment for doing this. OTOH it's just a matter of tooling, it is possible (and it's rather easy) to compile this in build steps of your application even today. Ofc it would be easier if package could expose dev/prod builds and the resolver would just kno…",,,,,,Anecdotal,comment,,,,,,,,2017-12-12,github/Andarist,https://github.com/facebook/react/issues/11503#issuecomment-351064030,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
For class: ```js import Component from 'react/Component' class MyButton extends Component{ constructor(){ this.state = {} } render() { return <button> Button <Button> } } ``` Where transform will use super.createElement() to transform to jsx or use static Component.createElement(). For stateless components: ```js import jsx from 'react/jsx' const MyButton = () => jsx`<button> Button <Button>`; ``` it is maybe possible to use tagged template literal? Node hopefully accept this PR https://github.…,,,,,,Anecdotal,comment,,,,,,,,2018-02-08,github/chyzwar,https://github.com/facebook/react/issues/11503#issuecomment-364253599,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Just dropping a comment on this thread which hasn't really been mentioned specifically. I’m in a situation where I’m not using a bundler at all and just want to import react and various components for use natively through the browser (`<script type=""module"" src=""..."">`), i.e. ```js import React from “https://unpkg.com/react@16.4.1/umd/react.development.js”; import ReactDOM from “https://unpkg.com/react-dom@16.4.1/umd/react-dom.development.js”; ReactDOM.render( React.createElement(...), document…",,,,,,Anecdotal,comment,,,,,,,,2018-07-23,github/jimniels,https://github.com/facebook/react/issues/11503#issuecomment-407122820,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Now, all of the modern browsers including mobile versions support ESM. ESM is no longer a future module system but a current defacto-standard. Please be aware of not providing the standardized module is a critical problem, especially for a defacto-standard web library. ``` import * as React from 'react'; import * as ReactDOM from 'react-dom'; ``` This is the typical code to apply React libraries, and the fact has been there are not actually libraries that can be imported, instead, 3rd party tra…",,,,,,Anecdotal,comment,,,,,,,,2018-08-09,github/ken-okabe,https://github.com/facebook/react/issues/11503#issuecomment-411909941,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
I started working on this [here](https://github.com/facebook/react/pull/13321) and [here](https://github.com/facebook/react/pull/13080),,,,,,Anecdotal,comment,,,,,,,,2018-08-09,github/TrySound,https://github.com/facebook/react/issues/11503#issuecomment-411912950,repo: facebook/react | issue: Formalize top-level ES exports | keyword: gotcha
"Bug: Infinite rendering resulting in freezing of tab/browser <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> React is not preventing infinite rendering/looping and results in freezing of browser. The root cause of this issue is because the dependency array of `useEffect` compares object/array by reference. But, this is…",,,,,,Anecdotal,issue,,,,,,,,2020-10-09,github/palerdot,https://github.com/facebook/react/issues/19991,repo: facebook/react | keyword: gotcha | state: open
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2024-04-25,github/github-actions[bot],https://github.com/facebook/react/issues/19991#issuecomment-2078308303,repo: facebook/react | issue: Bug: Infinite rendering resulting in freezing of tab/browser | keyword: gotcha
"bump This is still an issue, and it would be great if React by default does an `isEqual` check like `lodash` (https://lodash.com/docs/4.17.15#isEqual) instead of `Object.is` / reference check to prevent infinite rendering.",,,,,,Anecdotal,comment,,,,,,,,2024-04-26,github/palerdot,https://github.com/facebook/react/issues/19991#issuecomment-2078568384,repo: facebook/react | issue: Bug: Infinite rendering resulting in freezing of tab/browser | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2024-07-25,github/github-actions[bot],https://github.com/facebook/react/issues/19991#issuecomment-2249326315,repo: facebook/react | issue: Bug: Infinite rendering resulting in freezing of tab/browser | keyword: gotcha
bump We're randomly getting freezes on our codebase and pinpointing the issue takes a lot of time.,,,,,,Anecdotal,comment,,,,,,,,2024-08-05,github/ImJustChew,https://github.com/facebook/react/issues/19991#issuecomment-2268757497,repo: facebook/react | issue: Bug: Infinite rendering resulting in freezing of tab/browser | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2024-11-03,github/github-actions[bot],https://github.com/facebook/react/issues/19991#issuecomment-2453385876,repo: facebook/react | issue: Bug: Infinite rendering resulting in freezing of tab/browser | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-02-16,github/github-actions[bot],https://github.com/facebook/react/issues/19991#issuecomment-2661499820,repo: facebook/react | issue: Bug: Infinite rendering resulting in freezing of tab/browser | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-06-11,github/github-actions[bot],https://github.com/facebook/react/issues/19991#issuecomment-2961833605,repo: facebook/react | issue: Bug: Infinite rendering resulting in freezing of tab/browser | keyword: gotcha
"Use the native `beforeinput` event if it's supported **Do you want to request a *feature* or report a *bug*?** Improvement. **What is the current behavior?** Right now, the synthetic `onBeforeInput` event is being created based on two other events: - `textInput` when possible—which is in Webkit. - `keypress` as a fallback. But these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://dev…",,,,,,Anecdotal,issue,,,,,,,,2017-10-13,github/ianstormtaylor,https://github.com/facebook/react/issues/11211,repo: facebook/react | keyword: gotcha | state: open
@ianstormtaylor do you know if there's any reliable way to detect if `beforeinput` is natively supported? It looks like [logic we currently use for event support detection](https://github.com/facebook/react/blob/master/packages/react-dom/src/events/isEventSupported.js#L24-L42) won't work in this case. > it includes other spec'd properties which can be extremely helpful How hard do you think it would be to polyfill those spec'd properties for other browsers? We usually don't include event proper…,,,,,,Anecdotal,comment,,,,,,,,2018-01-08,github/aweary,https://github.com/facebook/react/issues/11211#issuecomment-355866473,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@aweary why is it that the current logic doesn't work? We use what seems like a [similar detection method](https://github.com/ianstormtaylor/slate/pull/1232/files#diff-2124a3c530b44e8f572b20fc8602ed0aR20) for it right now. (Although I have to be honest, I'm not sure if it's as reliable as needed by React with it's much broader browser targets.) As for polyfilling the spec'd properties. I'm not sure, but I think it would be hard. I'd actually advise that instead of trying to polyfill the propert…",,,,,,Anecdotal,comment,,,,,,,,2018-01-08,github/ianstormtaylor,https://github.com/facebook/react/issues/11211#issuecomment-356113269,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@ianstormtaylor I tested `isEventSupported` and your detection method and both return `false` in the latest Chrome (63.0.3239.132). It seems like `beforeinput` events _are_ being triggered though, so I'm not sure why it doesn't work. https://jsfiddle.net/t4dsqLj9/ >As for polyfilling the spec'd properties. I'm not sure, but I think it would be hard. I'd actually advise that instead of trying to polyfill the properties as top-level properties on the synthetic events, that users reach into the na…",,,,,,Anecdotal,comment,,,,,,,,2018-01-09,github/aweary,https://github.com/facebook/react/issues/11211#issuecomment-356163980,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@aweary ah gotcha, it might be because Chrome doesn't implement the spec fully yet? Not sure on that one. Updating could be good! I don't know enough about the internals to be able to suggest things there I think. The issue is that right now it's text input only, whereas the newer specs result it in being used for events that aren't necessarily character-inserting.",,,,,,Anecdotal,comment,,,,,,,,2018-01-09,github/ianstormtaylor,https://github.com/facebook/react/issues/11211#issuecomment-356372020,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@aweary While the hack slate uses to test for beforeinput support now generates a false negative for chrome: ```js const testEl = window.document.createElement('div'); testEl.contentEditable = true; 'onbeforeinput' in testEl; // => false in chrome 66.0.3359.181, despite support ``` ...might something that tests for the `inputType` property in an input event instead do the trick? ```js 'inputType' in (new InputEvent('input')); ``` * it's `false` in Firefox 59.0.2 (64-bit), which doesn't support …",,,,,,Anecdotal,comment,,,,,,,,2018-06-07,github/johan,https://github.com/facebook/react/issues/11211#issuecomment-395271530,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@johan you're right. That's interesting. I did a little investigating, and it looks like this tests end up as: ```js const event = window.InputEvent ? new InputEvent('input') : {} const hasLevel1 = 'inputType' in event ``` ```js const element = document.createElement('div') element.contentEditable = true const hasLevel2 = 'onbeforeinput' in element ``` Depending on whether you're testing for [Input Events Level 1](https://rawgit.com/w3c/input-events/v1/index.html) support (`true` in Safari, Chr…",,,,,,Anecdotal,comment,,,,,,,,2018-08-09,github/ianstormtaylor,https://github.com/facebook/react/issues/11211#issuecomment-411606387,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"We've been taking a look at this issue because we're experiencing a problem with cancelling `textInput` events in the flavor of Safari that runs in Outlook add-ins on Mac. We'd argue that React should only use the native `beforeinput` event if it has level 2 support, since there are consumers that currently rely on the synthetic `onBeforeInput` being cancellable. I will probably be opening up a PR to React to implement this behavior, but React has such a huge net of supported browsers that I do…",,,,,,Anecdotal,comment,,,,,,,,2019-02-20,github/ShannonLCapper,https://github.com/facebook/react/issues/11211#issuecomment-465744802,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"> @johan you're right. That's interesting. I did a little investigating [...] @ianstormtaylor Now that Firefox released a version 66 which tests positive for that `hasLevel1` (=has `inputType` property on Input events), yet _doesn't_ fire the super useful `beforeinput` event which would carry target ranges info, as Chrome and Safari do (though, counter-intuitively, only Safari tests positive for your `hasLevel2` which lightly feature detects that handler's name), the landscape just got broken u…",,,,,,Anecdotal,comment,,,,,,,,2019-03-30,github/johan,https://github.com/facebook/react/issues/11211#issuecomment-478286518,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"FYI: When Firefox ship `beforeinput` event, probably, ship `HTMLElement.onbeforeinput` togetter. [Spec bug is here](https://github.com/w3c/uievents/issues/218) and [Chrome's bug is here](https://bugs.chromium.org/p/chromium/issues/detail?id=947408). Perhaps, Mozilla won't ship `InputEvent.getTargetRanges()` until shipping `beforeinput` event because [it's not useful with `input` event](https://w3c.github.io/input-events/#event-definitions). I think that ideal feature detection of whether `befor…",,,,,,Anecdotal,comment,,,,,,,,2019-04-10,github/masayuki-nakano,https://github.com/facebook/react/issues/11211#issuecomment-481754450,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contribution.,,,,,,Anecdotal,comment,,,,,,,,2020-01-10,github/stale[bot],https://github.com/facebook/react/issues/11211#issuecomment-572936025,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"Yeah, it would be delightful not to need to [create a ref and `useEffect` block to register the native event yourself](https://codepen.io/johan/pen/mdJMGbY), but if you need to fire a `preventDefault()` on that `beforeinput` event to take control of a content-editable element, that seems to be the only way to go about it at the moment.",,,,,,Anecdotal,comment,,,,,,,,2020-03-03,github/johan,https://github.com/facebook/react/issues/11211#issuecomment-594218650,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2020-06-02,github/stale[bot],https://github.com/facebook/react/issues/11211#issuecomment-637338561,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
It would be great if react stopped squatting on the name of a native event for its unrelated synthetic event. Maybe worth thinking of for some upcoming major version bump?,,,,,,Anecdotal,comment,,,,,,,,2020-06-05,github/johan,https://github.com/facebook/react/issues/11211#issuecomment-639722891,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"honestly I really don't mind throwing myself at this in my free time, but I am not a javascript dev. If anyone here could guide me on this, I could do the work so long as I had guidance. Because of the chain of applications that are all broken from this issue I'd really like to get this fixed.",,,,,,Anecdotal,comment,,,,,,,,2020-06-15,github/chutchi2,https://github.com/facebook/react/issues/11211#issuecomment-644157018,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"I started to look into this today and would like to get some thoughts on https://github.com/facebook/react/pull/19554. Specifically in regards to the detection mechanism. I tried detecting it via `onbeforeinput` on the HTMLElement, but that didn't prove reliable.",,,,,,Anecdotal,comment,,,,,,,,2020-08-07,github/trueadm,https://github.com/facebook/react/issues/11211#issuecomment-670459357,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
To people who expressed frustration in this thread — I totally feel you but the most productive way to move this forward is to share your expertise in this and help us figure out a reliable detection mechanism. Sending a PR with that would have moved the issue further much earlier.,,,,,,Anecdotal,comment,,,,,,,,2020-08-07,github/gaearon,https://github.com/facebook/react/issues/11211#issuecomment-670495565,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"> I started to look into this today and would like to get some thoughts on #19554. Thanks for working on this! I'll add some notes on the PR. > Specifically in regards to the detection mechanism. I tried detecting it via `onbeforeinput` on the HTMLElement, but that didn't prove reliable. You can do it on a newly created div, on which you have set the `contentEditable` property to `'true'`, but that is a stronger test for Input Events Level 2, which only Safari supports at the moment (including …",,,,,,Anecdotal,comment,,,,,,,,2020-08-08,github/johan,https://github.com/facebook/react/issues/11211#issuecomment-670974945,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"FYI: Firefox Nightly does now support `beforeinput` events by default. We really need feedback from web developers before shipping it in the Release channel. So, once you find something incompatible things on Firefox, let us know. Thank you.",,,,,,Anecdotal,comment,,,,,,,,2020-10-14,github/masayuki-nakano,https://github.com/facebook/react/issues/11211#issuecomment-708182774,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@masayuki-nakano Thank you for the update and for all the work you've put into this. The support for `beforeinput` is very important to us and also for our tooling, such as Draft. What is the latest status for this? I tried Nightly out and the performance seems good, as does the additonal functionality it provides. I'm eager to know if there are plans to get this into the release channel soon :)",,,,,,Anecdotal,comment,,,,,,,,2020-10-31,github/trueadm,https://github.com/facebook/react/issues/11211#issuecomment-719941884,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@masayuki-nakano is away for the next couple of days so let me add a couple of details and he can provide more information when he gets back. The current status is that `beforeinput` is enabled in Nightly and we would really like to be confident that it will not cause compatibility problems before turning it on in release, since it is harder to change after that. Unfortunately, many web sites use UA string matching and do not use `beforeinput` events when the UA is Firefox. (This is partly beca…",,,,,,Anecdotal,comment,,,,,,,,2020-11-01,github/birtles,https://github.com/facebook/react/issues/11211#issuecomment-720171730,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"Thank you @birtles for the explanation. Yes, we'd love to ship it as far as possible, but after shipping it, the behavior change becomes too risky because such things may require UA string check if they are caused by a bug of Firefox or just undefined incompatible things with the others. So, for reducing such risk, we'd love you to feedback with testing with Firefox Nightly. Especially we'd love to know what are unacceptable differences from the other browsers. I guess that such things mainly e…",,,,,,Anecdotal,comment,,,,,,,,2020-11-05,github/masayuki-nakano,https://github.com/facebook/react/issues/11211#issuecomment-722192724,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@masayuki-nakano I tried out the latest nightly of FF and it's awesome. For context, we're looking to start using native `beforeinput` on facebook.com, so this is a highly desirable feature, especially as we plan to block input via `preventDefault` and use our own rendering of text for editors/inputs. The changes in FF fix so many issues on Facebook when it comes to text input, so it's really important to us that we can try and get this in where possible as we have many open bug reports regardi…",,,,,,Anecdotal,comment,,,,,,,,2020-12-04,github/trueadm,https://github.com/facebook/react/issues/11211#issuecomment-739029681,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"> I noticed that FF Nightly copies Chromium in that `insertFromComposition` and `deleteByComposition` do not fire when entering text via composition. It would be great if FF could implement these like Safari does, as this fixes many edge cases around IME text input (Safari leads the way here). Well, they are only in Level 2, but the Level 2's definition around composition may break a lot of existing web apps due to [the incompatible things](https://github.com/w3c/input-events/issues/86). That's…",,,,,,Anecdotal,comment,,,,,,,,2020-12-05,github/masayuki-nakano,https://github.com/facebook/react/issues/11211#issuecomment-739119791,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@masayuki-nakano Let me give Level 2 a try (it's a bit confusing why the flag says level 1 though). What we want to do is allow native composition – i.e. not cancelling it, as you can't really cancel it on Blink. Instead we want to know about the composed text. Only WebKit currently fires `insertFromComposition` and `deleteByComposition`, but I guess this might work with the Level 2 flag like you mentioned. If Level 2's definition is broken, then I'd expect WebKit to also show breakages, but fr…",,,,,,Anecdotal,comment,,,,,,,,2020-12-05,github/trueadm,https://github.com/facebook/react/issues/11211#issuecomment-739240972,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"> @masayuki-nakano Let me give Level 2 a try (it's a bit confusing why the flag says level 1 though). The pref means that limits the behavior for conforming to Level 1's spec. Therefore, it sounds odd. > What we want to do is allow native composition – i.e. not cancelling it, as you can't really cancel it on Blink. Instead we want to know about the composed text. Only WebKit currently fires `insertFromComposition` and `deleteByComposition`, but I guess this might work with the Level 2 flag like…",,,,,,Anecdotal,comment,,,,,,,,2020-12-07,github/masayuki-nakano,https://github.com/facebook/react/issues/11211#issuecomment-739683050,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"Ran into this issue today as well. Unfortunately, React's `onBeforeInput` event is really more like `onBeforeInsert`. It doesn't fire for deletions, formatting, etc. See [here](https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes) for a full list of `inputType` values. It's likely that changing the behavior to match the spec would break a bunch of existing React components that rely on `onBeforeInput` only being for insertions. Perhaps it makes sense to rename the existing even…",,,,,,Anecdotal,comment,,,,,,,,2021-01-22,github/devongovett,https://github.com/facebook/react/issues/11211#issuecomment-765584678,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"@devongovett It's something I thought long and hard about, especially as I'm currently working on a text editor at Facebook and obviously want to leverage the benefits of `beforeinput`. It's more likely that we'd add support to React for `beforeinput` when FF ships stable support for `beforeinput`, as it's the last major browser that doesn't have support for it (although, hopefully it will soon thanks to the work done by @masayuki-nakano!). It would also have to be under a different alias, like…",,,,,,Anecdotal,comment,,,,,,,,2021-01-22,github/trueadm,https://github.com/facebook/react/issues/11211#issuecomment-765621225,repo: facebook/react | issue: Use the native `beforeinput` event if it's supported | keyword: gotcha
"createPortal: support option to stop propagation of events in React tree **Do you want to request a *feature* or report a *bug*?** Feature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer` **What is the current behavior?** We cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close thi…",,,,,,Anecdotal,issue,,,,,,,,2017-10-27,github/kib357,https://github.com/facebook/react/issues/11387,repo: facebook/react | keyword: gotcha | state: open
"Also, propagation of mouseOver/Leave looks completely unexpected. ![image](https://user-images.githubusercontent.com/347668/32112901-43f72342-bb47-11e7-8f2f-0e1b2e7e1646.png)",,,,,,Anecdotal,comment,,,,,,,,2017-10-27,github/kib357,https://github.com/facebook/react/issues/11387#issuecomment-340009465,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"Can you move portal outside of the button? e.g. ```js return [ <div key=""main""> <p>Hello! This is first step.</p> <Button key=""button"" /> </div>, <Portal key=""portal"" /> ]; ``` Then it won't bubble through the button.",,,,,,Anecdotal,comment,,,,,,,,2017-10-27,github/gaearon,https://github.com/facebook/react/issues/11387#issuecomment-340019419,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"It was my first thought, but!) Imagine, that we have mouseEnter handler in such component container: ![image](https://user-images.githubusercontent.com/347668/32129253-ced34e14-bb8d-11e7-82f1-f9f857fa50e6.png) With `unstable_rendersubtreeintocontainer` i need nothing to do with events in `ButtonWithPopover` component – mouseEnter simply works when mouse really enters `div` and button DOM element, and not fired when mouse is over popover. With portal, event fires when mouse over popover – and ac…",,,,,,Anecdotal,comment,,,,,,,,2017-10-28,github/kib357,https://github.com/facebook/react/issues/11387#issuecomment-340127105,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
@gaearon I would suggest this is more of a bug than a feature request. We have a number of new bugs caused by mouse events bubbling up through portals (where we were previously using `unstable_rendersubtreeintocontainer`). Some of these can't be fixed even with an extra div layer to filter mouse events because e.g. we rely on mousemove events propagating up to the document to implement draggable dialogs. Is there a way to workaround this before this is addressed in a future release?,,,,,,Anecdotal,comment,,,,,,,,2018-01-03,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-354932581,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"I think it's being called a feature request, because the current bubble behavior of portals is both expected and intended. The goal is that subtree act like real child of their parents. What would be helpful is additional use cases or situations (like the ones you're seeing) that you don't feel are served by the current implementation, or are difficult to workaround",,,,,,Anecdotal,comment,,,,,,,,2018-01-03,github/jquense,https://github.com/facebook/react/issues/11387#issuecomment-354936172,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"I understand that this behavior is intended, but I think it's a significant bug that it's not disable-able.",,,,,,Anecdotal,comment,,,,,,,,2018-01-03,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-354936474,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
In my mind library working with DOM should preserve DOM implementation behavior not break it. For example: ```jsx class Container extends React.Component { shouldComponentUpdate = () => false; render = () => ( <div ref={this.props.containerRef} // Event propagation on this element not working onMouseEnter={() => { console.log('handle mouse enter'); }} onClick={() => { console.log('handle click'); }} /> ) } class Root extends React.PureComponent { state = { container: null }; handleContainer = (…,,,,,,Anecdotal,comment,,,,,,,,2018-01-03,github/neytema,https://github.com/facebook/react/issues/11387#issuecomment-354963938,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"Folks thanks for the discussion, however I don't think it's all that helpful to argue whether something is a bug or not. Instead i'd be more productive to discuss the use cases and examples that are not met by the current behavior, so we can better understand if the current way is the best way for the future. In general we want the API to handle a diverse set of use-cases while hopefully not overly limiting others. I can't speak for the core team, but I'd imagine that making it configurable is …",,,,,,Anecdotal,comment,,,,,,,,2018-01-03,github/jquense,https://github.com/facebook/react/issues/11387#issuecomment-355002596,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"> Instead i'd be more productive to discuss the use cases and examples that are not met by the current behavior Here's two examples that are broken for us in our migration to React 16. First, we have a draggable dialog which is launched by a button. I attempted to add a ""filtering"" element on our Portal use which called StopPropagation on any mouse* an key* events. However, we rely on being able to bind a mousemove event to the document in order to implement the dragging functionality -- this i…",,,,,,Anecdotal,comment,,,,,,,,2018-01-03,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-355055906,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
And to be clear: my request that this be considered a bug is mostly so that it gets prioritized for a fix sooner rather than later.,,,,,,Anecdotal,comment,,,,,,,,2018-01-03,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-355145047,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"My mental model of a Portal is that it behaves as if it is on the same place in the tree, but avoids problems such as ""overflow: hidden"" and avoids scrolling for drawing/layout purposes. There are many similar ""popup"" solutions that happen inline without a Portal. E.g. a button that expands a box right next to it. Take as an example the ""Pick your reaction"" dialog here on GitHub. That is implemented as a div right next to the button. That works fine now. However, if it wants to have a different…",,,,,,Anecdotal,comment,,,,,,,,2018-01-04,github/sebmarkbage,https://github.com/facebook/react/issues/11387#issuecomment-355243434,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"The workaround that worked for me is calling `stopPropagation` directly under portal rendering: ``` return createPortal( <div onClick={e => e.stopPropagation()}>{this.props.children}</div>, this.el ) ``` That works great for me since I have single abstraction component that uses portals, otherwise you will need to fix up all your `createPortal` calls.",,,,,,Anecdotal,comment,,,,,,,,2018-01-04,github/methyl,https://github.com/facebook/react/issues/11387#issuecomment-355258340,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"@methyl this assumes you know every event that you need to block from bubbling up the tree. And in the case I mentioned with draggable dialogs, we need `mousemove` to bubble up to document, but *not* to bubble up the render tree.",,,,,,Anecdotal,comment,,,,,,,,2018-01-04,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-355316303,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"> Both styles of ""popups"" or ""pop outs"" are legit. So how would you solve the same problem when the component is inline in the layout as opposed to floating outside of it? @sebmarkbage I'm not sure this question makes sense. If I had this problem inlining the component, I wouldn't inline it.",,,,,,Anecdotal,comment,,,,,,,,2018-01-04,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-355316663,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"I think some of problem here is the some use cases of `renderSubtreeIntoContainer` are being ported to `createPortal` when the two methods are doing conceptually different things. The concept of Portal was being overloaded I think. I agree that in the Modal dialog case, you almost never want the modal to act like a child of the button that opened it. The trigger component is only rendering it because it controls the `open` state. I think tho it's a mistake to say that the portal implementation …",,,,,,Anecdotal,comment,,,,,,,,2018-01-04,github/jquense,https://github.com/facebook/react/issues/11387#issuecomment-355326867,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"`renderSubtreeIntoContainer` can't be called from inside of `render` or lifecycle methods in React 16, which pretty much precludes its use for the cases I've been discussing (in fact, all our components which were doing this completely broke in the migration to 16). Portals are the official recommendation: https://reactjs.org/blog/2017/09/26/react-v16.0.html#breaking-changes I agree that the concept of Portals might have ended up overloaded. Not sure I love the solution of a global component an…",,,,,,Anecdotal,comment,,,,,,,,2018-01-04,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-355329522,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"I will try to clarify our use-case of the portals and why we would love to see an option for stopping events propagation. In ManyChat app, we are using portals to create a 'layers'. We have the layer system for the whole app that used by several types of components: popovers, dropdowns, menus, modals. Every layer can expose a new layer, e.g. button on a second level of menu can trigger the modal window where the other button can open the popover. In most cases layer is the new branch of UX that…",,,,,,Anecdotal,comment,,,,,,,,2018-01-04,github/kib357,https://github.com/facebook/react/issues/11387#issuecomment-355395803,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"Does this need to be tied to portals? Rather than sandboxing portals, what if there was just a (for example) `<React.Sandbox>...</React.Sandbox>`?",,,,,,Anecdotal,comment,,,,,,,,2018-01-11,github/jacobp100,https://github.com/facebook/react/issues/11387#issuecomment-356885959,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
Even that seems needlessly complex to me. Why not simply add an optional boolean flag to createPortal allowing the bubbling behavior to be blocked?,,,,,,Anecdotal,comment,,,,,,,,2018-01-11,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-356991819,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
@gaearon this is a pretty unfortunate situation for a certain slice of us -- could you or someone dear to you have a look at this? :),,,,,,Anecdotal,comment,,,,,,,,2018-01-25,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-360489630,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"I'd add that my current thinking is that both use cases should be supported. There are really use cases where you need context to flow from the current parent to the subtree but to not have that subtree act as a logical child in terms of the DOM. Complex modals are the best example, you just almost never want the events from a form in a modal window to propagate up to the trigger button, but almost certainly need the context passed through (i18n, themes, etc) I will say that that usecase _could…",,,,,,Anecdotal,comment,,,,,,,,2018-01-25,github/jquense,https://github.com/facebook/react/issues/11387#issuecomment-360492604,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"i would add tho in terms of API i don't think `createPortal` should do both, the modal case really wants to just use `ReactDOM.render` (old skool) because it's pretty close to a distinct tree _except_ that context propagation is often needed",,,,,,Anecdotal,comment,,,,,,,,2018-01-25,github/jquense,https://github.com/facebook/react/issues/11387#issuecomment-360493170,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"We just had to fix an extremely difficult-to-diagnose bug in our outer application's focus management code as a result of using the workaround that @kib357 posted. Specifically: calling stopPropagation on the synthetic focus event to prevent it from bubbling out of the portal causes stopPropagation to also be called on the native focus event in React's captured handler on #document, which meant it did not make it to another captured handler on `<body>`. We fixed by moving our handler up to #doc…",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-366113321,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"@craigkovatch I'm still curious how you would solve my inline example. Let's say the popup is pushing the size of the box down. Inlining something is important since it is pushing something down in the layout given its size. It can't just hover over. You could potentially measure the popover, insert a blank placeholder with the same size and try to align it on top but that's not what people do. So if your popover need to expand the content in place, like right next to the button, how would you …",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/sebmarkbage,https://github.com/facebook/react/issues/11387#issuecomment-366139948,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"I think in general this is the pattern that works in both scenarios: ```js class Foo extends React.Component { state = { highlight: false, showFlyout: false, }; mouseEnter() { this.setState({ highlight: true }); } mouseLeave() { this.setState({ highlight: false }); } showFlyout() { this.setState({ showFlyout: true }); } hideFlyout() { this.setState({ showFlyout: false }); } render() { return <> <div onMouseEnter={this.mouseEnter} onMouseLeave={this.mouseLeave} className={this.state.highlight ? …",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/sebmarkbage,https://github.com/facebook/react/issues/11387#issuecomment-366142349,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"@sebmarkbage we are using Portals in a completely different fashion, rendering into a container mounted as the final child of `<body>` which is then positioned, sometimes with a z-index. The React documentation suggests this is closer to the design intention; i.e. rendering into a totally different place in the DOM. It doesn't seem to me that our use cases are similar enough for discussion to belong on this thread. But if you want to brainstorm/troubleshoot together, I'd be more than happy to d…",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-366143291,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"No my use case is *both*. Sometimes one and sometimes the other. That's why it is relevant. The `<Flyout />` can choose to render into the final child of body or not but as long as you hoist the portal itself out to a sibling of the hovered component rather than a child of it, your scenario works.",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/sebmarkbage,https://github.com/facebook/react/issues/11387#issuecomment-366144069,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"I think there's a plausible scenario where that is inconvenient and you want a way to teleport things from deeply nested components but in that scenario you're probably fine with the context being the context from the intermediate point. But I think of those as two separate issues. Maybe we need a slots API for that. ```js class Foo extends React.Component { state = { showFlyout: false, }; showFlyout() { this.setState({ showFlyout: true }); } hideFlyout() { this.setState({ showFlyout: false });…",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/sebmarkbage,https://github.com/facebook/react/issues/11387#issuecomment-366144441,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"@sebmarkbage the modal case usually does require context from the point it's rendered. It's slightly unique of a case I think, the component is a logical child of the thing that rendered it but _not_ a structural one (for lack of a better word), e.g. You usually want things like form context (relay, formik, redux form, whatever) but not DOM events to pass through. One also ends up rendering such modals fairly deep in trees, next to their triggers, so they stay componenty and reusable, more so t…",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/jquense,https://github.com/facebook/react/issues/11387#issuecomment-366226691,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"> as long as you hoist the portal itself out to a sibling of the hovered component rather than a child of it, your scenario works. Not sure I follow. There's still the problem of e.g. keyDown events bubbling through an unexpected DOM tree.",,,,,,Anecdotal,comment,,,,,,,,2018-02-16,github/craigkovatch,https://github.com/facebook/react/issues/11387#issuecomment-366252203,repo: facebook/react | issue: createPortal: support option to stop propagation of events in React tree | keyword: gotcha
"[Compiler Bug]: Performance - `useEffect` without dependencies should be left alone ### What kind of issue is this? - [X] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repr…",,,,,,Anecdotal,issue,,,,,,,,2024-10-06,github/xsduan,https://github.com/facebook/react/issues/31130,repo: facebook/react | keyword: gotcha | state: open
"Hmm, your PR description and the playground link don't quite match up (or at least, how I understand/interpret them), so let me check. In the playground, you have a hook that reads an impure value (Math.random), and you use a ref to try to prevent that value from changing again. But then you also have a useEffect with no dependencies, which will update the ref to reflect the new value of that impure source (in this case, calling Math.random again). But by using refs, React doesn't know that the…",,,,,,Anecdotal,comment,,,,,,,,2024-10-07,github/josephsavona,https://github.com/facebook/react/issues/31130#issuecomment-2398056351,repo: facebook/react | issue: [Compiler Bug]: Performance - `useEffect` without dependencies should be left alone | keyword: gotcha
"Not exactly the same as the second one but similar, something like [this hook](https://github.com/reactjs/rfcs/blob/d85e257502a43c08d17e8ab58efa0880f7f007a5/text/0000-useevent.md#internal-implementation). I think that describes like 90% of the times I use this pattern. I'm aware that it's technically not the best way to do it but we've run into several performance issues that were addressed with that hook. E: I guess my bigger point is that in this case, if I'm using this pattern correctly, it'…",,,,,,Anecdotal,comment,,,,,,,,2024-10-07,github/xsduan,https://github.com/facebook/react/issues/31130#issuecomment-2398147345,repo: facebook/react | issue: [Compiler Bug]: Performance - `useEffect` without dependencies should be left alone | keyword: gotcha
"Gotcha. That pattern is questionable since there’s no guarantee the effect will run before the callback is called, but it can work in some cases. In terms of the memoization, the idea is that when the effect deps don’t change, we don’t have to reallocate a closure unnecessarily.",,,,,,Anecdotal,comment,,,,,,,,2024-10-08,github/josephsavona,https://github.com/facebook/react/issues/31130#issuecomment-2398752829,repo: facebook/react | issue: [Compiler Bug]: Performance - `useEffect` without dependencies should be left alone | keyword: gotcha
"I do wonder if it's a bit of a premature optimization in this case. Because a closure might be a few bytes of memory every render but the additional code size would probably also be an issue. With memos the tradeoff in code size is more obvious due to potentially skipping large chunks of render but with effects we are getting into V8 territory here since the only observable difference is stuff like cache locality, G1 pressure, etc etc. I think in the cases where this does make a lot of differen…",,,,,,Anecdotal,comment,,,,,,,,2024-10-08,github/xsduan,https://github.com/facebook/react/issues/31130#issuecomment-2399718141,repo: facebook/react | issue: [Compiler Bug]: Performance - `useEffect` without dependencies should be left alone | keyword: gotcha
"React 18 not passive wheel / touch event listeners support Hi all, is there any chances React 18 will support not passive wheel / touch event listeners? In React 17 they are passive so no way to preventDefault and I had to add active listeners manually by ref. So maybe in v18 there will be some option to make them not passive in react? I just tested my code with React 18 beta and found some internal order of useEffect calls was changed, so my approach is failing because of desync of changes mad…",,,,,,Anecdotal,issue,,,,,,,,2021-11-19,github/YuriGor,https://github.com/facebook/react/issues/22794,repo: facebook/react | keyword: gotcha | state: open
The decision to change touch/wheel events to passive is explained with a bit of background in #19651 and #19654. I'm not aware of any plans to change this for 18. > so my approach is failing because of desync of changes made in active listener vs other props changes. Can you clarify what this means?,,,,,,Anecdotal,comment,,,,,,,,2021-11-22,github/bvaughn,https://github.com/facebook/react/issues/22794#issuecomment-975618944,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"I have zoom/pan board element in my app. Zoom I implemented in mouse wheel event listener using css transform/scale and pan I implemented utilizing native browser scrollTop \ scrollLeft assigned via ref. So when user scrolls mouse wheel I prevent default to block native scrolling and do scaling instead. But to make scale properly I need also to adjust scrolling offset synchronously, to keep screen centered on mouse pointer. So in react v17 scrollTop \ scrollLeft assigned in native mousewheel ev…",,,,,,Anecdotal,comment,,,,,,,,2021-11-22,github/YuriGor,https://github.com/facebook/react/issues/22794#issuecomment-975622323,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"Gotcha. Thanks for explaining your use case. React DevTools (written with React DOM v18) has some ""wheel"" events code but it is just added in an event so that it can `preventDefault`. I'm not really up to date with the latest thinking around this event decision. @gaearon may know more (or it may be that his most recent update– linked above– still reflects our current thinking).",,,,,,Anecdotal,comment,,,,,,,,2021-11-22,github/bvaughn,https://github.com/facebook/react/issues/22794#issuecomment-975625702,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"Yes, I remember that discussion, I implemented my current solution inspired by comments there. It looks bad and will not work in the future. Having something like `onWheelActive` in v18 would be very helpful. or maybe like this: ``` function handleWheel(e){ /*...*/ } handleWheel.active = true; //.. <div onWheel={handleWheel}`/> ``` ..so react will just check `active` prop on handler before making listener passive or not. We could consistently support this for all events, so setting it to boolea…",,,,,,Anecdotal,comment,,,,,,,,2021-11-22,github/YuriGor,https://github.com/facebook/react/issues/22794#issuecomment-975725814,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"I think there is a misunderstanding. This issue is about support for marking events as **not passive** because they *are* passive by default. The warning you're showing is the exact opposite. Can you please show which callsite the warning highlights? I have a suspicion that it's either not React, or it's some older version.",,,,,,Anecdotal,comment,,,,,,,,2022-04-08,github/gaearon,https://github.com/facebook/react/issues/22794#issuecomment-1093130532,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"You're right, it's not React. It's in fact Kefir (inside `useEffect`). Really sorry for wasting your time! Thanks for your work. :)",,,,,,Anecdotal,comment,,,,,,,,2022-04-08,github/cha0s,https://github.com/facebook/react/issues/22794#issuecomment-1093144999,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"Same issue, I need to call `preventDefault()` inside `onWheel`, `onTouchMove` and `onTouchStart` event handlers to prevent the page from scrolling when user interacts with my component. This does not work because these even handler are passive. Is there an API in React to add a non-passive event handler? (currently I have to attach event handlers manually with `myElement.addEventListener` inside `useEffect`).",,,,,,Anecdotal,comment,,,,,,,,2022-12-29,github/evgenyneu,https://github.com/facebook/react/issues/22794#issuecomment-1367139531,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"I am working on a carousel component that sometimes needs to prevent vertical scrolling of the window, and this design decision is apparently going to force me to add the listener manually as well. This is fine, but I do wonder how the React team thinks nobody would ever want to use `preventDefault` on a pointer event.",,,,,,Anecdotal,comment,,,,,,,,2023-05-26,github/mi-na-bot,https://github.com/facebook/react/issues/22794#issuecomment-1564961231,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"Any workaround for this? If I want to handle mousewheels in a special way within a component (e.g. in a game or UI with special requirements), then I need to be able to do `event.preventDefault()` or it scrolls the page at the same time. Would a safe workaround be to use `useRef` to get a ref for the element, and attach my listener via `ref.current.addEventListener` within a `useEffect` callback? That seems to work but I'm concerned about the possibilty that React may replace the `div` dynamica…",,,,,,Anecdotal,comment,,,,,,,,2023-06-05,github/callumlocke,https://github.com/facebook/react/issues/22794#issuecomment-1576707317,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"@callumlocke You probably want to use a ref callback on the JSX element instead passing an actual ref. https://react.dev/reference/react-dom/components/common#ref-callback Also, make sure to clean up the listeners when they are no longer needed. In newer versions of React I think you can return a cleanup function like `useEffect`, but in older versions, you might need to do something else.",,,,,,Anecdotal,comment,,,,,,,,2023-06-07,github/mi-na-bot,https://github.com/facebook/react/issues/22794#issuecomment-1581547476,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"`stopPropagation` is also not allowed on passive event listeners, it seems. So we have to manually create a ref, attach listeners, etc. any time we want to prevent default or stop propagation. Nice.",,,,,,Anecdotal,comment,,,,,,,,2023-11-20,github/vincerubinetti,https://github.com/facebook/react/issues/22794#issuecomment-1819501875,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"Same problem with me, need to have to use an active Wheel event in a div component. Only way I've found right now is using [react-event-injector](https://github.com/theKashey/react-event-injector) or using refs to attach event manually",,,,,,Anecdotal,comment,,,,,,,,2024-04-28,github/pham-tuan-binh,https://github.com/facebook/react/issues/22794#issuecomment-2081483305,repo: facebook/react | issue: React 18 not passive wheel / touch event listeners support | keyword: gotcha
"RFC: Plan for custom element attributes/properties in React 19 This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements. # TOC/Summary - Background - Proposals * Option 1: Only set properties + Pros - Easy to understand/implement - Avoids conflict with future global attributes - Takes advantage of custom element ""upgrade"" - Custom elements treated like any other React component + Cons - Possib…",,,,,,Anecdotal,issue,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347,repo: facebook/react | keyword: gotcha | state: open
"Apologies for the long read, but I wanted to make sure I was thoroughly exploring each option. I don't want to bias things too much with my own opinion, but if I were in a position to choose, I think I'd go with option 3. Option 3 is backwards compatible, declarative, and explicit. There’s no need to maintain a fallback heuristic, and other libraries already provide similar sigils/modifiers.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-338878807,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Apologies for the long read, but I wanted to make sure I was thoroughly exploring each option. I don't want to bias things too much with my own opinion, but if I were in a position to choose, I think I'd go with option 3. Option 3 is backwards compatible, declarative, and explicit. There’s no need to maintain a fallback heuristic, and other libraries already provide similar sigils/modifiers.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/worawit15379,https://github.com/facebook/react/issues/11347#issuecomment-338907004,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"I'm between option 2 and option 3, I think that React has handled behavior and API changes very well in the past. Introducting warnings and links to docs might serve well to help developers understand what's happening under the hood. Option 3 looks attractive because of its declarative nature, while reading JSX code new coming developers will know immediately what React will do when rendering the element.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/jeremenichelli,https://github.com/facebook/react/issues/11347#issuecomment-338993691,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
### Comments on option 2 > Developers might be confused when React sets an attribute instead of a property depending on how they’ve chosen to load their element. Do consumers of a custom element need to understand this distinction? Or is that only important to the author of the custom element? It seems like the author of the element will need to handle attributes for anything used in HTML (since that is the only way data gets passed from HTML usage) and properties if they want to support comple…,,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/cjorasch,https://github.com/facebook/react/issues/11347#issuecomment-339032941,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"> Do consumers of a custom element need to understand this distinction? Or is that only important to the author of the custom element? I doubt it's actually a huge issue because, as you pointed out, the element author should define an attribute and property for the underlying value and accept data from both. I would also add that they should keep the attribute and property in sync (so setting one sets the other). > Naming collisions with future HTMLElement attributes and properties seems like a…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339042577,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"> it requires the consumer of the custom element to know whether the element has implemented something as a property or as an attribute That's not something React should worry as Rob said in my opinion, it's the custom element author's responsability to inform the user how the element works. And it's actually the way that we need to do it today, for example think about the `<video>` element, let's say you need to mute it or change the current time inside a component. `muted` works as a boolean …",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/jeremenichelli,https://github.com/facebook/react/issues/11347#issuecomment-339064822,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"If we were designing this from scratch, without needing to consider backwards compatibility, I think option 1 would be the most idiomatic per React’s [""JavaScript-centric API to the DOM""](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this). With regard to server-side rendering, could that problem be solved by providing an API for application code to inform React on how to map custom element properties to attributes? Similar to the maps that React alread…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339073351,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"> In the case where a custom element is lazy loaded and ""upgraded"", it will initially have undefined properties. This addresses that use case by making sure those elements still receive their data and they can use it post-upgrade. Maybe I don't understand the upgrade process. Elements would typically have properties defined as getters/setters in the class prototype. Checking `propName in element` would return true because of the existence of the getter/setter even if the property value was stil…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/cjorasch,https://github.com/facebook/react/issues/11347#issuecomment-339076139,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Upgrading is the process by which the custom element receives its class. Prior to that, it's not an instance of that class, so the property getters/setters aren't available.",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339077023,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
@jeremenichelli > muted works as a boolean attribute just checked and it also has a corresponding property though it doesn't seem to be documented on MDN :P > For the current time you need to create a ref pointing to the video element and change the property. Yeah occasionally you'll encounter properties-only APIs on modern HTML elements. `currentTime` updates at a high frequency so it wouldn't make sense to reflect it to an HTML attribute. > My point is that wether you are relying on native or…,,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339083146,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"@robdodson yeap, I knew about the muted property too 😄 I just used these two to prove that already _in the wild_ there isn't a one-size-fits-all rule as you mentioned. We will have to rely on documentation on both native and custom elements, so it's something I wouldn't mind for this decision. While writing the last code snippet I kinda liked the property binding though 💟",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/jeremenichelli,https://github.com/facebook/react/issues/11347#issuecomment-339086544,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"@effulgentsia > However, I think it's unfortunate to make every instance of where a custom element is used in an application be responsible for knowing when to use an attribute vs. when to use a property. I think this is already the case today though. Since the major custom element libraries (polymer, skate, possibly others?) automatically create backing properties for all exposed attributes, developers could just use the sigil for every property on a custom element. It would probably be a rare…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339086772,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"> developers could just use the sigil for every property on a custom element If developers started doing that, then how would that differentiate using a property because you ""can"" from using a property because you ""must""? And isn't that a differentiation that's needed for server-side rendering?",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339097803,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"> If developers started doing that, then how would that differentiate using a property because you ""can"" from using a property because you ""must""? Sorry, maybe I phrased that wrong. I meant that developers would likely use the sigil because it would give the most consistent result. You can use it to pass primitive data or rich data like objects and arrays and it'll always work. I think working with properties at runtime is generally preferred to working with attributes since attributes tend to …",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339108602,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"> It might be the case that on the server the sigil would fallback to setting an attribute. I don't think that would work if the reason for the sigil is that it's a property that doesn't exist as an attribute, such as video's [currentTime](#issuecomment-339064822). > differentiate using a property because you ""can"" from using a property because you ""must"" I think this differentiation is important, because there's entirely different reasons for choosing to use an attribute or property as an opti…",,,,,,Anecdotal,comment,,,,,,,,2017-10-24,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339142476,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Sorry for the excessive comments, but I thought of another benefit to my proposal above that I'd like to share: Those `ReactDOM.defineCustomElementProp()` calls could be provided in a JS file maintained by the custom element author (in the same repository as where the custom element is maintained/distributed). It wouldn't be needed for custom elements with a strict 1:1 correspondence of property/attribute, which per this issue's Background statement is the recommendation and majority case anywa…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339175292,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
Option 3 would be my preferred but that's a huge breaking change... What about the inverse? Attributes have a prefix not props?,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/LeeCheneler,https://github.com/facebook/react/issues/11347#issuecomment-339242541,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
@LeeCheneler > Option 3 would be my preferred but that's a huge breaking change... What about the inverse? Attributes have a prefix not props? Why would it be a breaking change? The current behavior of attributes being the default would remain. The sigil would be opt-in and developers would use it to replace the spots in their code where they currently use a `ref` to pass data to a custom element as a JS property. @drcmda > neither new attributes that could break existing projects. Can you clar…,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339370893,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"FYI for anyone following the discussion, I've updated the RFC with a 5th option suggested by members of the React team.",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339378787,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Option 5 seems safest for us. It lets us add the feature without having to make a decision about “implicit” API right now since the ecosystem is still in the “figuring it out” phase. We can always revisit it in a few years. >Polymer’s paper-input element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write. My impression is that custom element users in React will eventually w…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/gaearon,https://github.com/facebook/react/issues/11347#issuecomment-339399195,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Building from [my earlier comment](#issuecomment-339142476), how about: ``` const XFoo = ReactDOM.createCustomElementType('x-foo', { propName1: { propertyName: string | null, attributeName: string | null, attributeSerializer: function | null, eventName: string | null, } propName2: { } ... }); ``` The logic would then be, for each React prop on an XFoo instance: 1. If the `eventName` for that prop is not null, register it as an event handler that invokes the prop value (assumed to be a function)…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339411386,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Alternatively, maybe it makes sense to keep events in a separate namespace, in which case, remove everything having to do with `eventName` from the last comment, and instead let events be registered as: ``` <XFoo prop1={propValue1} prop2={propValue2} events={event1: functionFoo, event2: functionBar}> </XFoo> ```",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339415445,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
@gaearon @effulgentsia what do y'all think of a combination of option 1 and option 5? Option 1 would make it easier for the casual user of a custom element to pass rich data. I'm imagining the scenario where I'm building an app and I just want to use a couple of custom elements. I already know how they work and I'm not so invested that I want to write a config for them. Option 5 would be for folks who want to use something like paper-input all over their app and would really like to expose its …,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339421081,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
For SSR of option 1 the heuristic could be always use an attribute if rendering on the server. A camelCase property gets converted to a dash-case attribute. That seems to be a pretty common pattern across web component libraries.,,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/robdodson,https://github.com/facebook/react/issues/11347#issuecomment-339421654,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"I like the idea of an option1 + option5 combination a lot. Meaning that for most custom elements: ``` <x-foo prop1={propValue1}> ``` would work as expected: prop1 set as a property client-side and as a (dash-cased) attribute server-side. And people could switch to option5 for anything for which the above doesn't suit them. It would be a breaking change though from the way React 16 works. For anyone who experiences that breakage (e.g., they were using a custom element with attributes that aren't…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339427349,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Ah, this is what I get for reading this quickly on the train @robdodson 🤦‍♂️ ... Not really a fan of option 3 now 🤔 I read it as an all in on props being prefixed, hence my hesitation. Option 5 seems reasonable and straightforward. I like where @effulgentsia is heading. Is there a reason it couldn't be: ``` const XFoo = ReactDOM.createCustomElementType('x-foo', { propName1: T.Attribute, propName2: T.Event, propName3: T.Prop }) ``` Or is supporting multiple types on a single prop valuable? I'd b…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/LeeCheneler,https://github.com/facebook/react/issues/11347#issuecomment-339440016,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"@LeeCheneler: Quoting from the issue summary's Option 1 pros: > Any element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all ""just work"" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attr…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339459240,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Here's a thought for a less verbose version of [my earlier suggestion](#issuecomment-339411386): ``` const XFoo = ReactDOM.createCustomElementType('x-foo', { UNREFLECTED_ATTRIBUTES: [ 'my-attr-1', 'my-attr-2', ], UNREFLECTED_PROPERTIES: [ 'myProp1', 'myProp2', ], REFLECTED_PROPERTIES: { // This is default casing conversion, so could be omitted. someVeryLongName1: 'some-very-long-name-1', // In case anyone is still using all lowercase without dashes. someVeryLongName2: 'someverylongname2', // Wh…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/effulgentsia,https://github.com/facebook/react/issues/11347#issuecomment-339478530,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"Makes sense @effulgentsia 👍 I like your second example but is it not open to combinatorial explosion if more types gets added, ala events + whatever might make sense? ``` - UNREFLECTED_ATTRIBUTES - UNREFLECTED_PROPERTIES - UNREFLECTED_EVENTS - REFLECTED_PROPERTIES_ATTRIBUTES - REFLECTED_PROPERTIES_EVENTS - REFLECTED_ATTRIBUTES_EVENTS - REFLECTED_PROPERTIES_ATTRIBUTES_EVENTS ... ``` Although I suppose you wouldn't want to mix an event with a prop or attribute anyway 🤔 Attribute & prop are probab…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/LeeCheneler,https://github.com/facebook/react/issues/11347#issuecomment-339488778,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"I think there is an opportunity here for both the React and Web Component community to align on a best practice. React having an opinion here will go a long way in custom element authors being guided in the right direction due to its widespread adoption and weight that its opinions carry. Although I've authored the implementation of option 4, I'm *always* caught up by having to separate attributes and events from properties. Ideally, I'd prefer option 1. Practically, I think I'd prefer option 2…",,,,,,Anecdotal,comment,,,,,,,,2017-10-25,github/treshugart,https://github.com/facebook/react/issues/11347#issuecomment-339504323,repo: facebook/react | issue: RFC: Plan for custom element attributes/properties in React 19 | keyword: gotcha
"What should portals do when container has a child managed by React? **Do you want to request a *feature* or report a *bug*?** Bug **What is the current behavior?** `ReactDOM.unstable_createPortal(<Component/>, target)` appends the rendered component in the target instead of replacing the contents of the target **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template: https://jsfiddle.net…",,,,,,Anecdotal,issue,,,,,,,,2017-09-14,github/siddharthkp,https://github.com/facebook/react/issues/10713,repo: facebook/react | keyword: gotcha | state: open
"I don’t quite understand the sandbox, how should I interpret it? How do you tell it’s appending rather than replacing? I only see a single child here (“bye”), not many.",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/gaearon,https://github.com/facebook/react/issues/10713#issuecomment-329618812,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"I start by rendering `<Hi/>` = `<div id=""hi"" style={{border: '1px solid'}}>hi</div>` I'm wrapping this in a border to show the boundary of this component. After that's done, I render a portal, which picks up `document.getElementById(""hi"")` and renders `<Bye/>` = `<div>bye</div>` Now you'll see that `<div>bye</div>` is rendered inside the `div#hi` (because it's inside the border/boundary) ``` <div id=""hi"" style=""border: 1px solid;""> hi <div>bye</div> </div> ``` Expectation: It should clear the `…",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/siddharthkp,https://github.com/facebook/react/issues/10713#issuecomment-329620137,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"Ooh I see what you mean. I don’t think we support rendering portals into DOM nodes *already having content managed by React*. Just like you can’t `ReactDOM.render()` into a container already having other React children, and expect it to work. We should probably clear and warn in this case. Not sure.",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/gaearon,https://github.com/facebook/react/issues/10713#issuecomment-329620510,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"I'm sure what the expectation is here, to be honest. I think if should work similar to `ReactDOM.render` which does replace the content: https://codesandbox.io/s/mxmrxnknp [My slides](https://speakerdeck.com/siddharthkp/a-portal-to-the-future?slide=120) explore the problems that can be solved by totally misusing portals.",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/siddharthkp,https://github.com/facebook/react/issues/10713#issuecomment-329621548,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"I don’t think this behavior makes sense to me with portals because there’s still a mounted React application that still “owns” that container `div`. Unlike the case with top-level render where you essentially tell the old application to stop running. Consider this component: ```js const Parent = () => ( <div id='hello'> <blink>Hi</blink> </div> ); ``` Now, if there’s a ```js function Child() { return createPortal(<marquee>Bye</marquee>, document.getElementByID('hello')) } ``` somewhere, what do…",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/gaearon,https://github.com/facebook/react/issues/10713#issuecomment-329624968,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"A less restrictive version of this is when we let you render into a React node but only if it’s empty: ```js class Parent extends Component { render() { return ( <div> <blink>Hi</blink> <div id='hello' /> </div> ); } } function Child() { return createPortal(<marquee>Bye</marquee>, document.getElementByID('hello')) } ``` This is probably less annoying overall. But then we should warn if you attempt to render children in it: ```js <div id='hello'> <blink>Hi</blink> </div> ``` And let’s not forget…",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/gaearon,https://github.com/facebook/react/issues/10713#issuecomment-329626097,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"> You're saying you'd expect `<marquee>` (portal child) to render alone. But what if then Parent's parent calls setState(), and Parent re-renders? Its render clearly says: the child is <blink>Hi</blink>. But actually the child is different What I expected was that, by using a portal, you overwrite what the parent rendered and now even when the parent calls setState(), nothing happens because the parent doesn't control this child anymore! render totally lies now because we overwrote it. > This s…",,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/siddharthkp,https://github.com/facebook/react/issues/10713#issuecomment-329629250,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
Let’s keep it open—we should at least add a warning when there’s a conflict. Or maybe get more restrictive and throw. I’d like to hear what @sebmarkbage thinks.,,,,,,Anecdotal,comment,,,,,,,,2017-09-14,github/gaearon,https://github.com/facebook/react/issues/10713#issuecomment-329629427,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
I'm a little surprised this is an issue unless I'm misunderstanding something. Should I have to worry if more than one Portal is rendering to the same DOM node? I had assumed it'd just append (and it currently does). I'm not sure why that's a problem? It'd be a pain to have to track whether a DOM node is already a portal host which you'd probably have to do for the very common portal scenario of rendering to document.body. A workaround would be to append a new container (document.createElement)…,,,,,,Anecdotal,comment,,,,,,,,2017-09-18,github/jamiewinder,https://github.com/facebook/react/issues/10713#issuecomment-330371221,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"This issue is not about two portals rendering to one node, it is about a portal rendering to a node already managed by a regular React component.",,,,,,Anecdotal,comment,,,,,,,,2017-09-18,github/gaearon,https://github.com/facebook/react/issues/10713#issuecomment-330375053,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"Well, the question about rendering portals in the same node is still actual. Scenario when the replace of the content is prefered is not something unusual. Actually I have one in almost every project I've ever had, so It would be nice to have such opportunity. In my opinion, current behavior with appending of new nodes is quite confusing. If I want to be sure component will be rendered in separate node I can append new node manually for each component as it done in tutorial example",,,,,,Anecdotal,comment,,,,,,,,2017-10-06,github/ghost,https://github.com/facebook/react/issues/10713#issuecomment-334786379,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"The current implementation makes perfect sense conceptually and I understand the motivations behind this. But I wonder if the real world usage is coherent with the concept? 🤔 I'm pretty sure that most people use portals as *placeholders* and not *living containers*. They implicitly think that it will behave like `React.render`. `ReactDOM.unstable_renderSubtreeIntoContainer` had this behavior back then, a good part of the code that was using it now partially breaks in React 16. It might be a goo…",,,,,,Anecdotal,comment,,,,,,,,2017-10-20,github/ngryman,https://github.com/facebook/react/issues/10713#issuecomment-338169847,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"Just to clarify, if you were to do this: ``` const insertToast = (ToastComponent ) => { const toastContainer = document.getElementById('toast-container'); return ReactDOM.createPortal( <ToastComponent />, toastContainer, ); }; const ToastFoo = () => ""foo""; const ToastBar = () => ""bar""; insertToast(ToastFoo); insertToast(ToastBar); ``` 1) would `toast-container` contain both `ToastFoo` and `ToastBar`, or 2) would `ToastBar` replace `ToastFoo`, or 3) would React throw an error saying that `toast-…",,,,,,Anecdotal,comment,,,,,,,,2018-03-20,github/joetidee,https://github.com/facebook/react/issues/10713#issuecomment-374684243,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"> Just to clarify, if you were to do this: > > ``` > const insertToast = (ToastComponent ) => { > const toastContainer = document.getElementById('toast-container'); > > return ReactDOM.createPortal( > <ToastComponent />, > toastContainer, > ); > }; > > const ToastFoo = () => ""foo""; > const ToastBar = () => ""bar""; > > insertToast(ToastFoo); > insertToast(ToastBar); > ``` > 1. would `toast-container` contain both `ToastFoo` and `ToastBar`, or > 2. would `ToastBar` replace `ToastFoo`, or > 3. woul…",,,,,,Anecdotal,comment,,,,,,,,2019-01-24,github/OZZlE,https://github.com/facebook/react/issues/10713#issuecomment-457176010,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"If you know what you're doing, here is a `<Portal />` component that under the hoods creates a portal, empties the target DOM node and mounts any component with any props: ```jsx const Portal = ({ Component, container, ...props }) => { const [innerHtmlEmptied, setInnerHtmlEmptied] = React.useState(false) React.useEffect(() => { if (!innerHtmlEmptied) { container.innerHTML = '' setInnerHtmlEmptied(true) } }, [innerHtmlEmptied]) if (!innerHtmlEmptied) return null return ReactDOM.createPortal(<Com…",,,,,,Anecdotal,comment,,,,,,,,2019-05-30,github/rpellerin,https://github.com/facebook/react/issues/10713#issuecomment-497167048,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"> Ooh I see what you mean. > > I don’t think we support rendering portals into DOM nodes _already having content managed by React_. Just like you can’t `ReactDOM.render()` into a container already having other React children, and expect it to work. > > We should probably clear and warn in this case. Not sure. @gaearon I still don't see this mentioned in the documentation? Could it be added plz, maybe a Warning or Gotchas section or so.. before the actual instruction how to use it :) My new coll…",,,,,,Anecdotal,comment,,,,,,,,2019-10-30,github/OZZlE,https://github.com/facebook/react/issues/10713#issuecomment-547884778,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"I'm having similar use case. I currently have a 10000x10000 excel like UI where each cell has some interaction capabilities eg: opening a drawer with CTAs, drag, move, perform cell functions etc. Instead of bloating each cell with functionality and context of already applied formulaes from my state container, I've created an interaction provider which catches events from cell and renders a portal into the {data-id:""id"",data-colId:""col-id""} cell. using data-attributes in my selector. On changing…",,,,,,Anecdotal,comment,,,,,,,,2019-11-12,github/boltcoder,https://github.com/facebook/react/issues/10713#issuecomment-552882649,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"> I'm having similar use case. I currently have a 10000x10000 excel like UI where each cell has some interaction capabilities eg: opening a drawer with CTAs, drag, move, perform cell functions etc. > Instead of bloating each cell with functionality and context of already applied formulaes from my state container, I've created an interaction provider which catches events from cell and renders a portal into the {data-id:""id"",data-colId:""col-id""} cell. using data-attributes in my selector. > > On …",,,,,,Anecdotal,comment,,,,,,,,2019-11-12,github/boltcoder,https://github.com/facebook/react/issues/10713#issuecomment-552896536,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
"@gaearon I think there are valid use cases for portal containers created in other React components, such as rendering a skeleton of an app and then filling in different ""slots"" from other components. For example, let's imagine the following scenario: - My app has a navbar with some generic elements (e.g. logo and account menu) plus an area for contextual options (that depend on the current page/route). - Each route is lazily loaded to avoid serving a massive bundle straight away. - The contextu…",,,,,,Anecdotal,comment,,,,,,,,2023-07-16,github/Danziger,https://github.com/facebook/react/issues/10713#issuecomment-1637205341,repo: facebook/react | issue: What should portals do when container has a child managed by React? | keyword: gotcha
onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener Extracting from https://github.com/facebook/react/issues/12643. This issue has always been in React. I can reproduce it up to React 0.11. However **it's probably extremely rare in practice and isn't worth fixing**. I'm just filing this for posterity. Here is a minimal example. ```js class App extends React.Component { state = {value: ''} handleChange = (e) => { this.setState({ value: e.target.val…,,,,,,Anecdotal,issue,,,,,,,,2018-08-17,github/gaearon,https://github.com/facebook/react/issues/13424,repo: facebook/react | keyword: gotcha | state: open
I’m not sure but since it has always been broken I guess it’s not the easiest one. I’m not even sure it can be solved nicely.,,,,,,Anecdotal,comment,,,,,,,,2018-08-20,github/gaearon,https://github.com/facebook/react/issues/13424#issuecomment-414400862,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
@gaearon Can it be solved by passing the input value at that moment along before running setState? https://github.com/facebook/react/blob/672e859d311536ddf5f09fb47dcb84007703aa65/packages/react-reconciler/src/ReactFiberClassComponent.js#L174-L190,,,,,,Anecdotal,comment,,,,,,,,2018-08-31,github/whs-dot-hk,https://github.com/facebook/react/issues/13424#issuecomment-417574935,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"Sorry I can't figure out another way but add another snapshot argument, which is ugly... so let it be",,,,,,Anecdotal,comment,,,,,,,,2018-08-31,github/whs-dot-hk,https://github.com/facebook/react/issues/13424#issuecomment-417689910,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"Instead of using this ` onChange={this.handleChange}`, you can use `onChange={event => this.handleChange(event.target.value)} />`",,,,,,Anecdotal,comment,,,,,,,,2018-09-25,github/vinay72,https://github.com/facebook/react/issues/13424#issuecomment-424429272,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"The issue here is not only because of **non-React capture phase listener** . I have a separate use case reproducing the same issue, since react makes batch updates to state once per event handler so if multiple events are attached (eg **onKeydown** and **onChange**) here onKeydown handler triggers a state update using the useReducer hook which in turn triggers a re-render thus re-setting the updated/changed DOM node value to what is present in the state thus not firing onChange event at all. Th…",,,,,,Anecdotal,comment,,,,,,,,2020-04-15,github/arkakkar,https://github.com/facebook/react/issues/13424#issuecomment-614334988,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"Oh man, I wish I'd stumbled across this thread earlier - was banging my head against this issue for a while and thought I was going insane. I managed to reproduce my simplified use case [here](https://codesandbox.io/s/react-hooks-addeventlistener-conflict-db76e?file=/src/index.js). I have an application where I've started to add in keyboard shortcuts, hence why I was making use of `document.addEventListener` as well as other form inputs on the page. What I was seeing in my app while I was tryin…",,,,,,Anecdotal,comment,,,,,,,,2020-04-23,github/owenDods,https://github.com/facebook/react/issues/13424#issuecomment-618453594,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"I got this issue on a requirement where the select file dialog should automatically open when the form is opened/rendered/mounted (like an autofocus behaviour). I can't avoid the form re-render due to other code's part. In this case, the select file dialog opens but the input file onChange event doesn't trigger when the user confirms the select the files. Edit: in case someone is having the same required and is looking for a solution, I did a workaround by creating a second input outside the fo…",,,,,,Anecdotal,comment,,,,,,,,2020-11-04,github/peluprvi,https://github.com/facebook/react/issues/13424#issuecomment-721694003,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"I have come across this bug in practice - mouse coordinates are kept in state and communicated via props. The result is that controlled select elements are inoperable by the mouse, but work fine with the keyboard.",,,,,,Anecdotal,comment,,,,,,,,2021-06-30,github/ottworks,https://github.com/facebook/react/issues/13424#issuecomment-871775318,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"> I got this issue on a requirement where the select file dialog should automatically open when the form is opened/rendered/mounted (like an autofocus behaviour). I can't avoid the form re-render due to other code's part. In this case, the select file dialog opens but the input file onChange event doesn't trigger when the user confirms the select the files. > > Edit: in case someone is having the same required and is looking for a solution, I did a workaround by creating a second input outside …",,,,,,Anecdotal,comment,,,,,,,,2022-02-12,github/westlife29,https://github.com/facebook/react/issues/13424#issuecomment-1036983681,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
I was able to leverage queueMicrotask https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask without having to move the input out. @peluprvi,,,,,,Anecdotal,comment,,,,,,,,2022-02-21,github/rudhman,https://github.com/facebook/react/issues/13424#issuecomment-1046776565,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
Repro with React 18 and hooks: https://codesandbox.io/s/react-18-onchange-dropped-if-re-rendered-in-non-react-capture-listener-forked-slrhyh,,,,,,Anecdotal,comment,,,,,,,,2022-02-23,github/eps1lon,https://github.com/facebook/react/issues/13424#issuecomment-1049195365,repo: facebook/react | issue: onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener | keyword: gotcha
"Bug: React test triggers mouseout event for disabled button <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> React version: 16.14.0 ## Steps To Reproduce 1. Create a test file in a react project, and paste the following code. 2. Run the test 3. The test for onMouseLeave event fails. <!-- Your bug will get fixed much fas…",,,,,,Anecdotal,issue,,,,,,,,2021-03-09,github/tulsidaskhatri,https://github.com/facebook/react/issues/20966,repo: facebook/react | keyword: gotcha | state: open
![image](https://user-images.githubusercontent.com/12712484/110868661-473ab800-82c9-11eb-8190-529fc8b0253a.png) Gotcha ;),,,,,,Anecdotal,comment,,,,,,,,2021-03-11,github/jordyvandomselaar,https://github.com/facebook/react/issues/20966#issuecomment-797117380,repo: facebook/react | issue: Bug: React test triggers mouseout event for disabled button | keyword: gotcha
@tulsidaskhatri thanks for the clear issue with tests for the cases you were talking about! Made opening a PR a lot easier =),,,,,,Anecdotal,comment,,,,,,,,2021-03-12,github/jordyvandomselaar,https://github.com/facebook/react/issues/20966#issuecomment-797142691,repo: facebook/react | issue: Bug: React test triggers mouseout event for disabled button | keyword: gotcha
I have tried running the tests as described. And still `onMouseLeave` test case if failing. So can I work on this issue?,,,,,,Anecdotal,comment,,,,,,,,2021-07-24,github/naz3eh,https://github.com/facebook/react/issues/20966#issuecomment-886103012,repo: facebook/react | issue: Bug: React test triggers mouseout event for disabled button | keyword: gotcha
"Ah, fair enough. In the PR I linked, I've tried to solve this issue, I'd love to hear your feedback if you have any =)",,,,,,Anecdotal,comment,,,,,,,,2021-07-29,github/jordyvandomselaar,https://github.com/facebook/react/issues/20966#issuecomment-889213659,repo: facebook/react | issue: Bug: React test triggers mouseout event for disabled button | keyword: gotcha
"[Experiment] Context Selectors ## Based on #20890 **This is not a final API. It's meant for internal experimentation only. If we land this feature in our stable release channel, it will likely differ from the version presented here.** This implements `unstable_useContextSelector` behind a feature flag. It's based on [RFC 119](https://github.com/reactjs/rfcs/pull/119) and [RFC 118](https://github.com/reactjs/rfcs/pull/118) by @gnoff. Usage: ```js const context = useContextSelector(Context, c => …",,,,,,Anecdotal,issue,,,,,,,,2021-01-23,github/acdlite,https://github.com/facebook/react/pull/20646,repo: facebook/react | keyword: gotcha | state: open
"This pull request is automatically built and testable in [CodeSandbox](https://codesandbox.io). To see build info of the built libraries, click [here](https://ci.codesandbox.io/status/facebook/react/pr/20646/builds/94741) or the icon next to each commit SHA. Latest deployment of this branch, based on commit 26d596d3cdd8226f160f801c3386ffe20e657286: |Sandbox| Source | |--|--| |[React](https://codesandbox.io/s/react-f8z7p)| Configuration |",,,,,,Anecdotal,comment,,,,,,,,2021-01-23,github/codesandbox-ci[bot],https://github.com/facebook/react/pull/20646#issuecomment-765874329,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 903384ab0ccd57efd56225dbc82ba6ad56021380...eb46705daadf92cc397267e65bcb6675faca3835 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | oss-experimental/react-debug-tools/cjs/react-debug-tools.production.min.js | **+2.…",,,,,,Anecdotal,comment,,,,,,,,2021-01-23,github/sizebot,https://github.com/facebook/react/pull/20646#issuecomment-765875193,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
"lol, I was waiting somebody ask. Although I understand the intuition, what it's supposed to be is `useSelectedContextValue` which is too long. In one of the RFCs, there was a discussion about the idea of `useContext(ctx, selectorFn)`. Certainly, this requires to drop `unstable_observedBits`. Might look cleaner. (Personally, I'm ok with whatever decision is made.)",,,,,,Anecdotal,comment,,,,,,,,2021-01-23,github/dai-shi,https://github.com/facebook/react/pull/20646#issuecomment-766142018,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
"Think of this PR as a proof of concept. It’s very unlikely to be the final design. We can bikeshed more before release. Re: why it’s a separate hook , makes it easier to track usages internally, and delete if needed. Also avoids a conflict with observed bits, which we still need to remove. This also isn’t the only context-related feature we have planned, and it’s unclear how they’ll overlap. Might be separate hooks, might be all the same hook.",,,,,,Anecdotal,comment,,,,,,,,2021-01-23,github/acdlite,https://github.com/facebook/react/pull/20646#issuecomment-766145501,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
"When they’re more fleshed out, yeah. One of the motivations for this PR was that the other proposals are only useful in combination with this feature (bailing out during render if nothing has changed).",,,,,,Anecdotal,comment,,,,,,,,2021-01-23,github/acdlite,https://github.com/facebook/react/pull/20646#issuecomment-766151150,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
"> In one of the RFCs, there was a discussion about the idea of useContext(ctx, selectorFn). Certainly, this requires to drop unstable_observedBits. Might look cleaner. (Personally, I'm ok with whatever decision is made.) I think this is better, we can easily bail in/out of the selector functionality anytime. Could also imagine the API being like this: ```tsx declare function useContext<T>(ctx: Context<T>): T; declare function useContext<T, R>(ctx: Context<T>, selector: (value: T) => R, isEqual?…",,,,,,Anecdotal,comment,,,,,,,,2021-01-25,github/lxsmnsyc,https://github.com/facebook/react/pull/20646#issuecomment-766497143,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
Let's keep the discussion at [RFC 119](https://github.com/reactjs/rfcs/pull/119) and [RFC 118](https://github.com/reactjs/rfcs/pull/118).,,,,,,Anecdotal,comment,,,,,,,,2021-01-25,github/acdlite,https://github.com/facebook/react/pull/20646#issuecomment-766979375,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
"Pushed some updates. It's now based on top of the Lazy Propagation (#20890) experiment. I also modified the API so that it returns the full context object, instead of a selected value. Added rationale to PR description: > One difference from the RFC is that it does not return the selected value. It returns the full context object. This serves a few purposes: it discourages you from creating any new objects or derived values inside the selector, because it'll get thrown > out regardless. Instead…",,,,,,Anecdotal,comment,,,,,,,,2021-02-26,github/acdlite,https://github.com/facebook/react/pull/20646#issuecomment-786912866,repo: facebook/react | issue: [Experiment] Context Selectors | keyword: gotcha
Bug: react-hooks/exhaustive-deps false postive when given undefined as deps <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> There's currently a false positive for the `react-hooks/exhaustive-deps` rule as it does not accept `undefined` as dependency. ```typescript // Below gives => React Hook useMemo has a missing depe…,,,,,,Anecdotal,issue,,,,,,,,2020-11-15,github/sQVe,https://github.com/facebook/react/issues/20262,repo: facebook/react | keyword: gotcha | state: open
"Thanks for the report. I frequently stumble over this and don't understand the problem https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33220 tried to solve by allowing `undefined`. It looks to me that this is ""you're on your own""-territory so it's expected that you need to check for yourself whether `undefined` is ok. In any case, the TypeScript types are not maintained by the React core team so they're not an argument for changing core packages. /cc @Jessidhia",,,,,,Anecdotal,comment,,,,,,,,2020-11-16,github/eps1lon,https://github.com/facebook/react/issues/20262#issuecomment-727882018,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
@eps1lon As far as I understand it the typings only allow `DependencyList | undefined` as it indicates a clearer intent and would also catch potential bugs where the developer forgets to input `deps`. In **my opinion** the defaults of the typings are more sensible than the settings for the `exhaustive-deps` rule. Why does `exhaustive-deps` allow omitting `deps` but not setting it to `undefined`?,,,,,,Anecdotal,comment,,,,,,,,2020-11-16,github/sQVe,https://github.com/facebook/react/issues/20262#issuecomment-727888711,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
"> Why does exhaustive-deps allow omitting deps but not setting it to undefined? Gotcha, that makes more sense to me. That sounds reasonable to propose as a change if ```js useMemo(() => Object.keys(byId)) useMemo(() => Object.keys(byId), undefined) ``` would indeed not work the same statically.",,,,,,Anecdotal,comment,,,,,,,,2020-11-16,github/eps1lon,https://github.com/facebook/react/issues/20262#issuecomment-727900278,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
Hi @eps1lon @sQVe is this issue up for grabs? I can give it a shot if you guys are not already working on this,,,,,,Anecdotal,comment,,,,,,,,2020-11-19,github/sarathps93,https://github.com/facebook/react/issues/20262#issuecomment-730584771,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
> Hi @eps1lon @sQVe is this issue up for grabs? I can give it a shot if you guys are not already working on this Feel free to work on it. Please do let us know if you no longer work on the issue. If you're stuck you can share your progress so that others can help you.,,,,,,Anecdotal,comment,,,,,,,,2020-11-19,github/eps1lon,https://github.com/facebook/react/issues/20262#issuecomment-730601424,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
Thanks @eps1lon. Is the suggested change of removing the warning for `undefined` only for `useMemo` or even for other hooks as well? I mean what about `useCallback`?,,,,,,Anecdotal,comment,,,,,,,,2020-11-19,github/sarathps93,https://github.com/facebook/react/issues/20262#issuecomment-730621668,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
@sarathps93 I would assume that this would be relevant for all hooks that use the `deps` api. It makes sense to allow to omit and set to `undefined` in all cases.,,,,,,Anecdotal,comment,,,,,,,,2020-11-20,github/sQVe,https://github.com/facebook/react/issues/20262#issuecomment-731011623,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
> @eps1lon Any roadmap to merge the PR? This would require a maintainer. I only triage issues in this repository.,,,,,,Anecdotal,comment,,,,,,,,2021-04-29,github/eps1lon,https://github.com/facebook/react/issues/20262#issuecomment-829380740,repo: facebook/react | issue: Bug: react-hooks/exhaustive-deps false postive when given undefined as deps | keyword: gotcha
"Provide a renderer-agnostic equivalent of setNativeProps() Dan asked me to open up an issue: https://twitter.com/dan_abramov/status/1246883821477339139 My proposal is to extend React with a small hook that allows us to mutate nodes without causing render. React has no official means to deal with fast occurring updates and libraries like react-spring and framer-motion already do something similar but in a way that forces them to carry a lot of burden. ```jsx import React, { useMutation } functio…",,,,,,Anecdotal,issue,,,,,,,,2020-04-05,github/drcmda,https://github.com/facebook/react/issues/18499,repo: facebook/react | keyword: gotcha | state: open
"And this is how we do it today: https://github.com/react-spring/react-spring/tree/master/src/targets The original idea for this is by @vjeux (from the animated library). Each target defines a function that is able to transport props into the target system. This of course isn't dynamic, targets have to added and maintained, and it's also superfluous since reconcilers have that knowledge.",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/drcmda,https://github.com/facebook/react/issues/18499#issuecomment-609472839,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"Yes. As an example, here's react-three-fibers commitUpdate: https://github.com/react-spring/react-three-fiber/blob/master/src/reconciler.tsx#L382 which calls an apply function here: https://github.com/react-spring/react-three-fiber/blob/master/src/reconciler.tsx#L108 commitUpdate has full knowledge of platform details. This is of course also how React handles props on re-rendering.",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/drcmda,https://github.com/facebook/react/issues/18499#issuecomment-609473389,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
Let me try to rephrase your request to make sure I understand it. I think you're asking for a way for renderer-agnostic libraries to tell React to imperatively synchronously update a host node with given props. But without actually specifying *how* that update gets applied because presumably the renderer's host config already knows that. So the host node itself is opaque.,,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/gaearon,https://github.com/facebook/react/issues/18499#issuecomment-609473475,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
Do you always know the desired prop values at the moment of the call? Or can they depend on previous prop values? How would you express a request to delete a prop with your proposed API? Should that even be possible?,,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/gaearon,https://github.com/facebook/react/issues/18499#issuecomment-609474285,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"The values are known, it wouldn't have to depend on previous values. Although they are available anyway through ref.current pointing to the actual object. But, ```jsx const [ref, set] = useMutation() set(obj => ({ ... })) ``` would be more than welcome, why not. Deletion isn't required, just like you can do: ```jsx <xyz something={123} /> // later <xyz /> set({ x: 0 }) set({ x: undefined }) // i guess? it's just like setState, which technically doesn't delete ``` The reconciler handles it throu…",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/drcmda,https://github.com/facebook/react/issues/18499#issuecomment-609474952,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
">Deletion isn't required, just like you can do: There is a difference between deleting a prop and having a prop with a `null` or `undefined` value. Whether or not the renderer interprets them the same or differently is up to the renderer, but technically these are two different things. So I think we need to be clearer about the behavior here. If I pass `set({ a: 1 })` and then `set({ a: 2, b: 1 })` and then `set({ b: 2 })`, what happens exactly?",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/gaearon,https://github.com/facebook/react/issues/18499#issuecomment-609475599,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"It's interesting that `commitUpdate` doesn't exist [in the persistent mode](https://github.com/facebook/react/blob/1fd45437d781b1b905be2308447aa7793bbcb571/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js#L109-L122). Which the new React Native renderer uses. If this is built into React, we'd need a way for it to work across both modes somehow.",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/gaearon,https://github.com/facebook/react/issues/18499#issuecomment-609475836,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"```jsx const [ref, set] = useMutation() set({ a: 1 }) ---> obj.a === 1 set({ a: 2, b: 1 }) ---> obj.a === 2, b === 1 set({ b: 2 }) ---> obj.a === 2, b === 2 ``` no deletion required imo. it's a escape hatch, similar to dangerouslysetinnerhtml. i guess the name ""useMutation"" is also too harmless, it should have a threatening, evil name with underscores. > commitUpdate doesn't exist in the persistent mode. Which the new React Native renderer uses. If this is built into React, we'd need a way for …",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/drcmda,https://github.com/facebook/react/issues/18499#issuecomment-609476200,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
>Im curious how it can do that. I have never understood these modes in depth. Mutation mode is for host APIs where you're dealing with mutable nodes that have methods like `insert` / `append` / `remove` / `update`. Like DOM. Persistent mode is for host APIs where the only way to update something is to create a copy of the tree with changes and then `replaceRoot(copy)`. Essentially an immutable host API. The new RN engine is written like this to better take advantage of multi-threading. I'm not …,,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/gaearon,https://github.com/facebook/react/issues/18499#issuecomment-609476561,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"I guess this is similar to the concept of the NativeDriver animations in RN, except the ""native"" part is actually still JavaScript. The way they solve the problem there is that **only non-layout props are animatable** — therefore, it is safe to do imperative updates ""out of band"" without worrying about what happens to the persistent data structures used for layout.",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/gaearon,https://github.com/facebook/react/issues/18499#issuecomment-609477770,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"I think what you're essentially asking for is a generalized `setNativeProps` which is (was) a thing in RN. However, I think that was deprecated in Fabric. @sebmarkbage and @shergin might be able to tell us more about how the thinking has been changing there. I know there's been a few iterations.",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/gaearon,https://github.com/facebook/react/issues/18499#issuecomment-609479007,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"In animatedjs, react-spring and framer-motion the user makes a specific commitment. Something like: ```jsx const props = useAnimation({ x: props.x }, [props.x]) return <a.div style={{ left: x }} /> ``` these libs use ""<a.xyz>"" so that they can receive props directly, so that it is all still declarative on the outside and there is no conflict between props and mutations. They do mutate internally and ""a"" packs the platform knowledge. But i imagine that hook as a very simple, no-rules tool. Whoev…",,,,,,Anecdotal,comment,,,,,,,,2020-04-05,github/drcmda,https://github.com/facebook/react/issues/18499#issuecomment-609479297,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"setNativeProps was removed in Fabric because it had undefined behavior that couldn't be modeled the same way between paper and fabric. Also, in paper all of the communication is async so this function could t happen sync. That could work in Fabric though. The land mines with setNativeProps is that it was essentially setting state on the native views and there wasn't a guarantee for when that would get reset since it can be out of sync with a React render. For example: React renders a view with …",,,,,,Anecdotal,comment,,,,,,,,2020-06-28,github/elicwhite,https://github.com/facebook/react/issues/18499#issuecomment-650686427,repo: facebook/react | issue: Provide a renderer-agnostic equivalent of setNativeProps() | keyword: gotcha
"submit() on form element doesn't trigger onSubmit **Do you want to request a _feature_ or report a _bug_?** Bug **What is the current behavior?** If I have a ref to the `form` DOM element and call `submit()` on it, it does not trigger the `onSubmit` callback. Repro: https://jsfiddle.net/owiber/r8moy7ey/1/ In the above fiddle, if you hit `<enter>` in the input, it properly calls the `onSubmit` (alerts). If you click the button, which calls `this._form.submit()`, it does not. **What is the expect…",,,,,,Anecdotal,issue,,,,,,,,2016-05-18,github/owiber,https://github.com/facebook/react/issues/6796,repo: facebook/react | keyword: gotcha | state: closed
"This is expected behaviour. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit): > The form's onsubmit event handler (for example, onsubmit=""return false;"") will not be triggered when invoking this method from Gecko-based applications. Using the `onsubmit` event handler and calling `submit` (think of it as an API method) is something different.",,,,,,Anecdotal,comment,,,,,,,,2016-05-18,github/texttechne,https://github.com/facebook/react/issues/6796#issuecomment-220125865,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"If anyone else stumbles across this issue: You can submit from the form element, but you need to dispatch the submit event. Example: ```javascript form.dispatchEvent(new Event('submit')) ```",,,,,,Anecdotal,comment,,,,,,,,2017-03-22,github/philipstanislaus,https://github.com/facebook/react/issues/6796#issuecomment-288350025,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"Hi from the future, Im struggling to run this on React 15.6.2 But it does not work thx in advance ```jsx import React from 'react'; export default class extends React.Component { componentWillReceiveProps(nextProps) { if(nextProps.forceSubmit) { this.formRef.dispatchEvent(new Event('submit')); } } handleSubmit(evt) { evt.preventDefault(); this.props.onSubmit(); } render() { return ( <form ref={e => this.formRef = e} onSubmit={evt => this.handleSubmit(evt)}> {this.props.children} </form> ) } } `…",,,,,,Anecdotal,comment,,,,,,,,2019-01-25,github/k1r0s,https://github.com/facebook/react/issues/6796#issuecomment-457642257,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"Even now with 16.8.6 still not working, I need dispatch event: ```typescript const App: React.FC = () => { const formRef = useRef<HTMLFormElement>(null); function handleSubmit(e: any) { e.preventDefault(); console.log(""submitting""); } return ( <div className=""App""> <form ref={formRef} onSubmit={handleSubmit}> content <button type=""submit"">Submit Inside</button> </form> <button onClick={() => formRef.current!.dispatchEvent(new Event(""submit""))} > Submit Outside </button> </div> ); }; ```",,,,,,Anecdotal,comment,,,,,,,,2019-05-07,github/naivefun,https://github.com/facebook/react/issues/6796#issuecomment-489997016,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"@naivefun just to notice you can achieve this with the [form attribute of an button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-form): ```jsx function App() { const formId = ""something""; return ( <div className=""App""> <form id={formId} onSubmit={() => alert(""submitted"")} /> <button type=""submit"" form={formId}> Submit from outside form </button> </div> ); } ``` running example: https://codesandbox.io/s/3q50nqxxx1",,,,,,Anecdotal,comment,,,,,,,,2019-05-07,github/alexrohleder,https://github.com/facebook/react/issues/6796#issuecomment-490013451,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"And for those who want to be able to call `event.preventDefault()` within the onSubmit handler, then you'll need to modify the event to: `refForm.current.dispatchEvent(new Event('submit', { cancelable: true }))`",,,,,,Anecdotal,comment,,,,,,,,2019-10-14,github/raRaRa,https://github.com/facebook/react/issues/6796#issuecomment-541791481,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"@raRaRa I would also like to add that: `refForm.current.dispatchEvent(new Event('submit', { cancelable: true }))` does not do the trick when targeting chrome. However, something like this should help ```typescript const form = refForm.current; if (form) { if (typeof form.requestSubmit === 'function') { form.requestSubmit(); } else { form.dispatchEvent(new Event('submit', {cancelable: true})); } } ```",,,,,,Anecdotal,comment,,,,,,,,2020-03-03,github/benkovy,https://github.com/facebook/react/issues/6796#issuecomment-594081509,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"@benkovy @raRaRa Thank you for your suggestions. However, neither solution seems to work in Firefox. Any suggestions?",,,,,,Anecdotal,comment,,,,,,,,2020-03-31,github/jdpt0,https://github.com/facebook/react/issues/6796#issuecomment-606761209,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"I'd also like to point out that the dispatch event workaround means no input ""validation"" on the form fields, meaning elements with the **required** tag `<input type=""file"" required />` **are not checked.**",,,,,,Anecdotal,comment,,,,,,,,2020-05-16,github/cgarrovillo,https://github.com/facebook/react/issues/6796#issuecomment-629586246,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
Update: It is possible to use the **requestSubmit()** method on the form element to trigger field validation + submission. More info here: https://stackoverflow.com/questions/61831661/reactjs-submit-form-onchange?noredirect=1#comment109366001_61831661,,,,,,Anecdotal,comment,,,,,,,,2020-05-16,github/cgarrovillo,https://github.com/facebook/react/issues/6796#issuecomment-629600797,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"Seems like this broke with React 17 for some reason, on Firefox. Using the `requestSubmit` solution seems to work.",,,,,,Anecdotal,comment,,,,,,,,2020-11-05,github/raRaRa,https://github.com/facebook/react/issues/6796#issuecomment-722305522,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
This seems to be a better solution than `requestSubmit` https://github.com/final-form/react-final-form/issues/878#issuecomment-745364350,,,,,,Anecdotal,comment,,,,,,,,2021-04-13,github/jleider,https://github.com/facebook/react/issues/6796#issuecomment-819061319,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"Both of these options worked for me: ```javascript if (formRef.current !== null) { formRef.current.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true, })) } ``` ```javascript if (formRef.current !== null) { formRef.current.requestSubmit() } ``` Note: [requestSubmit](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit) is only supported in recent browser versions.",,,,,,Anecdotal,comment,,,,,,,,2025-06-28,github/Exagone313,https://github.com/facebook/react/issues/6796#issuecomment-3015249026,repo: facebook/react | issue: submit() on form element doesn't trigger onSubmit | keyword: gotcha
"[React 19] inline style tag not removing when new content is loaded without that element ## Summary Trying out the inline style referred in the [doc](https://react.dev/reference/react-dom/components/style#rendering-an-inline-css-stylesheet) and it works as expected on initial load. After the initial load, if I change to page (or navigate to a different content) where some of the element in the initial page isn't used, I expect the style tag for those to be removed but looks like they are just t…",,,,,,Anecdotal,issue,,,,,,,,2025-02-12,github/tounsoo,https://github.com/facebook/react/issues/32367,repo: facebook/react | keyword: gotcha | state: closed
"FWIW, this is currently expected. It matches the behavior of all (most?) existing CSS-in-JS libraries. Styles are not cleaned up, there is no ""garbage collection"" implemented for them. It's likely that the user navigates back to the page using those styles so they might still be used in the future by the application. In a sense, a style element can be left in the DOM because it doesn't matter for the application all that much if it's there is there are elements matching the selectors contained …",,,,,,Anecdotal,comment,,,,,,,,2025-02-23,github/Andarist,https://github.com/facebook/react/issues/32367#issuecomment-2676722640,repo: facebook/react | issue: [React 19] inline style tag not removing when new content is loaded without that element | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-06-06,github/github-actions[bot],https://github.com/facebook/react/issues/32367#issuecomment-2950672806,repo: facebook/react | issue: [React 19] inline style tag not removing when new content is loaded without that element | keyword: gotcha
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2025-06-13,github/github-actions[bot],https://github.com/facebook/react/issues/32367#issuecomment-2971921694,repo: facebook/react | issue: [React 19] inline style tag not removing when new content is loaded without that element | keyword: gotcha
Discussion: useEffect hook with array dependency that has a default value causes render loop So maybe this is not a bug (because it's default JavaScript behavior) but a pitfall that should be documented in the `useEffect`-section of the hooks documentation. I'm not quite sure because it feels like react should handle this as default value assignment on destructuring functional component props is recommended. When a `useEffect`-Hook that has an array-prop with a default value as one of its depen…,,,,,,Anecdotal,issue,,,,,,,,2020-02-25,github/gregor-mueller,https://github.com/facebook/react/issues/18123,repo: facebook/react | keyword: gotcha | state: closed
"The pitfall or gotcha, is going into endless loop with code like these. ```jsx function MyComponent({ arrayProp = [], title, onEvent }) { // arrayProp default prop value is a new object on every render useEffect(() => { console.log(""arrayProp effect"", arrayProp); onEvent(title + ""1""); // title prop gets updated triggering a re-render, but only once // because this default prop is new on every render, this creates the endless loop }, [arrayProp]); return ( <div> <h1>{title}</h1> <p>You will run …",,,,,,Anecdotal,comment,,,,,,,,2020-02-27,github/kunukn,https://github.com/facebook/react/issues/18123#issuecomment-591974946,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"To avoid this you can declare it outside e.g. ```js const defaultArrayProp = []; function MyComponent({ arrayProp = defaultArrayProp, title, onEvent }) { ``` Consumers of your component might still encounter this pitfall when using `<MyComponent arrayProp={[]} />` if `MyComponent` triggers a re-render in its owner as well.",,,,,,Anecdotal,comment,,,,,,,,2020-02-27,github/eps1lon,https://github.com/facebook/react/issues/18123#issuecomment-591978544,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"I know that you can work around this. It's actually in the example. @kunukn it's not advised to use `defaultProps` for functional components, as you already figured. The solution from @eps1lon is the one I generally go for. But the thing is, that this is something that multiple developers ran into this pitfall already. As react is often learned by JavaScript beginners, this is something that should just be on the documentation for `useEffect`, I guess. I don't know whether anonymously created o…",,,,,,Anecdotal,comment,,,,,,,,2020-02-27,github/gregor-mueller,https://github.com/facebook/react/issues/18123#issuecomment-591996463,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"@ffgregormueller I think this is ""normal"" behaviour. By defaulting to a declared variable, default stays the same and so dependency array checks ok. Putting an empty array declares a new one every time so the comparison in the array doesn't match. I may be wrong, but I believe this is normal JS behaviour.",,,,,,Anecdotal,comment,,,,,,,,2020-02-27,github/tomasyaya,https://github.com/facebook/react/issues/18123#issuecomment-592123636,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"@tomasyaya No, you are not wrong, you are totally right! It absolutely **is** default JS behavior. I changed the title of issue, as this is in fact not a bug. But the point I tried to get across is that in some cases react intelligently takes care of comparing props and deciding whether or not to re-render. I just wanted to start a discussion whether there should be a mechanism here as well that e.g. internally checks for arrays or objects to be empty instead of only referential equality and sk…",,,,,,Anecdotal,comment,,,,,,,,2020-02-28,github/gregor-mueller,https://github.com/facebook/react/issues/18123#issuecomment-592407934,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"In case someone looks for alternative approaches, I created a small helper (which also allows for some type inference in case TS is used): ```ts // emptyArray.ts const instance = Object.freeze([]); export default function emptyArray<T>(): T[] { // Ignoring the `readonly` part // @ts-ignore return instance; } ``` ```ts function MyComponent({ arrayProp = emptyArray(), title, onEvent }) { ```",,,,,,Anecdotal,comment,,,,,,,,2020-04-02,github/mrcljx,https://github.com/facebook/react/issues/18123#issuecomment-608136383,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
I'm sorry if 'm wrong. I think usage of memos/refs with empty array as initial value will overcome this issue.,,,,,,Anecdotal,comment,,,,,,,,2020-06-11,github/tejas-bontadka,https://github.com/facebook/react/issues/18123#issuecomment-642931130,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"I agree with @tejas-bontadka, I think memoizing the dependency with `useMemo` will solve the issue the react way.",,,,,,Anecdotal,comment,,,,,,,,2020-07-06,github/martinjaime,https://github.com/facebook/react/issues/18123#issuecomment-654034708,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"Sure, this would be correct but also a bit too much hassle where just having a reference to an empty array would also help. Note: having an empty array or even object as default is something I repeatedly see being done wrongly as mentioned in the start of the topic. As beginners would run into this, I don't think it is very beginner-friendly to have them having to work around this (e.g. using `useMemo`). I guess this would just lead to beginners always wrapping everything in `useMemo`, trying t…",,,,,,Anecdotal,comment,,,,,,,,2020-07-06,github/gregor-mueller,https://github.com/facebook/react/issues/18123#issuecomment-654236029,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2020-10-04,github/stale[bot],https://github.com/facebook/react/issues/18123#issuecomment-703262700,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2020-10-12,github/stale[bot],https://github.com/facebook/react/issues/18123#issuecomment-706813442,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"I've came across this issue in a similar way, and the render loop happens when the prop that has a default value is undefined. It seems the default value is causing the useEffect, and when it re-renders, it launches the useEffect again, and so on and so forth. In my case I've fixed this by passing the default value when using the component: ``` <SomeComponent arrayProp={myArray || []} /> ``` I would've rather have the default value inside the component's prop declaration and not having to worry…",,,,,,Anecdotal,comment,,,,,,,,2021-10-19,github/estebanrao,https://github.com/facebook/react/issues/18123#issuecomment-947190580,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"Hello, future coder! If you're facing this issue too, I have a solution that worked for me. ```typescript function MyComponent({ arrayProp = [] }) { useEffect(() => { // ...code // turn your array into string, // so useEffect can track it much better than non primitive array }, [JSON.stringify(arrayProp)]) return <></> } ```",,,,,,Anecdotal,comment,,,,,,,,2025-03-27,github/Layhout,https://github.com/facebook/react/issues/18123#issuecomment-2756514956,repo: facebook/react | issue: Discussion: useEffect hook with array dependency that has a default value causes render loop | keyword: gotcha
"[compiler] Hoist dependencies from functions more conservatively Alternative to facebook/react#31584 which sets enableTreatFunctionDepsAsConditional:true` by default. This PR changes dependency hoisting to be more conservative while trying to preserve an optimal ""happy path"". We assume that a function ""is likely called"" if we observe the following in the react function body. - a direct callsite - passed directly as a jsx attribute or child - passed directly to a hook - a direct return A functio…",,,,,,Anecdotal,issue,,,,,,,,2025-03-14,github/mofeiZ,https://github.com/facebook/react/pull/32616,repo: facebook/react | keyword: gotcha | state: closed
[ci] Try to make playground e2e tests less flaky Not sure when this happened but the playground tests have gotten a little bit flaky. I suspect it's because of timeouts since it happens randomly so let's see if this helps. --- [//]: # (BEGIN SAPLING FOOTER) Stack created with [Sapling](https://sapling-scm.com). Best reviewed with [ReviewStack](https://reviewstack.dev/facebook/react/pull/32582). * __->__ #32582 * #32581,,,,,,Anecdotal,issue,,,,,,,,2025-03-12,github/poteto,https://github.com/facebook/react/pull/32582,repo: facebook/react | keyword: gotcha | state: closed
@mofeiZ I've tried that before too but I don't think it's the missing font files causing the error. If you look at the screenshots included in test-results.zip (in the CI build artifact) you'll see that the failing ones only show the header and everything else is blank,,,,,,Anecdotal,comment,,,,,,,,2025-03-12,github/poteto,https://github.com/facebook/react/pull/32582#issuecomment-2719117867,repo: facebook/react | issue: [ci] Try to make playground e2e tests less flaky | keyword: gotcha
"[React 19] Dynamically importing a data fetching hook via `use()` leads to an error ### Describe the bug I've been trying to create a component which would encapsulate data loading logic, to have the most granular approach to using `<Suspense/>`, avoiding UI duplication with skeletons. My goal was to have _one component_ which would handle suspending, fallback UI, loading, polling, errors, etc, and be used in a _server component_ like so: ``` <AsyncValue query={useSomeQuery} // query wrapper fn…",,,,,,Anecdotal,issue,,,,,,,,2024-11-27,github/dahaca,https://github.com/facebook/react/issues/31640,repo: facebook/react | keyword: gotcha | state: closed
"Hi @dahaca, Thanks for bringing up this interesting use case! I wanted to share some thoughts and ask a few clarifying questions. Observations: Error Details: The ""Update hook called on initial render"" error typically occurs when hooks are used in a way that violates React's expectations for their static call order. Dynamic imports of hooks might interfere with this, as React relies on the hook structure being consistent across renders. It’s possible that dynamically importing useSuspenseQuery …",,,,,,Anecdotal,comment,,,,,,,,2024-11-27,github/cancelledcoder,https://github.com/facebook/react/issues/31640#issuecomment-2504959808,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
Can you reduce the example to the minimal required code to reproduce this without all the abstractions you currently have in place? It's hard to follow what's going on.,,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/eps1lon,https://github.com/facebook/react/issues/31640#issuecomment-2505701967,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"@eps1lon Thanks for the reply! And apologies, I am aware the whole set up is quite `react-query` specific and indeed not easy to follow while ignoring library semantics 🙏 I have simplified the code a bit. Let me try to clear things up too and if that won't be enough, I will try to modify the example further! The most crucial and _relevant-to-the-issue_ code is in [`useDynamicQuery`](https://codesandbox.io/p/devbox/6xmt4y?file=/src/AsyncValue/useDynamicQuery.ts:12,22) – that's where the dynamic …",,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/dahaca,https://github.com/facebook/react/issues/31640#issuecomment-2505891043,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
I don't think this is minimal. Remove as much code as possible until it no longer reproduces. It doesn't need to be code you would actually ship to production. Just the code that highlights the issue. We have to go through many issues and dissecting each one takes a lot of time. I'm seeing an `import` within the hook though: ```js const query = useDynamicQuery( import(`~/queries/${queryName}`).then( ``` That means `use` will eventually see an uncached Promise which is not supported. The Promise…,,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/eps1lon,https://github.com/facebook/react/issues/31640#issuecomment-2506237374,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"Oh wow, seems to be it! 😮 I have simplified the `useDynamicQuery()` hook to accept the query name only and then added `useMemo()` ~and a `promiseCache` on top of the `moduleCache`~. Added `useDynamicQuery_fixed.ts` to the updated [sandbox](https://codesandbox.io/p/devbox/thirsty-brook-forked-fn7q8n?workspaceId=147b4aa4-6bb2-4563-b75d-162b8db6c2c9) and duplicating it here. **Edit:** just leaving `useMemo()` without the `promiseCache` seems to heal the error too. ``` ""use client""; import { use, u…",,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/dahaca,https://github.com/facebook/react/issues/31640#issuecomment-2506370600,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"> Nonetheless, could you confirm that importing hooks dynamically in tandem with use() like that is a ""legal"" React way? I don't think that's a problem. `use()` should be able to unwrap any Promise as long as it is cached. Just keep the usual Rules of Hooks in mind i.e. you can't import Hooks, unwrap them with `use` and call these Hooks within the **same** Component since that would mean you called Hooks dynamically. `useMemo` is not sufficient to cache the Promise. It's only a performance opti…",,,,,,Anecdotal,comment,,,,,,,,2024-11-29,github/eps1lon,https://github.com/facebook/react/issues/31640#issuecomment-2507178006,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"Gotcha! Do I understand correctly that, in the approach outlined here, since `use()` is given a promise within another hook the rules of hooks are not broken? And finally, now when you've mentioned `useQuery`, seems like the easiest way to achieve what I am trying to is to actually resort to `useSuspenseQuery` since it handles caching well _and_ triggers `<Suspense />` 🤔 Is this aligned with what you've meant by saying you'd use `useQuery` or you had something else in mind? Would be very gratef…",,,,,,Anecdotal,comment,,,,,,,,2024-11-29,github/dahaca,https://github.com/facebook/react/issues/31640#issuecomment-2508706732,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"> Do I understand correctly that, in the approach outlined here, since use() is given a promise within another hook the rules of hooks are not broken? I'm not following here. What is a Promise from within another Hook?",,,,,,Anecdotal,comment,,,,,,,,2024-12-03,github/eps1lon,https://github.com/facebook/react/issues/31640#issuecomment-2515254784,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"* In the working `useMemo()` [example](https://github.com/facebook/react/issues/31640#issuecomment-2506370600) of the `useDymanicQuery()` hook from couple comments back, `use()` is unwrapping a promise which returns a hook based on the name passed to `useDymanicQuery()`. * A `'use client'` [component](https://codesandbox.io/p/devbox/thirsty-brook-forked-fn7q8n?file=/src/AsyncValue/QueriedValue.tsx:20,18&workspaceId=147b4aa4-6bb2-4563-b75d-162b8db6c2c9) using `useDymanicQuery()` is then calling …",,,,,,Anecdotal,comment,,,,,,,,2024-12-04,github/dahaca,https://github.com/facebook/react/issues/31640#issuecomment-2517340876,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2025-03-04,github/github-actions[bot],https://github.com/facebook/react/issues/31640#issuecomment-2697734472,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2025-03-11,github/github-actions[bot],https://github.com/facebook/react/issues/31640#issuecomment-2714420268,repo: facebook/react | issue: [React 19] Dynamically importing a data fetching hook via `use()` leads to an error | keyword: gotcha
"Keep value of controlled number fields upon action ## Summary The second attempt to fix the problem. The first one (#30737) is simpler and just an addition of a workaround. Now I've approached it more comprehensively. Improved the system for inserting default values. Previously, they were inserted sometimes on change, sometimes on blur, _sometimes never_. I've implemented logic for determining default values for number and email inputs before submit (_it's strange that there was a comment about…",,,,,,Anecdotal,issue,,,,,,,,2024-08-20,github/alexdln,https://github.com/facebook/react/pull/30752,repo: facebook/react | keyword: gotcha | state: closed
[vc]: #pI3dQ2YV7odGXtpdl8jEvZjIuzP9KXcNKLucyvOOj0Q=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJyZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kIiwicm9vdERpcmVjdG9yeSI6ImNvbXBpbGVyL2FwcHMvcGxheWdyb3VuZCIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9mYm9wZW5zb3VyY2UvcmVhY3QtY29tcGlsZXItcGxheWdyb3VuZC9IeTNudGYxWHlyNlQ1TXhhZE05c3RSM3NDbk5LIiwicHJldmlld1VybCI6InJlYWN0LWNvbXBpbGVyLXBsYXlncm91bmQtZ2l0LWZvcmstdm9yZGdpLXMtNTg4NDJhLWZib3BlbnNvdXJjZS52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR…,,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/vercel[bot],https://github.com/facebook/react/pull/30752#issuecomment-2298769603,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: dc32c7f35ed6699e302dc7dbae17804555c669c6...e1d61650a1b94fd5c95a2608d4687445c855dab1 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | [oss-stable/react-dom/cjs/react-dom.production.js](https://react-builds.vercel.app…",,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/react-sizebot,https://github.com/facebook/react/pull/30752#issuecomment-2298906922,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
Should we verify this also works in an actual browser not just JSDOM? You can use https://react.new and a build from that PR via https://ci.codesandbox.io/status/facebook/react/pr/30752 to create a repro highlighting the fix.,,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/eps1lon,https://github.com/facebook/react/pull/30752#issuecomment-2298965660,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"While making the demo, I decided to check how checkable inputs work. And as it turned out, they don't work. I'll try to deal with them separately later. It's strange that there are no bugs reported for this... For clarity, of course, I checked in the version without my changes - https://codesandbox.io/p/devbox/silly-chebyshev-rshrhl-forked-g68h27. And here's the version with my changes - https://codesandbox.io/p/devbox/656qfj. The numeric field works well, but the checkable fields are still bei…",,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/alexdln,https://github.com/facebook/react/pull/30752#issuecomment-2299336196,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
FYI you can just use URLs in the package.json in the sandboxes. This helps to confirm the correct version is used. Can you summarize in the PR description what is being fixed and attach a before/after video? I can't seem to spot a difference but maybe I'm using the wrong browser?,,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/eps1lon,https://github.com/facebook/react/pull/30752#issuecomment-2299560879,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"> Can you summarize in the PR description what is being fixed and attach a before/after video? I can't seem to spot a difference but maybe I'm using the wrong browser? This PR is specifically for fixing the number input. When submitting from the number input itself (_i.e., changing the value without leaving it and pressing Enter_) - the value won't reset to the initial one. In the previous version, it was resetting because it was saved on blur. https://github.com/user-attachments/assets/f17a8e3…",,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/alexdln,https://github.com/facebook/react/pull/30752#issuecomment-2299585229,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"Gotcha, thank you for the clarification. I was submitting via click and then it didn't reset. That's also probably why we haven't gotten any reports yet because most devs test with a mouse or with an explicit submit. Not by an implicit submit via {enter} while focusing a form element.",,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/eps1lon,https://github.com/facebook/react/pull/30752#issuecomment-2299593011,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"> Gotcha, thank you for the clarification. I was submitting via click and then it didn't reset. That's also probably why we haven't gotten any reports yet because most devs test with a mouse or with an explicit submit. Not by an implicit submit via {enter} while focusing a form element. Yes, but at the same time this opens up some very unpleasant artifacts. And as I wrote above, I also caught the same error with checkable inputs (_which will try to fix a bit later [after merging the current PR]…",,,,,,Anecdotal,comment,,,,,,,,2024-08-20,github/alexdln,https://github.com/facebook/react/pull/30752#issuecomment-2299601321,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"> Yes, but at the same time this opens up some very unpleasant artifacts. You mean this PR introduces new bugs or during testing you noticed existing bugs? Controlled `<select>` being subject to automatic form reset is already known: https://github.com/facebook/react/issues/30580",,,,,,Anecdotal,comment,,,,,,,,2024-08-21,github/eps1lon,https://github.com/facebook/react/pull/30752#issuecomment-2301998596,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"_Just thoughts out loud, so as not to lose all these points and conclusions._ It turns out: 1. Inputs can be controlled or uncontrolled. Controlled ones are those that have a value. However, those that have a value but no change event will report an warning; 2. defaultValue is the base value of the input. It should be set as the value during rendering and will be restored when the field is reset (*if it's uncontrolled*); 3. If the field is controlled, it's expected that defaultValue will repeat…",,,,,,Anecdotal,comment,,,,,,,,2024-08-22,github/alexdln,https://github.com/facebook/react/pull/30752#issuecomment-2304033069,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"@eps1lon @sophiebits Is there anything else that needs to be done? I'm not closing the threads in case you have any more questions or a different perspective (_you know all the details better_) So from the active question - should we bring back the logic with blur? At first glance, it seems unnecessary and redundant. But if you prefer more cautious changes, we can restore it and try to remove it in subsequent tasks. _I think I've answered the rest of the questions, and I've also detailed all th…",,,,,,Anecdotal,comment,,,,,,,,2024-08-26,github/alexdln,https://github.com/facebook/react/pull/30752#issuecomment-2310308122,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"This pull request has been automatically marked as stale. **If this pull request is still relevant, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize reviewing it yet. Your contribution is very much appreciated.",,,,,,Anecdotal,comment,,,,,,,,2024-11-28,github/github-actions[bot],https://github.com/facebook/react/pull/30752#issuecomment-2506437065,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"This pull request has been automatically marked as stale. **If this pull request is still relevant, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize reviewing it yet. Your contribution is very much appreciated.",,,,,,Anecdotal,comment,,,,,,,,2025-02-27,github/github-actions[bot],https://github.com/facebook/react/pull/30752#issuecomment-2689310130,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"Closing this pull request after a prolonged period of inactivity. If this issue is still present in the latest release, please ask for this pull request to be reopened. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2025-03-06,github/github-actions[bot],https://github.com/facebook/react/pull/30752#issuecomment-2705136049,repo: facebook/react | issue: Keep value of controlled number fields upon action | keyword: gotcha
"feat(eslint-plugin-react-hooks): convert to typescript and package type declarations <!-- Thanks for submitting a pull request! We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory. Before submitting a pull request, please make sure the following is done: 1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`. 2. Run `yarn` in the r…",,,,,,Anecdotal,issue,,,,,,,,2025-01-28,github/michaelfaith,https://github.com/facebook/react/pull/32240,repo: facebook/react | keyword: gotcha | state: closed
Core migration is done. Tests are green when run locally. Now working on integrating it into the existing build infra and developing e2e test fixtures.,,,,,,Anecdotal,comment,,,,,,,,2025-01-28,github/michaelfaith,https://github.com/facebook/react/pull/32240#issuecomment-2617551657,repo: facebook/react | issue: feat(eslint-plugin-react-hooks): convert to typescript and package type declarations | keyword: gotcha
"@poteto thanks for taking a look at this already! I've made some updates and responded to several of the feedback items. > It'd be good if we can split this up into a few smaller PRs. For example the peripheral changes (installing/updating packages) or script/babel/build changes could also be split. I'm thinking these could be good candidates for breaking out as separate changes, but wanted to get your input: - removing the `useEffectEvent` / EXPERIMENTAL checks you mentioned - Add dependencies…",,,,,,Anecdotal,comment,,,,,,,,2025-01-29,github/michaelfaith,https://github.com/facebook/react/pull/32240#issuecomment-2623143385,repo: facebook/react | issue: feat(eslint-plugin-react-hooks): convert to typescript and package type declarations | keyword: gotcha
"> @poteto thanks for taking a look at this already! I've made some updates and responded to several of the feedback items. > > > > > It'd be good if we can split this up into a few smaller PRs. For example the peripheral changes (installing/updating packages) or script/babel/build changes could also be split. > > > > I'm thinking these could be good candidates for breaking out as separate changes, but wanted to get your input: > > - removing the `useEffectEvent` / EXPERIMENTAL checks you mentio…",,,,,,Anecdotal,comment,,,,,,,,2025-01-30,github/poteto,https://github.com/facebook/react/pull/32240#issuecomment-2625099517,repo: facebook/react | issue: feat(eslint-plugin-react-hooks): convert to typescript and package type declarations | keyword: gotcha
"> I would also try to get the build changes done in an earlier PR, and this PR could be for just the changes to the rules themselves. Sounds good. I updated the description of this PR to include tasks for each of those, and will link PRs as I work through each.",,,,,,Anecdotal,comment,,,,,,,,2025-01-30,github/michaelfaith,https://github.com/facebook/react/pull/32240#issuecomment-2625299451,repo: facebook/react | issue: feat(eslint-plugin-react-hooks): convert to typescript and package type declarations | keyword: gotcha
"I've rebased following the other PRs merging, and resolved merge conflicts. I'll tackle the build changes next. First in this branch, since I have something to work against, and then break it out into a separate change to review on its own.",,,,,,Anecdotal,comment,,,,,,,,2025-02-03,github/michaelfaith,https://github.com/facebook/react/pull/32240#issuecomment-2632420033,repo: facebook/react | issue: feat(eslint-plugin-react-hooks): convert to typescript and package type declarations | keyword: gotcha
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 037b25cfdcd18deea0e1c6c2e8d2548dbf32f7f3...bdc00ee32a2e26ed4d717fde128b4a51c29735a2 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | [oss-stable/react-dom/cjs/react-dom.production.js](https://react-builds.vercel.app…",,,,,,Anecdotal,comment,,,,,,,,2025-02-13,github/react-sizebot,https://github.com/facebook/react/pull/32240#issuecomment-2657648791,repo: facebook/react | issue: feat(eslint-plugin-react-hooks): convert to typescript and package type declarations | keyword: gotcha
"Now that we've knocked out and merged all of the prereqs, and I tested everything against the new test fixtures from https://github.com/facebook/react/pull/32396, this should be ready for review 😊 After this merges I'll update the v9 test fixture to use a ts-based config and add the fixture tests to CI for future validation.",,,,,,Anecdotal,comment,,,,,,,,2025-02-16,github/michaelfaith,https://github.com/facebook/react/pull/32240#issuecomment-2661563284,repo: facebook/react | issue: feat(eslint-plugin-react-hooks): convert to typescript and package type declarations | keyword: gotcha
"Add some way to specify indeterminate checkboxes There should be a way do do `<input type=""checkbox"" indeterminate={true} />` or similar – right now the attribute is ignored. Need to figure out how this interacts with `checked` though.",,,,,,Anecdotal,issue,,,,,,,,2014-07-08,github/sophiebits,https://github.com/facebook/react/issues/1798,repo: facebook/react | keyword: gotcha | state: closed
"https://mdn.mozillademos.org/en-US/docs/Web/CSS/:indeterminate$samples/Example?revision=601267 is fun to play with. Not impossible to support, but that's annoying.",,,,,,Anecdotal,comment,,,,,,,,2014-07-09,github/zpao,https://github.com/facebook/react/issues/1798#issuecomment-48432870,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"The correct combination of indeterminate and checked. (eg indeterminate=true and checked=true is impossible, indeterminate=true and checked=false is ok _edit_, even when you explicitly say checked=false)",,,,,,Anecdotal,comment,,,,,,,,2014-07-09,github/zpao,https://github.com/facebook/react/issues/1798#issuecomment-48439587,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"I have the same issue. Is there are any ability to set `indeterminate` property for the checkbox within React? Found the solution: ``` coffeescript componentDidMount: -> $('input', this.getDOMNode()).prop({ indeterminate: true, checked: false }) ``` or just a react version: ``` coffeescript componentDidMount: -> checkbox = this.refs.checkbox.getDOMNode() checkbox.indeterminate = true checkbox.checked = false ``` But what are the drawbacks, except the jquery/zepto are used in this example? Isn't…",,,,,,Anecdotal,comment,,,,,,,,2014-12-22,github/dmitry,https://github.com/facebook/react/issues/1798#issuecomment-67792315,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"The drawback is that your are mutating the DOM manually, which kinda sucks. You also want to make sure this happens in the right place for each subsequent render.",,,,,,Anecdotal,comment,,,,,,,,2014-12-22,github/zpao,https://github.com/facebook/react/issues/1798#issuecomment-67894671,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
> You also want to make sure this happens in the right place for each subsequent render. How to make sure? And as I understand `componentDidMount` happens after virtual DOM is placed in a real DOM. Between rendering to the real DOM and changing the input it may take some time. In some situations browser reflow can be done few times?,,,,,,Anecdotal,comment,,,,,,,,2014-12-23,github/dmitry,https://github.com/facebook/react/issues/1798#issuecomment-67935092,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"Well, on a re-render `componentDidMount` will not get called so you also need to do it in `componentDidUpdate` to make sure it happens there if needed.",,,,,,Anecdotal,comment,,,,,,,,2014-12-23,github/zpao,https://github.com/facebook/react/issues/1798#issuecomment-67990780,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"Pulling in my research from #2973 (and reviving this thread): > Chrome, Firefox, Safari, IE and other modern browsers support the notion of a checkbox in an indeterminate state which can be set or cleared using the `indeterminate` property of a checkbox input node. (It cannot be set using attributes.) > > This state is most commonly used at the top of a list or tree of checkboxes to indicate that some but not all of the checkboxes underneath are checked. > > This behavior seems reasonably well-…",,,,,,Anecdotal,comment,,,,,,,,2015-07-22,github/azich,https://github.com/facebook/react/issues/1798#issuecomment-123832307,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"Maybe we should do `checked` equal to `true`, `false`, or `'indeterminate'`? :\ I am clearly an API design genius.",,,,,,Anecdotal,comment,,,,,,,,2015-08-12,github/sophiebits,https://github.com/facebook/react/issues/1798#issuecomment-130122794,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"If you have one checkbox that's checked and one checkbox that's not checked, put both of them in an indeterminate state then click both of them, the two checkboxes will have opposite checked states in all of the browsers listed above. This means there are still two distinct bits of information, at least in the browser's implementation.",,,,,,Anecdotal,comment,,,,,,,,2015-08-12,github/azich,https://github.com/facebook/react/issues/1798#issuecomment-130129396,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"`checked` should be either true/false `indeterminate` should be either true/false if `indeterminate` === `true` and `checked` state is updated, `indeterminate` becomes false http://www.w3.org/TR/2014/WD-html51-20140617/forms.html#checkbox-state-(type=checkbox)",,,,,,Anecdotal,comment,,,,,,,,2015-11-03,github/jlas,https://github.com/facebook/react/issues/1798#issuecomment-153504027,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"> This means there are still two distinct bits of information, at least in the browser's implementation. That I think is critical to maintain in React's support, a checkbox can be indeterminate: checked, or indeterminate: unchecked. The frustrating problem though is that the `checked` change toggles resets `indeterminate` as @jlas notes. perhaps some variation of the controlled/uncontrolled pattern would work? ``` jsx <input type='checkbox' checked={checked} defaultIndeterminate={!checked} /> <…",,,,,,Anecdotal,comment,,,,,,,,2015-12-14,github/jquense,https://github.com/facebook/react/issues/1798#issuecomment-164447573,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
Can I just point out that there is no `indeterminate` HTML attribute? Developers have always had to set the status via JS. It seems against React's nature to patch something that doesn't actually exist in declarative DOM land?,,,,,,Anecdotal,comment,,,,,,,,2015-12-14,github/quantizor,https://github.com/facebook/react/issues/1798#issuecomment-164467572,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"> It seems against React's nature to patch something that doesn't actually exist in declarative DOM land? @yaycmyk Correct. IMHO it's arguable, but server-rendering in a way necessitates it and seems like a hard problem to otherwise decide where to draw the line. It's really weird that there isn't an attribute for it. Interesting.",,,,,,Anecdotal,comment,,,,,,,,2015-12-14,github/syranide,https://github.com/facebook/react/issues/1798#issuecomment-164486612,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"React adds declarative layers over a lot of imperative DOM API's, which is to say just b/c there is an HTML attribute doesn't actually mean its a declarative API, that and the prop's are sugar over the js API's anyway. Agree that its a bit weird to add in an ""attribute"", but that's the main React API surface for interacting with DOM objects, so if possible i'd be nice to have. It does fall into the ""a bit outside the norm"" for react but not very far I think. CC also the discussions about adding…",,,,,,Anecdotal,comment,,,,,,,,2015-12-14,github/jquense,https://github.com/facebook/react/issues/1798#issuecomment-164487166,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"@spicyj Huh? Yes they add additional run-time functionality (i.e. controlled), but the initial state of them all is entirely captured by attributes right? Or am I missing something.",,,,,,Anecdotal,comment,,,,,,,,2015-12-14,github/syranide,https://github.com/facebook/react/issues/1798#issuecomment-164557447,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"It is a definitely a good idea to add `indeterminate` property. Why hasn't it been solved? I currently use: ``` jsx if (shoudNotBeChecked) { this.refs.checkbox.indeterminate = false; this.refs.checkbox.checked = false; } else if (shoudBeChecked) { this.refs.checkbox.indeterminate = false; this.refs.checkbox.checked = true; } else { this.refs.checkbox.indeterminate = true; } ... render() { return ( <input type=""checkbox"" name=""Check"" ref=""checkbox"" onChange={this.props.onCheck} />, ); } ```",,,,,,Anecdotal,comment,,,,,,,,2016-06-24,github/cema-sp,https://github.com/facebook/react/issues/1798#issuecomment-228317183,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"@cema-sp My recommendation in the mean time is to just create a CheckboxInput component that does that internally the way you want it. If React ends up implementing this then the implementation will end up being identical anyway, but part of the native input wrapper.",,,,,,Anecdotal,comment,,,,,,,,2016-06-24,github/syranide,https://github.com/facebook/react/issues/1798#issuecomment-228318018,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"FWIW, I discovered a clean way to do this as follows: ``` js <input type=""checkbox"" ref={elem => elem && (elem.indeterminate = isIndeterminate)} /> ``` http://codepen.io/anon/pen/LRoLXZ?editors=0010",,,,,,Anecdotal,comment,,,,,,,,2016-10-28,github/kolodny,https://github.com/facebook/react/issues/1798#issuecomment-256816975,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
@kolodny I wouldn't really call that clean. Making a HOC would be a better approach. You're hijacking refs to make a side effect.,,,,,,Anecdotal,comment,,,,,,,,2016-10-28,github/quantizor,https://github.com/facebook/react/issues/1798#issuecomment-256822181,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"I'm trying to create a HOC but it doesn't seem to work unless I add a 0-ms timeout. Is this expected? ```js import React, {PropTypes} from 'react'; export default class Checkbox extends React.Component { static propTypes = { indeterminate: PropTypes.bool, checked: PropTypes.bool, }; componentDidMount() { this.el.indeterminate = this.props.indeterminate; this.el.checked = this.props.checked; // fix for IE8 } componentDidUpdate(prevProps, prevState) { if(prevProps.indeterminate !== this.props.ind…",,,,,,Anecdotal,comment,,,,,,,,2016-12-29,github/mnpenner,https://github.com/facebook/react/issues/1798#issuecomment-269710884,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"It seems like we’re not doing it because it’s impossible to support with server rendering, and we’re currently only supporting a subset of attributes/properties that are compatible both with client and server rendering. If you need it, it is trivial to implement with your own component: https://codepen.io/gaearon/pen/aLyEmr?editors=0010 ```js class Checkbox extends React.Component { componentDidMount() { this.el.indeterminate = this.props.indeterminate; } componentDidUpdate(prevProps) { if (pre…",,,,,,Anecdotal,comment,,,,,,,,2017-10-01,github/gaearon,https://github.com/facebook/react/issues/1798#issuecomment-333414857,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"Is this a fine approach, compared the solution @gaearon suggested? ```js export default function Checkbox(props) { const setCheckboxRef = checkbox => { if (checkbox) { checkbox.indeterminate = props.isIndeterminate; } }; return ( <input type=""checkbox"" ref={setCheckboxRef} /> ); } Checkbox.propTypes = { isIndeterminate: PropTypes.bool, }; Checkbox.defaultProps = { isIndeterminate: false }; ```",,,,,,Anecdotal,comment,,,,,,,,2018-08-29,github/willem-aart,https://github.com/facebook/react/issues/1798#issuecomment-417047897,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
Since there is no indeterminate attribute in HTML it’s not possible to make an indeterminate checkbox that appears correctly before any JS is run. However with RSC you can still make a client component that sets the indeterminate property upon mount and render it from a server component.,,,,,,Anecdotal,comment,,,,,,,,2023-04-03,github/sophiebits,https://github.com/facebook/react/issues/1798#issuecomment-1493692944,repo: facebook/react | issue: Add some way to specify indeterminate checkboxes | keyword: gotcha
"[Compiler Bug]: Compiler incorrectly unwraps `useMemo()` ### What kind of issue is this? - [X] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repro https://playground.react.…",,,,,,Anecdotal,issue,,,,,,,,2025-01-12,github/MrFlashAccount,https://github.com/facebook/react/issues/32048,repo: facebook/react | keyword: gotcha | state: closed
Similar: https://playground.react.dev/#N4Igzg9grgTgxgUxALhAMygOzgFwJYSYAEAkjggLYAUADjBDWAJRHAA6xRchYOrX0THwC+RALxE6DMAG4OHIgMy8iAE3FEoYBAFlKEKlRZiAfKwWKiAGwR91E7lhwA6VRcXdlfTBADuGmgQYNAgYCgBDbARnH18jOU4PHggbZysIAHMqNhASIgzbIhgEOHCrOCgrcPJVAEIcpgT3Il8ACzwbIlogkLDIxBi-IyIAWiJYogAeIgA2FnZEy3UAagkARmbheUXinFhiN05hABoiAG1HIVcAXUbtxV39rubJ1TwANxNmxWAAKQBlADyADlnLwYHhMBk8GgAJ5US44JgnVgAkFgnAQqEw+GqZEvAD0b0+FjumC2mBAwiAA,,,,,,Anecdotal,comment,,,,,,,,2025-01-12,github/MrFlashAccount,https://github.com/facebook/react/issues/32048#issuecomment-2585795287,repo: facebook/react | issue: [Compiler Bug]: Compiler incorrectly unwraps `useMemo()` | keyword: gotcha
"Thanks for posting. Are these the original examples? I ask because as written, the compiler is correctly removing the memoization - the useMemo callback in each case is not allocating any new values, so the compiler removes the existing memoization and then memoizes the JSON.stringify() calls. But maybe this is distilled from an original example where there was some value being created in the useMemo block? Can you double check?",,,,,,Anecdotal,comment,,,,,,,,2025-01-12,github/josephsavona,https://github.com/facebook/react/issues/32048#issuecomment-2585948494,repo: facebook/react | issue: [Compiler Bug]: Compiler incorrectly unwraps `useMemo()` | keyword: gotcha
"Could you please clarify what you mean by “original” examples? These are not production code and were created solely for testing purposes. Here’s a link to Codesandbox where I initially discovered the issue: https://codesandbox.io/p/devbox/modern-architecture-forked-hl6gly?file=/src/App.tsx:44,1-45,1&workspaceId=ws_FJECc2QX6MEMWWYxSwGxqp. Please note that I had to add “use no memo” to prevent the bug. In the Codesandbox I was experimenting with “useMemo” and transitions, I added the https://cod…",,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/MrFlashAccount,https://github.com/facebook/react/issues/32048#issuecomment-2586455879,repo: facebook/react | issue: [Compiler Bug]: Compiler incorrectly unwraps `useMemo()` | keyword: gotcha
"> the compiler removes the existing memoization and then memoizes the JSON.stringify() calls. Although this is a correct behavior, the issue arises from the `while` loop condition: `while (performance.now() - now < 6) {}`. _With_ compiler js executes this loop unconditionally, whereas in the original code, it executes only when `d` changes.",,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/MrFlashAccount,https://github.com/facebook/react/issues/32048#issuecomment-2586462768,repo: facebook/react | issue: [Compiler Bug]: Compiler incorrectly unwraps `useMemo()` | keyword: gotcha
"Building new android for 3 days spamming, example: `core.build().then(()=>+1);` Classes conflict each other, to fix verify you can keep a message inside your app and update it as a state by remote like a router. example API: ``` app.addstate(""hello""); app.showstate(); //hello app.updatestate(""hello"", ""new state""); app.showstate(); //new state ```",,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/BrightMontain,https://github.com/facebook/react/issues/32048#issuecomment-2587501479,repo: facebook/react | issue: [Compiler Bug]: Compiler incorrectly unwraps `useMemo()` | keyword: gotcha
"Gotcha, thanks for confirming. Note that React components are required to be pure functions. What these memo blocks are doing is (ab)using useMemo as a way to conditionally run side effects - the timing and logging code - not for the intended purpose of memoizing the result of some computation. Since the value returned by the memo is an input to the memo block, these memo blocks are really only for side effects, which isn’t allowed. Since it’s just performance.now() and console.log() we don’t r…",,,,,,Anecdotal,comment,,,,,,,,2025-01-13,github/josephsavona,https://github.com/facebook/react/issues/32048#issuecomment-2587624438,repo: facebook/react | issue: [Compiler Bug]: Compiler incorrectly unwraps `useMemo()` | keyword: gotcha
"created a vscode workspace file for the repo ### Summary Similarly to what has been done on the `react-native` repo in https://github.com/facebook/react-native/pull/43851, this PR adds a `react.code-workspace` workspace file when using VSCode. This disables the built-in TypeScript Language Service for `.js`, `.ts`, and `.json` files, recommends extensions, enables `formatOnSave`, excludes certain files in search, and configures Flow language support. ### Motivation This is a DevX benefit for **…",,,,,,Anecdotal,issue,,,,,,,,2024-06-10,github/vzaidman,https://github.com/facebook/react/pull/29830,repo: facebook/react | keyword: gotcha | state: closed
[vc]: #rY2L3zy3CUOzOMRNU4iVhVhj3iUa3b30Ra85aHe7QiE=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJyZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6InJlYWN0LWNvbXBpbGVyLXBsYXlncm91bmQtZ2l0LXZzY29kZS13b3Jrc3BhY2UtZmJvcGVuc291cmNlLnZlcmNlbC5hcHAifSwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL2Zib3BlbnNvdXJjZS9yZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kL0dwcVE3ejluckZ5R3NOcFFpRkFhdURWOHFuTXciLCJwcmV2aWV3VXJsIjo…,,,,,,Anecdotal,comment,,,,,,,,2024-06-10,github/vercel[bot],https://github.com/facebook/react/pull/29830#issuecomment-2158559156,repo: facebook/react | issue: created a vscode workspace file for the repo | keyword: gotcha
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 814a4186459eb79ed9bc6f22de4a4f75ff77558c...76dc6e80986f5ecd6a3d4a977351e52ea5dd16ce ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | [oss-stable/react-dom/cjs/react-dom.production.js](https://react-builds.vercel.app…",,,,,,Anecdotal,comment,,,,,,,,2024-06-10,github/react-sizebot,https://github.com/facebook/react/pull/29830#issuecomment-2158574711,repo: facebook/react | issue: created a vscode workspace file for the repo | keyword: gotcha
Oftentimes repos commit a `.vscode/settings.json` but that's annoying if you want to customize your folder settings until https://github.com/microsoft/vscode/issues/15909 lands. So I usually prefer if repos add a `.vscode/settings.example.json` with instructions to `cp .vscode/settings.example.json .vscode/settings.json` after clone. DT does that: https://github.com/DEfinitelyTyped/DefinitelyTyped/#are-files-formatted-automatically If users have their own workspace config they couldn't benefit …,,,,,,Anecdotal,comment,,,,,,,,2024-06-11,github/eps1lon,https://github.com/facebook/react/pull/29830#issuecomment-2160588932,repo: facebook/react | issue: created a vscode workspace file for the repo | keyword: gotcha
"@eps1lon This is another reason I like the `<repo>.code-workspace` pattern. A user-defined `.vscode/` directory (which we should add to `.gitignore`) allows exactly this kind of override, for merged per-user customisations over these defaults. > **Image**: The font size preference of `16` is applied by `.vscode/settings.json`, taking precedence over the workspace file. <img width=""1502"" alt=""image"" src=""https://github.com/facebook/react/assets/2547783/bf6e68e9-1053-435d-85fc-4df9e0851b36""> I'd …",,,,,,Anecdotal,comment,,,,,,,,2024-06-11,github/huntie,https://github.com/facebook/react/pull/29830#issuecomment-2160817445,repo: facebook/react | issue: created a vscode workspace file for the repo | keyword: gotcha
"@eps1lon I see the benefits of using the `.vscode/settings.example.json` approach, however even with a `postinstall` I don't like how there's no nice way to update the settings automatically for users. I think going with the workspace approach would be a bit better for now until https://github.com/microsoft/vscode/issues/15909 lands.",,,,,,Anecdotal,comment,,,,,,,,2024-06-11,github/vzaidman,https://github.com/facebook/react/pull/29830#issuecomment-2160846194,repo: facebook/react | issue: created a vscode workspace file for the repo | keyword: gotcha
"@poteto > Would still be good to limit the workspace to exclude the compiler directory, but I guess that doesn't need to block this PR fixed- the compiler directory is now verified just fine!",,,,,,Anecdotal,comment,,,,,,,,2024-06-13,github/vzaidman,https://github.com/facebook/react/pull/29830#issuecomment-2165707458,repo: facebook/react | issue: created a vscode workspace file for the repo | keyword: gotcha
"[Compiler Bug]: Discriminated unions with undefined cause compiler to blow up ### What kind of issue is this? - [X] React Compiler core (the JS output is incorrect, or your app works incorrectly after optimization) - [ ] babel-plugin-react-compiler (build issue installing or using the Babel plugin) - [ ] eslint-plugin-react-compiler (build issue installing or using the eslint plugin) - [ ] react-compiler-healthcheck (build issue installing or using the healthcheck script) ### Link to repro http…",,,,,,Anecdotal,issue,,,,,,,,2024-11-05,github/NickBlow,https://github.com/facebook/react/issues/31420,repo: facebook/react | keyword: gotcha | state: closed
This looks like the same issue as https://github.com/facebook/react/issues/31402 . Feel free to close as duplicate if it's the same root cause.,,,,,,Anecdotal,comment,,,,,,,,2024-11-05,github/NickBlow,https://github.com/facebook/react/issues/31420#issuecomment-2457443332,repo: facebook/react | issue: [Compiler Bug]: Discriminated unions with undefined cause compiler to blow up | keyword: gotcha
"Yup, same issue and i've confirmed that our in-progress fix addresses this case. I'll close as a duplicate but thank you for reporting!",,,,,,Anecdotal,comment,,,,,,,,2024-11-05,github/josephsavona,https://github.com/facebook/react/issues/31420#issuecomment-2457650453,repo: facebook/react | issue: [Compiler Bug]: Discriminated unions with undefined cause compiler to blow up | keyword: gotcha
Pointer Event's aren't registering touch on iOS while using Safari and Chrome **Do you want to request a *feature* or report a *bug*?** I believe it's a bug. **What is the current behavior?** `onPointerDown` isn't registering when using Chrome and Safari on mobile. When viewing it as mobile within chrome's dev tools it works fine and will log `touch` for `event.pointerType` but on mobile it's unresponsive. * [Codesandbox - logs out `pointerType`](https://codesandbox.io/s/8xr91vj4xl) * [http://v…,,,,,,Anecdotal,issue,,,,,,,,2018-05-24,github/tgrecojs,https://github.com/facebook/react/issues/12901,repo: facebook/react | keyword: gotcha | state: closed
"We deliberately decided against polyfilling pointer events in unsupported browsers (you can read up on that in the [16.4 release blog post](https://reactjs.org/blog/2018/05/23/react-v-16-4.html#pointer-events)) so this is unfortunately the expected behavior. Chrome on iOS is also using the Safari rendering engine (WebKit) behind the scenes thus you see the same behavior there but not in the Google Chrome browser on macOS. One solution to this is to use a third party polyfill, for example [PEP](…",,,,,,Anecdotal,comment,,,,,,,,2018-05-25,github/philipp-spiess,https://github.com/facebook/react/issues/12901#issuecomment-392180459,repo: facebook/react | issue: Pointer Event's aren't registering touch on iOS while using Safari and Chrome  | keyword: gotcha
"""We have opted not to include such a polyfill in React DOM, to avoid an increase in bundle size."" Why bother including any features then? You even say the behavior as you have defined it is unfortunate. Would it increase the bundle size by a huge amount or something? I'm not saying there is no valid reason to not include it in the bundle, but the reason of not wanting to increase bundle size isn't very transparent, as this reason could be applied to literally any existing feature of React.",,,,,,Anecdotal,comment,,,,,,,,2018-08-17,github/esr360,https://github.com/facebook/react/issues/12901#issuecomment-413725846,repo: facebook/react | issue: Pointer Event's aren't registering touch on iOS while using Safari and Chrome  | keyword: gotcha
"See my comment in https://github.com/facebook/react/pull/12507#issuecomment-382794779. We have planned *core* features on the roadmap that we consider important to add to React. Given the community’s recent complaints about the growing bundle size, we have to be more strict about prioritising what gets in. Unfortunately it means that features that aren’t directly on our roadmap but require a lot of extra code will have a tougher chance of getting in. >Would it increase the bundle size by a huge…",,,,,,Anecdotal,comment,,,,,,,,2018-08-17,github/gaearon,https://github.com/facebook/react/issues/12901#issuecomment-413844694,repo: facebook/react | issue: Pointer Event's aren't registering touch on iOS while using Safari and Chrome  | keyword: gotcha
> FYI this is under development by Safari/Apple: https://webkit.org/status/#?search=pointer%20events Status: Development Date: September 2019,,,,,,Anecdotal,comment,,,,,,,,2019-09-20,github/aloenobilis,https://github.com/facebook/react/issues/12901#issuecomment-533670150,repo: facebook/react | issue: Pointer Event's aren't registering touch on iOS while using Safari and Chrome  | keyword: gotcha
`PointerEvent` is now supported in Safari iOS v13.2 (+ Chrome iOS) according to caniuse https://caniuse.com/#feat=pointer,,,,,,Anecdotal,comment,,,,,,,,2019-12-17,github/briancodes,https://github.com/facebook/react/issues/12901#issuecomment-566432692,repo: facebook/react | issue: Pointer Event's aren't registering touch on iOS while using Safari and Chrome  | keyword: gotcha
"> But `pointerup` is [not supported](https://caniuse.com/#search=pointerup)? It is, that website is wrong. Test it here: https://codepen.io/appsforartists/pen/NRdLrv",,,,,,Anecdotal,comment,,,,,,,,2020-12-17,github/marcusx2,https://github.com/facebook/react/issues/12901#issuecomment-747526333,repo: facebook/react | issue: Pointer Event's aren't registering touch on iOS while using Safari and Chrome  | keyword: gotcha
"@iamdustan any chance we could have this looked at now that Safari does support pointer events? It seems like on Safari Mobile, the events aren't firing correctly in React.",,,,,,Anecdotal,comment,,,,,,,,2024-10-02,github/lifeiscontent,https://github.com/facebook/react/issues/12901#issuecomment-2387362357,repo: facebook/react | issue: Pointer Event's aren't registering touch on iOS while using Safari and Chrome  | keyword: gotcha
"[compiler][rewrite] PropagateScopeDeps hir rewrite Stack from [ghstack](https://github.com/ezyang/ghstack) (oldest at bottom): * __->__ #30894 * #30949 * #30948 Resubmission of #30079 -- core logic unchanged, but needed to rebase past #30573 ### Quick background #### Temporaries The compiler currently treats temporaries and named variables (e.g. `x`) differently in this pass. - named variables may be reassigned (in fact, since we're running after LeaveSSA, a single named identifier's Identifier…",,,,,,Anecdotal,issue,,,,,,,,2024-09-06,github/mofeiZ,https://github.com/facebook/react/pull/30894,repo: facebook/react | keyword: gotcha | state: closed
[vc]: #mX3QA9BwTRmEjc1m8CnYye7VJ2fpjMkKwp2aqt3fldk=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJyZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL2Zib3BlbnNvdXJjZS9yZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kLzhpelJ3VzRVQ3BUYkY1ZUo2QWtIZ01jNXhQVVEiLCJwcmV2aWV3VXJsIjoicmVhY3QtY29tcGlsZXItcGxheWdyb3VuZC1naXQtZ2gtbW9mZWl6MThoZWFkLWZib3BlbnNvdXJjZS52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IkRFUExPWUVEIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJ…,,,,,,Anecdotal,comment,,,,,,,,2024-09-06,github/vercel[bot],https://github.com/facebook/react/pull/30894#issuecomment-2332928315,repo: facebook/react | issue: [compiler][rewrite] PropagateScopeDeps hir rewrite | keyword: gotcha
"> However, it may exacerbate [this function-expr hoisting bug](https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-hoisting-functionexpr.ts). Link is dead",,,,,,Anecdotal,comment,,,,,,,,2024-09-07,github/mvitousek,https://github.com/facebook/react/pull/30894#issuecomment-2334981031,repo: facebook/react | issue: [compiler][rewrite] PropagateScopeDeps hir rewrite | keyword: gotcha
"> > However, it may exacerbate [this function-expr hoisting bug](https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/bug-invalid-hoisting-functionexpr.ts). > > Link is dead Updated link (`ts` -> `tsx` 🤦‍♀️)",,,,,,Anecdotal,comment,,,,,,,,2024-09-11,github/mofeiZ,https://github.com/facebook/react/pull/30894#issuecomment-2344881506,repo: facebook/react | issue: [compiler][rewrite] PropagateScopeDeps hir rewrite | keyword: gotcha
"Updated per feedback from @mvitousek and @josephsavona. I amended this existing one to keep the blame history clean, but please let me know if you would prefer that I make separate feedback PRs in the future. Double checked that these changes were no-ops by syncing internally and validating compilation output of 100+k files stayed the same. Changes: - rebased on #30949 which forked test fixtures changed by this PR (previously, enablePropagateScopeDepsInHIR was enabled by default for all fixture…",,,,,,Anecdotal,comment,,,,,,,,2024-09-11,github/mofeiZ,https://github.com/facebook/react/pull/30894#issuecomment-2344952316,repo: facebook/react | issue: [compiler][rewrite] PropagateScopeDeps hir rewrite | keyword: gotcha
"(abandoned) [compiler][rewrite] PropagateScopeDeps hir rewrite Stack from [ghstack](https://github.com/ezyang/ghstack) (oldest at bottom): * __->__ #30079 ### Quick background: #### Rvalues / temporaries: In the compiler, unnamed temporaries that represents the evaluation of an expression In the code snippet below, $1, $2, $3, and $4 are temporaries. ```js // input function Component({ bar} ) { const x = {a: foo(bar), b: {}}; } // gets lowered to [1] $2 = LoadGlobal(global) foo [2] $3 = LoadLoc…",,,,,,Anecdotal,issue,,,,,,,,2024-06-24,github/mofeiZ,https://github.com/facebook/react/pull/30079,repo: facebook/react | keyword: gotcha | state: closed
[vc]: #R4hwx0buG6Gd5QPJi6gYvlf2hfL4pUdhyT2/uLb45CY=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJyZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kIiwiaW5zcGVjdG9yVXJsIjoiaHR0cHM6Ly92ZXJjZWwuY29tL2Zib3BlbnNvdXJjZS9yZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kLzhaRFZrUEd0UFVnM3UzcHBoQTd5VzYydDdOdzkiLCJwcmV2aWV3VXJsIjoicmVhY3QtY29tcGlsZXItcGxheWdyb3VuZC1naXQtZ2gtbW9mZWl6OGhlYWQtZmJvcGVuc291cmNlLnZlcmNlbC5hcHAiLCJuZXh0Q29tbWl0U3RhdHVzIjoiREVQTE9ZRUQiLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmV…,,,,,,Anecdotal,comment,,,,,,,,2024-06-24,github/vercel[bot],https://github.com/facebook/react/pull/30079#issuecomment-2187590577,repo: facebook/react | issue: (abandoned) [compiler][rewrite] PropagateScopeDeps hir rewrite | keyword: gotcha
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 6aea169480286ef9c037c6efefaacecac0e5d7c0...e0acdd81edc17f54ce436221ff2a5b9745a7088c ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | [oss-stable/react-dom/cjs/react-dom.production.js](https://react-builds.vercel.app…",,,,,,Anecdotal,comment,,,,,,,,2024-06-24,github/react-sizebot,https://github.com/facebook/react/pull/30079#issuecomment-2187602906,repo: facebook/react | issue: (abandoned) [compiler][rewrite] PropagateScopeDeps hir rewrite | keyword: gotcha
"fix(flight): improve `stack` type check to avoid throwing on `undefined` ## Summary Recently, [an issue](https://github.com/vercel/next.js/issues/66137) on the Next.js repo arose when importing SVGs in a server component using the `svgr` Webpack loader. I tracked it down to [this release](https://github.com/vercel/next.js/releases/tag/v14.3.0-canary.77) and when I debugged it using the debugger in VS Code I found [this line](https://github.com/facebook/react/blob/83d538e0d04aac2a32d335e6b396327…",,,,,,Anecdotal,issue,,,,,,,,2024-06-20,github/kevva,https://github.com/facebook/react/pull/29990,repo: facebook/react | keyword: gotcha | state: closed
[vc]: #QqZ7MRp7lNBzP4kh/TIG9xSozDXkkkW7nVp7EPbM1UI=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJyZWFjdC1jb21waWxlci1wbGF5Z3JvdW5kIiwicm9vdERpcmVjdG9yeSI6ImNvbXBpbGVyL2FwcHMvcGxheWdyb3VuZCIsImluc3BlY3RvclVybCI6Imh0dHBzOi8vdmVyY2VsLmNvbS9mYm9wZW5zb3VyY2UvcmVhY3QtY29tcGlsZXItcGxheWdyb3VuZC9FTkZwNFJDcFV4MVNaNDd6NmFYWGdQZFJxaFhjIiwicHJldmlld1VybCI6InJlYWN0LWNvbXBpbGVyLXBsYXlncm91bmQtZ2l0LWZvcmsta2V2dmEta20tNDM3NWNhLWZib3BlbnNvdXJjZS52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR…,,,,,,Anecdotal,comment,,,,,,,,2024-06-20,github/vercel[bot],https://github.com/facebook/react/pull/29990#issuecomment-2180705788,repo: facebook/react | issue: fix(flight): improve `stack` type check to avoid throwing on `undefined` | keyword: gotcha
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: b15c8492ca227abff2b1c921dd06e54d421fc415...e6657b2153f249a1f9fe3001fee0c5033b0df275 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | [oss-stable/react-dom/cjs/react-dom.production.js](https://react-builds.vercel.app…",,,,,,Anecdotal,comment,,,,,,,,2024-06-20,github/react-sizebot,https://github.com/facebook/react/pull/29990#issuecomment-2180725037,repo: facebook/react | issue: fix(flight): improve `stack` type check to avoid throwing on `undefined` | keyword: gotcha
We are intentionally not permissive to find bugs. My guess would be that this was fixed by https://github.com/facebook/react/pull/29762 It could also be that maybe SVGR embeds an old copy of React for JSX or some misconfigured environment but I think most likely this was already fixed above and a newer version of Next.js would have it fixed.,,,,,,Anecdotal,comment,,,,,,,,2024-06-21,github/sebmarkbage,https://github.com/facebook/react/pull/29990#issuecomment-2182511861,repo: facebook/react | issue: fix(flight): improve `stack` type check to avoid throwing on `undefined` | keyword: gotcha
"Gotcha, thanks for the link to that PR. I've been testing to see if this is fixed in every new canary version of Next.js but so far it's still not working. And by the looks of things, that PR should already have landed in Next.js. I don't see anything weird going on [in SVGR](https://github.com/gregberge/svgr/blob/main/packages/plugin-jsx/src/index.ts) either.",,,,,,Anecdotal,comment,,,,,,,,2024-06-21,github/kevva,https://github.com/facebook/react/pull/29990#issuecomment-2182619991,repo: facebook/react | issue: fix(flight): improve `stack` type check to avoid throwing on `undefined` | keyword: gotcha
"[compiler] Combine class component and function component or only class component Hi, I am currently in the process of upgrading to React compiler but when using it with class component or combining class component and function component the result is not as expected. Repo: https://github.com/w7en/next-react-compiler",,,,,,Anecdotal,issue,,,,,,,,2024-06-07,github/w7en,https://github.com/facebook/react/issues/29792,repo: facebook/react | keyword: gotcha | state: closed
"Can you say more about what behavior you expected vs what you observed? Also note that class components are not, and will not be, supported by the compiler. It will just leave them alone.",,,,,,Anecdotal,comment,,,,,,,,2024-06-07,github/josephsavona,https://github.com/facebook/react/issues/29792#issuecomment-2154997052,repo: facebook/react | issue: [compiler] Combine class component and function component or only class component | keyword: gotcha
"Hi @josephsavona as you said above, `react compiler` does not support `class component`. I understand why my code is not as expected. I still need `memo` code for `class component`. By the way, since my project is so old and it contains both `class component` and `function component`, I am trying `react compiler` solution to leverage old code that has not been `memo` to improve the performance of the application. Thank you very much. Can I close this issue?",,,,,,Anecdotal,comment,,,,,,,,2024-06-08,github/w7en,https://github.com/facebook/react/issues/29792#issuecomment-2155755172,repo: facebook/react | issue: [compiler] Combine class component and function component or only class component | keyword: gotcha
"DevTools: Improve browser extension iframe support <!-- Please provide a clear and concise description of what the bug is. Include screenshots if needed. Please test using the latest version of the relevant React packages to make sure your issue has not already been fixed. --> When react is inside an iframe, chrome extension for react devtools fails to detect react. This is because the extension sets `__REACT_DEVTOOLS_GLOBAL_HOOK__` only on the top level window. Apparently it's possible to have…",,,,,,Anecdotal,issue,,,,,,,,2020-05-18,github/dmail,https://github.com/facebook/react/issues/18945,repo: facebook/react | keyword: gotcha | state: closed
"The frame limitation is mentioned in the docs, FWIW: https://github.com/facebook/react/tree/master/packages/react-devtools It's not a bug, just a known limitation. We currently suggest using the standalone version (as linked above) or (if you also control the iframe) passing the hook through from the parent: https://github.com/facebook/react/blob/d897c35ecfb7471b55e41933fd4d993b98dbf600/fixtures/devtools/regression/14.9.html#L9-L11 I don't think that adding the Manifest setting you mentioned wo…",,,,,,Anecdotal,comment,,,,,,,,2020-05-18,github/bvaughn,https://github.com/facebook/react/issues/18945#issuecomment-630421386,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
"Thank you very much for your answer and rewording the issue title, it's more accurate. In my case the iframe runs in an other domain so window.parent would not be accessible. I am ready to try to implement it. I'll take a look tomorrow. If you have any more info to share that would greatly help me when I'll start working on it. Thanks again, I will keep you informed and I hope I will be able to make it work :)",,,,,,Anecdotal,comment,,,,,,,,2020-05-18,github/dmail,https://github.com/facebook/react/issues/18945#issuecomment-630428779,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
Great! Keep me posted on your progress :smile: Here's instructions to get you started: https://github.com/facebook/react/tree/master/packages/react-devtools-extensions#build-steps,,,,,,Anecdotal,comment,,,,,,,,2020-05-18,github/bvaughn,https://github.com/facebook/react/issues/18945#issuecomment-630429912,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
I have opened a draft pull request. For now I have only tested to add all_frames: true on chrome extension manifest.json and it looks like it's working -> react is being detected inside a sandboxed iframe 🎉 .,,,,,,Anecdotal,comment,,,,,,,,2020-05-19,github/dmail,https://github.com/facebook/react/issues/18945#issuecomment-630667574,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
Working on edge 🎉 About firefox however I have some trouble. I have changed nothing yet concerning firefox and after doing 1. yarn build:firefox 2. yarn run test:firefox In the firefox browser that is launched the extension does not detect react on `reactjs.org`. ![firefoxko](https://user-images.githubusercontent.com/443639/82307985-6fb39780-99c1-11ea-9e0c-f9e3e07969ea.png) In Firefox console I see this error (and many more with the same error code): ![image](https://user-images.githubuserconte…,,,,,,Anecdotal,comment,,,,,,,,2020-05-19,github/dmail,https://github.com/facebook/react/issues/18945#issuecomment-630695170,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
About firefox I got workarounds depending what happens: (a) Firefox addon is shown but fails to detect react -> refresh the page and it will work normally (b) Firefox addon does not even show up -> go to Firefox settings -> disable react devtools addon and enable it right away -> go back to `reactjs.org` and it will work normally As I said this happens already on `master` branch without any change on my side. Now that I can test firefox extension locally I move on and try to add `all_frame: tru…,,,,,,Anecdotal,comment,,,,,,,,2020-05-19,github/dmail,https://github.com/facebook/react/issues/18945#issuecomment-630790934,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
"What happened to this issue? Is it available for me to try out? @dmail , are you planning on working on it or I may try to figure this out?",,,,,,Anecdotal,comment,,,,,,,,2020-06-25,github/ghost,https://github.com/facebook/react/issues/18945#issuecomment-649269640,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
"Hello, the pull request is on hold because I don't know what to tackle first. On my side I was waiting for advice to restart working on it. Go ahead, I'm still interested on the subject so I'll keep an eye on it (and may still help to the extent of my abilities).",,,,,,Anecdotal,comment,,,,,,,,2020-06-25,github/dmail,https://github.com/facebook/react/issues/18945#issuecomment-649284683,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
"For the record, I was able to make this work with a Next.js app that is providing the iframe, with these changes: **$NEXT_PROJECT/public/js/enableReactDevtoolsIframe.js** ```js // The React DevTools do not normally look inside of iframes, just the outer window. // We can enable inspection of React components in an iframe by copying this global variable: // https://github.com/facebook/react/issues/18945#issuecomment-630421386 // This code must be injected before React runs, so we add it as a sep…",,,,,,Anecdotal,comment,,,,,,,,2020-07-02,github/markerikson,https://github.com/facebook/react/issues/18945#issuecomment-653218453,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
FYI: We've been using the `all_frames: true` option in `manifest.json` for a while now over with preact-devtools and it works like a charm. The only thing one needs to be careful about is to inject the highlighting code into each iframe too! Otherwise the position will be off.,,,,,,Anecdotal,comment,,,,,,,,2020-07-03,github/marvinhagemeister,https://github.com/facebook/react/issues/18945#issuecomment-653485949,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
@marvinhagemeister Do you remember doing anything additional (beyond just adding `all_frames: true` option in `manifest.json`) to get it to work? I haven't taken the time to dig into this yet but I did test out the linked PR (#18952) and it didn't appear to be working. @shakhbulatgaz did you ever end up digging into this?,,,,,,Anecdotal,comment,,,,,,,,2020-07-06,github/bvaughn,https://github.com/facebook/react/issues/18945#issuecomment-654270839,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
"@bvaughn Not much really, only had to ensure that each adapter that's injected into the client doesn't traverse into other iframes. The linked PR looks correct to me, so I'm guessing something isn't ok with the connection logic. Maybe it's the same timing issue we've been talking about a while back that's more of a regression in Chrome? For reference: The PR that added support for iframes for `preact-devtools`: https://github.com/preactjs/preact-devtools/pull/209/files",,,,,,Anecdotal,comment,,,,,,,,2020-07-06,github/marvinhagemeister,https://github.com/facebook/react/issues/18945#issuecomment-654327556,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
Gotcha! Thanks for elaborating :smile: > Maybe it's the same timing issue we've been talking about a while back that's more of a regression in Chrome? I think the fix for this issue has made its way into stable (or at least I'm no longer seeing the issue myself).,,,,,,Anecdotal,comment,,,,,,,,2020-07-06,github/bvaughn,https://github.com/facebook/react/issues/18945#issuecomment-654340288,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
@bvaughn Can you explain to me the current scenario and what needs to be done? Was reading through the thread but couldn't deduce much. This is my first issue to pick from react repo.,,,,,,Anecdotal,comment,,,,,,,,2020-07-06,github/anrao91,https://github.com/facebook/react/issues/18945#issuecomment-654380848,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
"@anrao91 Unfortunately, no. Not beyond what's been discussed on this thread and on the linked PR (#18952).",,,,,,Anecdotal,comment,,,,,,,,2020-07-06,github/bvaughn,https://github.com/facebook/react/issues/18945#issuecomment-654383821,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
"@bvaughn By adding the below code, doesn't enable react to inspect inside an iframe. I tried the [regression test](https://github.com/facebook/react/blob/d897c35ecfb7471b55e41933fd4d993b98dbf600/fixtures/devtools/regression/server.js), didn't work there either. ```javascript __REACT_DEVTOOLS_GLOBAL_HOOK__ = parent.__REACT_DEVTOOLS_GLOBAL_HOOK__; ``` I was able to make this work by copying the values of parents `__REACT_DEVTOOLS_GLOBAL_HOOK__` one by one, instead of copying it directly. (Maybe t…",,,,,,Anecdotal,comment,,,,,,,,2020-07-13,github/Reflex-Gravity,https://github.com/facebook/react/issues/18945#issuecomment-657880331,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
@sarathps93 You're welcome to work on this. Please check out the work and discussion on #19345 before starting though!,,,,,,Anecdotal,comment,,,,,,,,2020-08-31,github/bvaughn,https://github.com/facebook/react/issues/18945#issuecomment-683853194,repo: facebook/react | issue: DevTools: Improve browser extension iframe support | keyword: gotcha
Bug: React Dev tools keys not showing last letter in FF The FireFox dev tools crop off the last letter of the keys in state/props as you can see here. ![Screenshot_2021-03-08_08-13-36](https://user-images.githubusercontent.com/21976188/110293584-a907d300-7fe6-11eb-89dc-eb709ab31fdd.png) This doesn't happen in the Chrome extension ![Screenshot_2021-03-08_08-14-18](https://user-images.githubusercontent.com/21976188/110293623-b91fb280-7fe6-11eb-90ee-b9cbe550147b.png),,,,,,Anecdotal,issue,,,,,,,,2021-03-08,github/bushblade,https://github.com/facebook/react/issues/20951,repo: facebook/react | keyword: gotcha | state: closed
@bushblade I'm having a tricky time trying to repro this issue. Could you let me know what version of Firefox/React DevTools you're seeing this on? Here is what I'm seeing on my laptop from the latest: ![Mar-08-2021 20-36-53](https://user-images.githubusercontent.com/1743953/110405106-0a16c180-804e-11eb-9d22-393dc78f1225.gif) edit: removed the video in favor of a gif,,,,,,Anecdotal,comment,,,,,,,,2021-03-09,github/mrtnrst,https://github.com/facebook/react/issues/20951#issuecomment-793246870,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"Hi @mrtnrst thanks for looking into this. I'm currently using version 86 of FF, but it's actually been like this for as long as I can remember and I've just put up with it and assumed someone would have picked up on it. I'm using Manjaro Linux (if that makes any difference) and have the same issue on my laptop also. The dev tools themselves are at version 4.10.1 Hope that helps, let me know if you need anything else.",,,,,,Anecdotal,comment,,,,,,,,2021-03-09,github/bushblade,https://github.com/facebook/react/issues/20951#issuecomment-793530532,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"> Hi @mrtnrst thanks for looking into this. > I'm currently using version 86 of FF, but it's actually been like this for as long as I can remember and I've just put up with it and assumed someone would have picked up on it. > I'm using Manjaro Linux (if that makes any difference) and have the same issue on my laptop also. > The dev tools themselves are at version 4.10.1 > Hope that helps, let me know if you need anything else. Ah gotcha! I'll spin up a Linux env tonight and try it there. Thanks…",,,,,,Anecdotal,comment,,,,,,,,2021-03-10,github/mrtnrst,https://github.com/facebook/react/issues/20951#issuecomment-795526077,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
> Any update on this? Hey @bushblade! I'm in the middle of moving so work and life got away from me. I'll have time this weekend to open a PR. Sorry for the disappearing act on this one.,,,,,,Anecdotal,comment,,,,,,,,2021-03-25,github/mrtnrst,https://github.com/facebook/react/issues/20951#issuecomment-806738500,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"Following up @bushblade. I'm running the latest Ubuntu build and I'm seeing the correct formatting. Do you have a deployed site that I can test with? Or is this happening everywhere for you? Not entirely sure what I'm missing here between our two laptops. My only thinking that might point to an issue is the `KeyValue.css` and the mix of flex containers, feels like a stretch though. This is from the reactjs.org homepage: <img width=""735"" alt=""image"" src=""https://user-images.githubusercontent.com…",,,,,,Anecdotal,comment,,,,,,,,2021-03-27,github/mrtnrst,https://github.com/facebook/react/issues/20951#issuecomment-808799592,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
> Do you have a deployed site that I can test with? Or is this happening everywhere for you? Thanks for following this up. It's everywhere for as long as I can remember using FF Here is the ReactJS home page for me.. ![Screenshot_2021-03-27_20-47-12](https://user-images.githubusercontent.com/21976188/112734464-d38de180-8f3d-11eb-996d-8d15ad4cd8ff.png) I see the issue on my main machine (Ryzen 5 desktop) and on my laptop (Thinkpad x260) Both running Manjaro XFCE. I did try Arco Linux in a Virtua…,,,,,,Anecdotal,comment,,,,,,,,2021-03-27,github/bushblade,https://github.com/facebook/react/issues/20951#issuecomment-808802102,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"> I can only replicate the issue on a real hardware installation, it does not happen in a VM. I don't have a linux build handy, I would have to run through a partition. My immediate guess is the flexbox is failing for some reason that is on the `Item` type, which corresponds to the key. Could you try testing a VM of Manjaro? I'm wondering if it's the distro itself.",,,,,,Anecdotal,comment,,,,,,,,2021-03-30,github/mrtnrst,https://github.com/facebook/react/issues/20951#issuecomment-810359696,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"I tried in a VM of Manjaro and also on my daughters computer which is using Manjaro and there is no such issue in either, so it seems to be just on my 2 machines, which I really can't understand why that would be?",,,,,,Anecdotal,comment,,,,,,,,2021-03-30,github/bushblade,https://github.com/facebook/react/issues/20951#issuecomment-810379660,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"> I tried in a VM of Manjaro and also on my daughters computer which is using Manjaro and there is no such issue in either, so it seems to be just on my 2 machines, which I really can't understand why that would be? I'm lost on why that would be. @bvaughn any ideas on your end? My only other idea would be to uninstall Firefox and reinstall the latest? Maybe an update process didn't migrate properly, however improbable that may be.",,,,,,Anecdotal,comment,,,,,,,,2021-04-01,github/mrtnrst,https://github.com/facebook/react/issues/20951#issuecomment-811985759,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
Is there an external monitor with a resolution issue? Or different system fonts? Or different zoom level / font size for system/browser preference? This might just be an edge case rendering bug that's difficult to fix.,,,,,,Anecdotal,comment,,,,,,,,2021-04-01,github/bvaughn,https://github.com/facebook/react/issues/20951#issuecomment-812028682,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"> Is there an external monitor with a resolution issue? My desktop is using 2 x Samsung S24D330's and I have no issue with those Also my Daughters computer has the same monitor. My Laptop is using just the built in screen. If it was an issue with screen or resolution I would expect it to be different between laptop and desktop, but I see the same issue on both. FF default font is default which is Dejavu Sans, but changing it doesn't seem to affect the react dev tools font, and I haven't changed…",,,,,,Anecdotal,comment,,,,,,,,2021-04-01,github/bushblade,https://github.com/facebook/react/issues/20951#issuecomment-812050624,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
> No I don't have the issue. Did the firefox UI revamp fix it? Sadly not ![Screenshot_2021-08-18_17-52-30](https://user-images.githubusercontent.com/21976188/129940092-0f63b802-72de-4bc7-b7d7-1fb52c0a6374.png),,,,,,Anecdotal,comment,,,,,,,,2021-08-18,github/bushblade,https://github.com/facebook/react/issues/20951#issuecomment-901273851,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"@bushblade You can try Safe/Troubleshoot Mode, but that probably won't let you run extensions. Refer to [this link](https://support.mozilla.org/en-US/kb/refresh-firefox-reset-add-ons-and-settings) on Refreshing/Resetting Firefox. For Additional Troubleshooting, check [this link](https://support.mozilla.org/en-US/kb/diagnose-firefox-issues-using-troubleshoot-mode)",,,,,,Anecdotal,comment,,,,,,,,2021-08-19,github/jayeshmann,https://github.com/facebook/react/issues/20951#issuecomment-901599961,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"This issue has been automatically marked as stale. **If this issue is still affecting you, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize it yet. If you have any new additional information, please include it with your comment!",,,,,,Anecdotal,comment,,,,,,,,2024-04-10,github/github-actions[bot],https://github.com/facebook/react/issues/20951#issuecomment-2047688169,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please create a new issue with up-to-date information. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2024-04-17,github/github-actions[bot],https://github.com/facebook/react/issues/20951#issuecomment-2061907893,repo: facebook/react | issue: Bug: React Dev tools keys not showing last letter in FF  | keyword: gotcha
"Add eslint rule to error on reads or writes to refs in render ## Summary After some discussion on the [useEvent RFC](https://github.com/reactjs/rfcs/pull/220) and on [Twitter](https://twitter.com/dan_abramov/status/1521942250875457536), I and others learned that writing to refs during render is not allowed. This is documented in the [new docs](https://beta.reactjs.org/apis/useref), but since this seems like it could be fairly common gotcha, I thought it might be useful to add to the eslint plug…",,,,,,Anecdotal,issue,,,,,,,,2022-05-05,github/devongovett,https://github.com/facebook/react/pull/24506,repo: facebook/react | keyword: gotcha | state: closed
"<!-- 0 failure: 0 warning: 1 markdown notices DangerID: danger-id-stable; --> Comparing: 547b707493735327373a9f8792343f73a5b080da...18d2eea2dc23eb8c98c205b6e813f66b3d6b9d70 ## Critical size changes Includes critical production bundles, as well as any change greater than 2%: | Name | +/- | Base | Current | +/- gzip | Base gzip | Current gzip | | ---- | --- | ---- | ------- | -------- | --------- | ------------ | | oss-stable/react-dom/cjs/react-dom.production.min.js | **=** | 131.58 kB | 131.58 …",,,,,,Anecdotal,comment,,,,,,,,2022-05-05,github/sizebot,https://github.com/facebook/react/pull/24506#issuecomment-1118921559,repo: facebook/react | issue: Add eslint rule to error on reads or writes to refs in render | keyword: gotcha
"hey, is there any interest in integrating this plugin or should I split it out into a separate package?",,,,,,Anecdotal,comment,,,,,,,,2022-12-12,github/devongovett,https://github.com/facebook/react/pull/24506#issuecomment-1346962746,repo: facebook/react | issue: Add eslint rule to error on reads or writes to refs in render | keyword: gotcha
"This pull request has been automatically marked as stale. **If this pull request is still relevant, please leave any comment** (for example, ""bump""), and we'll keep it open. We are sorry that we haven't been able to prioritize reviewing it yet. Your contribution is very much appreciated.",,,,,,Anecdotal,comment,,,,,,,,2024-04-10,github/github-actions[bot],https://github.com/facebook/react/pull/24506#issuecomment-2046672374,repo: facebook/react | issue: Add eslint rule to error on reads or writes to refs in render | keyword: gotcha
"Closing this pull request after a prolonged period of inactivity. If this issue is still present in the latest release, please ask for this pull request to be reopened. Thank you!",,,,,,Anecdotal,comment,,,,,,,,2024-04-17,github/github-actions[bot],https://github.com/facebook/react/pull/24506#issuecomment-2061365465,repo: facebook/react | issue: Add eslint rule to error on reads or writes to refs in render | keyword: gotcha
[NFC][Fiber] Logging protips These are the log points that I use for most debugging purposes when running unit tests with ReactNoop. It is useful to have the tree when a commit happens and when a set state happens. It is also useful to see the progression through the tree. Like `<div>` and `</div>`. You can attach additional information to these nodes depending on what you're debugging.,,,,,,Anecdotal,issue,,,,,,,,2016-10-18,github/sebmarkbage,https://github.com/facebook/react/pull/8009,repo: facebook/react | keyword: protip | state: closed
"Two things I don't like about React. **Do you want to request a *feature* or report a *bug*?** feature 1. css. I love react, but can't help notice vue components does this one thing better. writing css the way css looks, same syntax, and more importantly having access to all css properties. It looks elegant and simple, just ``` <style> .... normal css here </style> ``` and you create module css. Why can't react have such feature? Every solution I knows has invented its own syntax and walk-aroun…",,,,,,Anecdotal,issue,,,,,,,,2017-05-26,github/FateRiddle,https://github.com/facebook/react/issues/9787,repo: facebook/react | keyword: protip | state: closed
">writing css the way css looks, same syntax, and more importantly having access to all css properties. I'm not sure what you mean. React works fine with regular CSS. Write CSS in a file, and it will work in your component. Are you having any issues with this?",,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/gaearon,https://github.com/facebook/react/issues/9787#issuecomment-304303490,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
"Yes, but facebook sells hard the 'modular css' concept and is somewhat against (or at least think it is not best practice) writing css in one file. That's why we have so many solutions for css in js. My point is none of them looks as natural as what vue does.",,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/FateRiddle,https://github.com/facebook/react/issues/9787#issuecomment-304319515,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
"What “modular CSS” concept are you referring to? Facebook makes no references to CSS in the React docs. What in particular do you mean by “sells hard”? If you mean [Create React App](https://github.com/facebookincubator/create-react-app), we allow importing CSS files from JS there, but it’s not a “CSS in JS” solution. It’s just a way to split a single CSS files into many files associated with components. However, those files are pure CSS: there’s no special “modular” extensions being used there…",,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/gaearon,https://github.com/facebook/react/issues/9787#issuecomment-304320895,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
"`<div style={{marginTop:10}}>` Is this not recommended any more? And correct me if wrong, if you write css for each component, you seem to have to: ```js import style from 'style.css' ... <div className={style.appheader} /> ``` Thanks for explanation:D I guess I'm just puzzled with different css solutions out there. What about the other question I asked?",,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/FateRiddle,https://github.com/facebook/react/issues/9787#issuecomment-304322675,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
css-modules is just an option you import regular css ```js import './style.css'; ``` There's [styled-jsx](https://github.com/zeit/styled-jsx) if you like to write css in markup Inline styles are used in the same way as always for dynamic styling.,,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/TrySound,https://github.com/facebook/react/issues/9787#issuecomment-304324453,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
"@FateRiddle >`<div style={{marginTop:10}}>` >Is this not recommended any more? It was never “recommended”. It’s just a way to add dynamic styles that are calculated from JavaScript (e.g. if a style depends on a prop you can’t know for sure). Some people use it in more places (or even instead of class names) but it’s entirely subjective. Most React users just write `<div className='MyDiv' />` and then style `.MyDiv` in CSS. >And correct me if wrong, if you write css for each component, you seem …",,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/gaearon,https://github.com/facebook/react/issues/9787#issuecomment-304325245,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
> bind this way and try to pass the arguments some other ways. Is there a good way to solve this? https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md#protips,,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/bjrmatos,https://github.com/facebook/react/issues/9787#issuecomment-304325616,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
"I hope the above discussion helps! In general I recommend sticking to examples in official documentation (https://facebook.github.io/react/) and then using Create React App (https://github.com/facebookincubator/create-react-app) which we curate. People use React in different ways so we can’t really say who’s doing what and why. **React itself is pretty flexible so indeed you can use normal CSS (which we recommend), CSS modules, inline styles, or even Vue-like solutions like [styled-jsx](https:/…",,,,,,Anecdotal,comment,,,,,,,,2017-05-26,github/gaearon,https://github.com/facebook/react/issues/9787#issuecomment-304326534,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
"@FateRiddle react-csjs does just that ```js import React from 'react'; import csjs from 'react-csjs'; @csjs` .button { background-color: purple } .label { color: blue }` export default class Button extends React.Component { render() { return ( <div className={this.props.classes.button}> <span className={this.props.classes.label}> {this.props.children} </span> </div> ) } } ``` You have the same flexibity, for instance you can run postcss transforms over it at compile time. Css is problematic ove…",,,,,,Anecdotal,comment,,,,,,,,2017-06-07,github/drcmda,https://github.com/facebook/react/issues/9787#issuecomment-306780069,repo: facebook/react | issue: Two things I don't like about React. | keyword: protip
Move propType validation to element instead of class. Move propType validation to element instead of class. Conflicts: src/classic/element/ReactElementValidator.js,,,,,,Anecdotal,issue,,,,,,,,2015-01-23,github/jimfb,https://github.com/facebook/react/pull/2920,repo: facebook/react | keyword: protip | state: closed
"Improve react-tools readme We're splitting the readme for the react-tools npm package out so that we look less clowny on npm. However, I did a really poor job of making this readme good. We should make it better before we ship 0.11 (like real soon now). Let's make sure we document what `options` are actually available both in the command line and the API (protip, there are some hidden ones with the API since we pass the options object down to the source-map API). https://github.com/facebook/rea…",,,,,,Anecdotal,issue,,,,,,,,2014-07-11,github/zpao,https://github.com/facebook/react/issues/1810,repo: facebook/react | keyword: protip | state: closed
